<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="ai-monitoring-concept"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Monitoring &productname;</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <para>
        This document focuses on techniques for gathering telemetry data from
        all &productname; components.
      </para>
    </abstract>
  </info>
  <para>
    For most of the components, it presents two distinct paths:
  </para>
  <variablelist>
    <varlistentry>
      <term>Recommended settings</term>
      <listitem>
        <para>
          Straightforward configurations designed to utilize the
          &sobservability; Extension, providing quick solution for your
          environment.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Advanced configuration</term>
      <listitem>
        <para>
          For users who require deeper and more granular control. Advanced
          options unlock additional observability signals that are relevant for
          specialized analysis and fine-tuning.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>
    Several setups are specific to the product, while others&mdash;particularly
    for scraping metrics&mdash;are configured directly within the &otelemetry;
    Collector. By implementing the recommended settings, you can visualize the
    complete topology of your services and operations, bringing clarity to your
    &productname; environment.
  </para>
  <section xml:id="what-is-ai-monitoring">
    <title>What is &productname; monitoring?</title>
    <para>
      Monitoring &productname; involves observing and analyzing the behavior,
      performance and health of its components. In a complex, distributed system
      like &productname;, this is achieved by collecting and interpreting
      telemetry data. This data is typically categorized into the three pillars
      of observability:
    </para>
    <variablelist>
      <varlistentry>
        <term>Metrics</term>
        <listitem>
          <para>
            Numerical data representing system performance, such as CPU usage,
            memory consumption or request latency.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Logs</term>
        <listitem>
          <para>
            Timestamped text records of events that occurred within the system,
            useful for debugging and auditing.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Traces</term>
        <listitem>
          <para>
            A representation of the path of a request as it travels through all
            the different services in the system. Traces are essential for
            understanding performance bottlenecks and errors in the system
            architecture.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="how-observability-works">
    <title>How monitoring works</title>
    <para>
      &productname; uses &otelemetry;, an open-source observability framework,
      for instrumenting applications. Instrumentation is the process of adding
      code to an application to generate telemetry data. By using &otelemetry;,
      &productname; ensures a standardized, vendor-neutral approach to data
      collection.
    </para>
    <para>
      The collected data is then sent to &sobservability;, which provides a
      comprehensive platform for visualizing, analyzing and alerting on the
      telemetry data. This allows administrators and developers to gain deep
      insights into the system, maintain optimal performance, and troubleshoot
      issues effectively.
    </para>
  </section>
</topic>
