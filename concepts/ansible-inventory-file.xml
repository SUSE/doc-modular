<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="ansible-inventory-file"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
<info>
  <title>Structure of an inventory file</title>
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
    <para>
    An &ansible; inventory file defines the hosts or servers on which &ansible; commands and playbooks will run.
   It can be in either <literal>INI</literal> or <literal>YAML</literal> format and is a fundamental component of an Ansible project.
      </para>
    </abstract>
  </info>
  <para>Ansible uses several built-in variables to connect to and manage hosts, which are often defined in the inventory file.
  The most common ones are:</para>
  <itemizedlist>
   <listitem><para><literal>ansible_host:</literal>Specifies the IP address or DNS name of the host.</para>
    </listitem>
    <listitem><para><literal>ansible_user</literal>The user account to use for SSH connections.</para>
    </listitem>
    <listitem><para><literal>ansible_port:</literal>The path to the private key file for authentication.</para>
    </listitem>
    <listitem><para><literal>ansible_private_key_file:</literal>Specifies the IP address or DNS name of the host.</para>
    </listitem>
    <listitem><para><literal>ansible_python_interpreter:</literal>Specifies the path to the Python interpreter on the remote host if it is not the default.</para>
    </listitem>
  </itemizedlist>
  <section xml:id="inventory-ini">
    <title><literal>INI</literal> format</title>
    <para>The <literal>INI</literal> format is the more traditional and widely used format for inventory files.
     Hosts can be listed individually or grouped together.</para>
     <variablelist>
      <varlistentry>
        <term><emphasis>Individual hosts</emphasis> </term>
        <listitem>
          <para>You can either list the IP addresses or host names. For example:</para>
<screen>host1.example.com
192.168.1.50</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>Groups</emphasis> </term>
           <listitem>
          <para>Groups are defined using <literal>[]</literal> brackets. You can apply tasks to multiple hosts simultaneously.
           A host can belong to multiple groups. For example:</para>
<screen>[webservers]
web1.example.com
web2.example.com

[databases]
db1.example.com</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>Group variables</emphasis> </term>
           <listitem>
          <para>Variables can be assigned to all hosts within a specific group.
           These are defined under the group name using a <literal>:vars</literal> suffix. For example:</para>
<screen>[webservers:vars]
ansible_user=test
http_port=80</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>Child groups</emphasis> </term>
           <listitem>
          <para> You can create a group of groups, known as a parent group, using the <literal>:children</literal> suffix.
            This is useful for combining different host types for a single task. For example:</para>
<screen>[all_servers:children]
webservers
databases</screen>
        </listitem>
      </varlistentry>
      </variablelist>
   </section>
   <section xml:id="inventory-yaml">
    <title><literal>YAML</literal> format</title>
    <para>YAML offers a structured and hierarchical way to represent the inventory.
      It is often preferred for its readability and ability to handle complex data structures.</para>
     <variablelist>
      <varlistentry>
        <term><emphasis>Host and group structure:</emphasis> </term>
        <listitem>
          <para>The inventory is defined under the <literal>all</literal> keyword, which contains
            hosts and children. For example,</para>
<screen>all:
  hosts:
    host1.example.com:
    192.168.1.50:
  children:
    webservers:
      hosts:
        web1.example.com:
        web2.example.com:
    databases:
      hosts:
        db1.example.com:
            </screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>Group and host variables</emphasis> </term>
           <listitem>
          <para>Variables are defined under a <literal>vars</literal> dictionary within the host or group.
          For example:</para>
<screen>[webservers]
web1.example.com
web2.example.com

[databases]
db1.example.com</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>Group variables</emphasis> </term>
           <listitem>
          <para>Variables can be assigned to all hosts within a specific group.
           These are defined under the group name using a <literal>:vars</literal> suffix. For example:</para>
<screen>[webservers:vars]
ansible_user=test
http_port=80</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis>Child groups</emphasis> </term>
           <listitem>
          <para> You can create a group of groups, known as a parent group, using the <literal>:children</literal> suffix.
            This is useful for combining different host types for a single task. For example:</para>
<screen>all:
  children:
    webservers:
      hosts:
        web1.example.com:
          ansible_user: test
      vars:
        http_port: 80</screen>
        </listitem>
      </varlistentry>
      </variablelist>
   </section>
    </topic>
