<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="ansible-role-cockpit"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>&cockpit;</title>
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
      <para>
     This role automate the installation and configuration of the Cockpit web-based graphical interface on Linux servers.</para>
    </abstract>
  </info>
  <para>It simplifies the process of deploying a graphical console by handling package installation, firewall rules and other critical settings consistently across a fleet of machines.
    </para>
    <section xml:id="cockpit-role-variables">
      <title> &cockpit; role variables</title>
      <para>Some &cockpit; variables include: </para>
    <itemizedlist>
      <listitem>
        <para>
<literal>cockpit_packages</literal>: Is a key variable used within the Cockpit system role to control which Cockpit-related software packages are installed on a target host.
 You can set this variable in two ways:
</para>
        <itemizedlist>
          <listitem><para><emphasis>Predefined sets:</emphasis> The three predefined sets are <literal>default</literal>, <literal>minimal</literal>and <literal>full</literal>.
          <literal>default</literal> Installs the basic Cockpit packages needed for core functionality for example, system monitoring, logs and services. <literal>minimal</literal>
          Installs only the essential components, such as <literal>cockpit-system</literal> and <literal>cockpit-ws</literal>, providing a very lean web console.
          <literal>full</literal> Installs all available Cockpit packages, including those for managing storage, containers like Podman and other advanced features.
          </para>
          </listitem>
          <listitem><para><emphasis>Custom list:</emphasis> You can specify an explicit list of package names. This gives you granular control to install only the modules you need.
            For example, you could set <literal>cockpit_packages</literal> to a list like [<literal>cockpit-storaged</literal>, <literal>cockpit-podman</literal> to install just the storage and container management tools.
            </para>
            </listitem>
        </itemizedlist>
      </listitem>
      <listitem>
        <para>
     <literal>cockpit_enabled</literal>: is a boolean variable in Ansible's Cockpit system role that determines whether the Cockpit service should be in a running state immediately after the playbook executes.
     By default, <literal>cockpit_enabled: true</literal> which means that the <literal>cockpit.socket</literal> service is enabled and starts whenever the server reboots. </para>
      </listitem>
      <listitem>
        <para>
     <literal>cockpit_started</literal>: is a boolean variable in Ansible's Cockpit system role that controls whether the Cockpit service is configured to start automatically at system boot.
By default, <literal>cockpit_started: true</literal> which means that the <literal>cockpit.socket</literal> service is not only enabled but also actively running.</para>
      </listitem>
      <listitem>
        <para>
     <literal>cockpit_config</literal>: is dictionary variable used within the Ansible Cockpit role to directly manage the settings within the <filename>/etc/cockpit/cockpit.conf</filename> file.
     The role will use the values you provide in the <literal>cockpit_config</literal> variable to completely replace the contents of the <filename>/etc/cockpit/cockpit.conf</filename> file.
    </para>
      </listitem>
      <listitem>
        <para>
     <literal>cockpit_port</literal>: is used change the default listening port for the Cockpit web interface, default is <literal>9090</literal>.</para>
      </listitem>
      <listitem>
        <para>
     <literal>cockpit_manage_firewall</literal>: is a boolean variable in the Ansible Cockpit role that tells the role to automatically configure the host's firewall to allow traffic to the Cockpit web interface.
    By default, set to <literal>false</literal> which means that the &cockpit; role does not manage the firewall.
    </para>
      </listitem>
      <listitem>
        <para>
     <literal>cockpit_manage_selinux</literal>: is a boolean variable in the Ansible Cockpit role that that manages the &selnx; policy to ensure Cockpit can function correctly, especially when a non-default port is used.
     The default value of <literal>cockpit_manage_selinux</literal> is set to <literal>false</literal> .
     This is because the default behavior of the Cockpit role is to install the service to run on its standard port <literal>9090</literal>, which is already allowed by the default &selnx; policy.
    </para>
      </listitem>
      <listitem>
        <para>
     <literal>cockpit_transactional_update_reboot_ok</literal>: is used to manage reboots after transactional updates.
     When set to<literal>true</literal>, this variable allows the Cockpit role to automatically reboot the system if a transactional update requires it.
    </para>
      </listitem>
       </itemizedlist>
       <example><title>A &cockpit; playbook example </title>
        <para>This example targets a group of servers defined in your inventory as <literal>web_servers</literal>,
         installs the Cockpit web console on those servers, ensures the &cockpit; service is enabled and running
         and open the firewall to the default Cockpit port <literal>9090</literal>.
        </para>
      <screen>- name: Install and configure Cockpit
        hosts: web_servers
        become: yes
        vars:
          cockpit_manage_firewall: true
          cockpit_enabled: true
          cockpit_started: true

        roles:
          - role: linux-system-roles.cockpit</screen>
          </example>
                 </section>
    </topic>