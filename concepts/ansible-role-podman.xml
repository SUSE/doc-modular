<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="ansible-role-podman"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>&podman;</title>
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
      <para>
      This role automates the management of the &podman; container engine and its associated resources across multiple systems.
      It simplifies the deployment and maintenance of containers.</para>
    </abstract>
  </info>
  <section xml:id="podman-role-variables">
  <title> &podman; role variables</title>
  <para>Some &podman; variables include: </para>
<itemizedlist>
  <listitem>
    <para>
<literal>podman_kube_specs</literal>: is a list of dictionaries to declaratively define and manage containers and pods on a host system.
The default is an empty list <literal>[]</literal>.
</para>
  </listitem>
  <listitem>
    <para>
 <literal>podman_quadlet_specs</literal>: is a list of dictionaries that define and deploy containers via Quadlet; Podman's configuration file format that is understood by &systemd;.
 It allows users to define the content, owner, and destination path of <literal>.container</literal>, <literal>.pod</literal> or <literal>.volume</literal> files on the managed host,
 enabling &systemd; to automatically generate and manage the container as a service.
 The default is an empty list <literal>[]</literal>.
</para>
  </listitem>
  <listitem>
    <para>
 <literal>podman_secrets</literal>: is a list of dictionaries to create and manage sensitive data blobs (secrets) on the managed hosts for container use.
 The default is an empty list <literal>[]</literal>.
</para>
  </listitem>
  <listitem>
    <para>
 <literal>podman_create_host_directories</literal>: is a boolean variable when set to <literal>true</literal>,
 instructs the &podman; role to automatically create any host directories specified in the <literal>hostPath</literal> volumes of the provided Kubernetes YAML configuration.
 This ensures that the local directories required for persistent container storage exist before &podman; attempts to mount them, preventing deployment failures.
  The default value is <literal>false</literal>.
</para>
  </listitem>
  <listitem>
    <para>
 <literal>podman_pull_image</literal>: is a boolean variable used control the image pull behavior before deploying containers. When set to <literal>true</literal>, it ensures
 that the specified container image is explicitly pulled from the configured registry to the host before the &podman; container or pod is created, ensuring you use specified version.
  The default value is <literal>true</literal>.
</para>
  </listitem>
  <listitem>
    <para>
 <literal>podman_firewall</literal>: configures the firewall on the managed hosts. It defines the specific ports or services that need to be opened to allow external access to the ports
 exposed by the running &podman; containers, ensuring containerized applications are reachable.
 The default is an empty list <literal>[]</literal>.
</para>
  </listitem>
  <listitem>
    <para>
 <literal>podman_selinux_ports</literal>: is a list of dictionaries to configure &selnx; policy on managed hosts for container networking.
 The default is an empty list <literal>[]</literal>.
</para>
  </listitem>
    </itemizedlist>
   <example><title>A &podman; playbook example </title>
    <para> This playbook creates a container running as&rootuser;root with Podman volume.</para>

<screen>
- name: Manage podman root containers and services
  hosts: all
  vars:
    podman_firewall:
      - port: 8080/tcp
        state: enabled
    podman_kube_specs:
      - state: started
        kube_file_content:
          apiVersion: v1
          kind: Pod
          metadata:
            name: ubi8-httpd
          spec:
            containers:
              - name: ubi8-httpd
                image: registry.access.redhat.com/ubi8/httpd-24
                ports:
                  - containerPort: 8080
                    hostPort: 8080
                volumeMounts:
                  - mountPath: /var/www/html:Z
                    name: ubi8-html
            volumes:
              - name: ubi8-html
                persistentVolumeClaim:
                  claimName: ubi8-html-volume
  roles:
    - linux-system-roles.podman
</screen>
</example>
</section>
</topic>