<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="ansible-role-ssh"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>SSH</title>
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
      <para>
     This ssh role manages the SSH clients configuration. </para>
    </abstract>
  </info>
  <para>This role works on any system that provides openssh clients and is supported by Ansible.
    </para>
    <section xml:id="ssh-role-variables">
      <title>Role variables</title>
      <para>By default, the role should not modify the system configuration. It generates a <literal>global ssh_config</literal>
      that matches operating system defaults. The generated configuration does not keep comments and order of the options.
      </para>
    <itemizedlist>
      <listitem>
        <para>
<literal>ssh_user</literal>:By default, the variable modifies the global SSH configuration for all users. If you specify a username,
it will instead modify that specific user's configuration file, located at <literal>~/.ssh/config</literal>.
The specified user must already exist for the role to succeed.
        </para>
      </listitem>
      <listitem>
        <para>
     <literal>ssh_skip_defaults</literal>:By default, the  variable writes the system wide configuration file located
     at <filename>etc/ssh/ssh_config</filename> and keeps the operating system defaults defined.
     This is automatically disabled when a drop-in configuration file (<literal>ssh_drop_in_name!=null</literal>) or
    per-user configuration  file is created (<literal>ssh_user!=null</literal>).
       </para>
      </listitem>
      <listitem>
        <para>
          <literal>ssh_drop_in_name</literal>:This role variable defines the name for the drop-in configuration file to be placed in
          system-wide drop-in directory. The name is used in <filename>/etc/ssh/ssh_config.d/{name}.conf</filename>
to reference the configuration file that needs to be modified. Using this option will cause the process to fail if the system does not support drop-in directories.
The default value is <literal>null</literal>on unsupported systems and <literal>00-ansible</literal> on supported systems.
The suggested format for the name is  <literal>NN-name</literal>, where NN is a two-digit number for sorting, and name is a descriptive title for the file's contents or owner.
          </para>
      </listitem>
      <listitem>
        <para>
          <literal>ssh_dict</literal>: A dictionary contains configuration options and respective values.
          While a simple variable like  <literal>ssh_port</literal> can be used to set a single option,<literal>ssh_dict</literal>
          provides a structured way to manage multiple SSH configuration options within a single dictionary.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ssh_additional_packages</literal>:This variable automatically installs common packages for a given platform. To install additional packages
          such as, <literal>openssh-keysign</literal> for host-based authentication, you can specify them in the role's variables.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>ssh_config_file</literal>:This variable writes the SSH configuration file. By default, it uses <filename>/etc/ssh/ssh_config.d/{name}.conf</filename>,
          if your system supports drop-in directories, or <filename>/etc/ssh/ssh_config </filename>otherwise. If a user is specified ( <literal>ssh_user!=null</literal>),
          the default path becomes <filename>~/.ssh/config</filename>. To force the role to write to <filename>/etc/ssh/ssh_config</filename>
          even when drop-in directories are supported, set the variable <literal>ssh_drop_in_name</literal> to <literal>null</literal>.</para>
      </listitem>
      <listitem>
        <para>
          <literal>ssh_config_owner, ssh_config_group, ssh_config_mode</literal>:The role sets the <literal>owner</literal>, <literal>group</literal> and <literal>mode</literal> of the configuration file it creates.
          By default, the file is owned by <literal>root:root</literal> with  <literal>0644</literal> 0644. However, if the  <literal>ssh_user</literal> variable is specified,
          the file's owner and group is that user and the permissions are set to <literal>0600</literal>.
          </para>
      </listitem>
      <listitem>
        <para>
          <literal>ssh_backup</literal>: is a variable used in some roles to control whether a backup of the original SSH configuration file is created before it is modified.
          When <literal> ssh_backup </literal>is set to <literal>true</literal> which is often the default, the role creates a copy of the <filename>/etc/ssh/ssh_config</filename>file or any other specified config file before making any changes.
This backup file is usually given a timestamp or a <literal>.bak</literal> extension.
          </para>
      </listitem>
      <listitem>
        <para>
          <literal>ssh_transactional_update_reboot_ok</literal>:This variable manages reboots initiated by transactional updates. When <literal>ssh_transactional_update_reboot_ok</literal>is set to <literal>true</literal>,
          the role automatically reboots the system if a transactional update requires it. If it is set to <literal>false</literal>, the role notifies the user that a reboot is necessary, allowing for a manual or custom reboot process.
          If the variable is not defined at all, the role fails to prevent the required reboot from being missed.
        </para>
      </listitem>
       </itemizedlist>
       <example><title>A SSH playbook </title>
        <para>This example use an SSH role that is concise and easy to understand. It focuses on the core task of applying the logic of a pre-existing role to your target hosts.

        </para>
      <screen>- name: Configure SSH server
        hosts: all
        become: yes
        roles:
          - ssh_role</screen>
          <itemizedlist>
            <listitem>
              <para><literal>name</literal>: A descriptive name for the playbook.</para></listitem>
              <listitem>
                <para><literal>hosts</literal>: Specifies the target hosts from your Ansible inventory.
                  In this case, <literal>all</literal> means it runs on every host.</para></listitem>
                <listitem>
                  <para><literal>become</literal>: This is equivalent to using &sudo;.
                    It grants the playbook &rootuser; privileges to install packages and manage services.</para></listitem>
              <listitem> <para><literal>roles</literal>: This is where you call the <literal>ssh_role</literal>you created.</para></listitem>
                  </itemizedlist>
                 </example>
       </section>
    </topic>