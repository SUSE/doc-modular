<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="ansible-role-systemd"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>&systemd;</title>
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
      <para>
       This role automates the process of creating, starting, stopping, enabling and disabling &systemd; services as well as managing their configuration files and dependencies.
      </para>
    </abstract>
  </info>
      <section xml:id="systemd-role-variables">
      <title> &systemd; role variables</title>
      <para>
        Variables can be defined either as a list of strings or a list of dictionaries, offering two different levels of control.
        When you use a list of strings, the system assumes you're managing standard system units that are owned by the &rootuser;.
        This is a simple, direct approach for managing services or files, and for files, it assumes they should be present.
        A list of dictionaries provides more flexibility and granular control. Each dictionary in the list represents a specific item, allowing you to define additional details beyond its name, such as a service's desired state, specific file permissions, or ownership.
        This format is ideal for more complex scenarios that require  a detailed management of each individual item.
      </para>
      <itemizedlist>
        <listitem>
          <para><literal>systemd_unit_files</literal>: Is a variable used to manage the creation and state of &systemd; unit files on a target system.
         The default is an empty list <literal>[]</literal>.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_unit_file_templates</literal>: A list of &systemd; unit file names to be deployed on your managed nodes.
            Each name should match a corresponding  <literal>Jinja2</literal>template file that will be used to generate the final unit file.
            If your template file has a <literal>.j2</literal> , it is automatically removed to create the correct service name.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_dropins</literal>: Is a variable used to manage &systemd; drop-in files. These files allow you to extend or override parts of a
            main &systemd; unit file without editing it directly. This is a best practice for customizing services, as it simplifies updates and prevents conflicts.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_started_units</literal>: Is a variable used for specified services to run on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_stopped_units</literal>: Is a variable used for specified services to stop on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_restarted_units</literal>: Is a variable used for specified services to restart on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_enabled_units</literal>: Is a variable used for specified services to enable on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_disabled_units</literal>: Is a variable used for specified services to disable on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_masked_units</literal>: Is a variable used for specified services to be masked on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_unasked_units</literal>: Is a variable used for specified services to be unmasked on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_unasked_units</literal>: Is a variable used for specified services to be unmasked on the target system.
          </para>
        </listitem>
        <listitem>
          <para><literal>systemd_transactional_update_reboot_ok</literal>: A variable that manages reboots needed for transactional updates.
            When set to <literal>true</literal> true, the system reboots if a transactional update requires it.
            If the variable is set to <literal>false</literal>, the user is notified that a reboot is necessary. You have the choice to perform a reboot.
            If this variable is not set, the role will intentionally fail to prevent an essential reboot from being missed.
          </para>
        </listitem>
          </itemizedlist>
          <example><title>A &systemd; playbook example </title>
            <para>This example installs and starts the Nginx web server, ensuring it is running and enabled to start on boot.
            </para>
          <screen>- name: Manage Nginx service
            hosts: your_servers
            become: true
            roles:
              - ansible-systemd
            vars:
              systemd_started_units:
                - name: nginx.service
                  enabled: true</screen>
                 </example>
      </section>
      </topic>