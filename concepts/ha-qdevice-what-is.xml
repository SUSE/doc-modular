<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>

<!-- refers to legacy doc: https://github.com/SUSE/doc-sleha/blob/main/xml/ha_qdevice-qnetd.xml -->

<topic xml:id="ha-qdevice-what-is"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>What are &qdevice; and &qnet;?</title>
    <meta name="maintainer" content="tahlia.richardson@suse.com" its:translate="no"/>
    <abstract>
      <xi:include href="../snippets/ha-quorum.xml"/>
    <para>
      &qdevice; and &qnet; participate in quorum calculations in a split-brain scenario. &qdevice;
      runs on each cluster node and communicates with an arbitrator, &qnet;, to provide a
      configurable number of votes to the cluster. This allows the cluster to sustain more node
      failures than the standard quorum rules allow. We recommend using &qdevice; and &qnet; for
      clusters with an even number of nodes, and especially for two-node clusters.
      </para>
    </abstract>
  </info>

  <section xml:id="ha-qdevice-what-is-components">
    <title>Components</title>
    <variablelist>
      <varlistentry>
        <term>&qdevice; (<systemitem>corosync-qdevice</systemitem>)</term>
        <listitem>
          <xi:include href="../snippets/ha-qdevice.xml"/>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&qnet; (<systemitem>corosync-qnetd</systemitem>)</term>
        <listitem>
          <xi:include href="../snippets/ha-qnetd.xml"/>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Algorithms</term>
        <listitem>
          <para>
            &qdevice; supports different algorithms to determine how votes are assigned.
            <quote>Fifty-fifty split</quote> is helpful for clusters with an even number of nodes.
            <quote>Last man standing</quote> is helpful for clusters where only one
            <emphasis>active</emphasis> node needs to remain quorate.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Heuristics</term>
        <listitem>
          <para>
            &qdevice; supports a set of commands (or <quote>heuristics</quote>) that run
            when the cluster services start (or restart), when the cluster membership changes, and
            when nodes connect to the &qnet; server. Optionally, you can also configure the commands
            to run at regular intervals. The result is sent to &qnet; to help with the quorum
            calculation. Heuristics can be written in any programming language.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Tiebreaker</term>
        <listitem>
          <para>
            This is used as a fallback if the cluster partitions are equal even after the heuristics
            results are applied. The tie-breaker vote can be configured to go to the node with the
            lowest node ID, the highest node ID, or a specific node ID.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="ha-qdevice-what-is-benefits">
    <title>Benefits</title>
    <itemizedlist>
      <listitem>
        <para>
          Clusters with an even number of nodes can make quorum calculations more easily.
        </para>
      </listitem>
      <listitem>
        <para>
          The cluster can sustain more node failures than the standard quorum rules allow.
        </para>
      </listitem>
      <listitem>
        <para>
          You can write your own heuristics scripts to affect votes. This is especially useful for
          complex setups.
        </para>
      </listitem>
      <listitem>
        <para>
          Two-node clusters can use diskless &sbd; if &qdevice; is also configured.
        </para>
      </listitem>
      <listitem>
        <para>
          One &qnet; server can provide votes for multiple clusters.
        </para>
      </listitem>
      <listitem>
        <para>
          &qnet; can work with TLS for client certificate checking.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="ha-qdevice-what-is-more-info">
    <title>For more information</title>
    <para>
      For more information, see the man pages <literal>corosync-qdevice</literal> and
      <literal>corosync-qnetd</literal>.
    </para>
  </section>
</topic>
