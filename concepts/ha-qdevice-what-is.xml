<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>

<!-- refers to legacy doc: https://github.com/SUSE/doc-sleha/blob/main/xml/ha_qdevice-qnetd.xml -->

<topic xml:id="ha-qdevice-what-is"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>What is &qdevice;?</title>
    <meta name="maintainer" content="tahlia.richardson@suse.com" its:translate="no"/>
    <abstract>
    <para>
      &qdevice; and &qnet; participate in quorum decisions. With
        assistance from the arbitrator <systemitem class="daemon">corosync-qnetd</systemitem>,
        <systemitem class="daemon">corosync-qdevice</systemitem> provides
        a configurable number of votes, allowing a cluster to sustain
        more node failures than the standard quorum rules allow. We
        recommend deploying <systemitem class="daemon">corosync-qnetd</systemitem>
        and <systemitem class="daemon">corosync-qdevice</systemitem> for
        clusters with an even number of nodes, and especially for two-node clusters.
      </para>
    </abstract>
  </info>

  <para>
     In comparison to calculating quora among cluster nodes, the
     &qdevice;-and-&qnet; approach has the following benefits:
  </para>
  <itemizedlist>
     <listitem>
    <para>
       It provides better sustainability in case of node failures.
    </para>
     </listitem>
     <listitem>
    <para>
       You can write your own heuristics scripts to affect votes.
       This is especially useful for complex setups.
    </para>
     </listitem>
     <listitem>
    <para>
       It enables you to configure a &qnet; server to provide
       votes for multiple clusters.
    </para>
     </listitem>
     <listitem>
    <para>
       It allows using diskless SBD for two-node clusters.
    </para>
     </listitem>
     <listitem>
    <para>
       It helps with quorum decisions for clusters with an even number of
       nodes under split-brain situations, especially for two-node clusters.
    </para>
     </listitem>
  </itemizedlist>
  <para>
    A setup with &qdevice;/&qnet; consists of the following components and
     mechanisms:
  </para>
  <variablelist>
    <varlistentry>
    <term>&qnet; (<systemitem class="daemon">corosync-qnetd</systemitem>)</term>
    <listitem>
       <para>
      A systemd service (a daemon, the <quote>&qnet; server</quote>) which
      is not part of the cluster.
      The systemd service provides a vote to the <systemitem
         class="daemon">corosync-qdevice</systemitem> daemon.
       </para>
       <para>
      To improve security, <systemitem class="daemon">corosync-qnetd</systemitem>
      can work with TLS for client certificate checking.
       </para>
    </listitem>
     </varlistentry>
     <varlistentry>
    <term>&qdevice; (<systemitem class="daemon">corosync-qdevice</systemitem>)</term>
    <listitem>
       <para>
      A systemd service (a daemon) on each cluster node running together with
      &corosync;. This is the client of <systemitem>corosync-qnetd</systemitem>.
      Its primary use is to allow a cluster to sustain more node failures than
      standard quorum rules allow.
       </para>
       <para>
      &qdevice; is designed to work with different arbitrators. However, currently,
      only &qnet; is supported.
       </para>
    </listitem>
     </varlistentry>
     <varlistentry>
    <term>Algorithms</term>
    <listitem>
       <para>
      &qdevice; supports different algorithms, which determine the behavior
      of how votes are assigned.
      Currently, the following exist:
       </para>
       <itemizedlist>
      <listitem>
         <para>
        FFSplit (<quote>fifty-fifty split</quote>) is the default. It is used
        for clusters with an even number of nodes. If the cluster splits
        into two similar partitions, this algorithm provides one vote to one of
        the partitions, based on the results of heuristics checks and
        other factors.
         </para>
      </listitem>
      <listitem>
         <para>
           LMS (<quote>last man standing</quote>) allows the only
        remaining node that can see the &qnet; server to get the votes.
        So this algorithm is useful when a cluster with only one
        active node should remain quorate.
         </para>
      </listitem>
       </itemizedlist>
    </listitem>
     </varlistentry>
     <varlistentry>
    <term>Heuristics</term>
    <listitem>
       <para>
      &qdevice; supports a set of commands (<quote>heuristics</quote>).
      The commands are executed locally on start-up of cluster services,
      cluster membership change, successful connection to <systemitem
      class="daemon">corosync-qnetd</systemitem>, or, optionally, at
      regular times.
      The heuristics can be set with the <parameter>quorum.device.heuristics</parameter>
      key (in the <filename>corosync.conf</filename> file) or with the
      <option>--qdevice-heuristics-mode</option> option.
      Both know the values <literal>off</literal> (default),
      <literal>sync</literal>, and <literal>on</literal>.
      The difference between <literal>sync</literal> and <literal>on</literal>
      is that you can additionally execute the above commands regularly.
       </para>
       <para>
      Only if all commands are executed successfully are the heuristics
      considered to have passed; otherwise, they failed. The heuristics' result is
      sent to <systemitem class="daemon">corosync-qnetd</systemitem> where
      it is used in calculations to determine which partition should be quorate.
       </para>
    </listitem>
     </varlistentry>
     <varlistentry>
    <term>Tiebreaker</term>
    <listitem>
       <para>
      This is used as a fallback if the cluster partitions are completely
      equal even with the same heuristics results. It can be configured
      to be the lowest, the highest, or a specific node ID.
       </para>
    </listitem>
     </varlistentry>
  </variablelist>
  <para>
         For more information about &qdevice; and &qnet;, see the
         man pages <literal>corosync-qdevice(8)</literal> and <literal>corosync-qnetd(8)</literal>.
      </para>
</topic>
