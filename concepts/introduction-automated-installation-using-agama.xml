<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="introduction-automated-installation-using-agama"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Introduction to automated installation using &agama;</title>
    <!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
    <abstract>
      <!-- can be changed via merge in the assembly -->
      <para>
        This article describes how to use &agama; for automated and unattended installation of
        &productname;. You can use JSON <emphasis>profiles</emphasis> describing different aspects
        of the intended system, and &agama; installs accordingly. While not a fully backward compatible
        replacement for Auto&yast;, it simplifies the task of automated installation and provides
        multiple clients for interactive and automated installation.
      </para>
    </abstract>
  </info>
  <section xml:id="automated-installation-what-is-agama">
    <title>What is &agama;</title>
    <para>
      Agama is a service-based Linux installer capable of performing both interactive and
      unattended installations. You can provide &agama; with a JSON profile file detailing the initial
      system state, such as user authentication, partitioning, networking and software selection.
      On receiving the profile and instructions for installation from one of its supported clients,
      &agama; installs your target system accordingly. Users can interact with and control the
      installation process using &agama;'s Web-based user interface, command-line interface and
      HTTP API, facilitating automation and integration into existing workflows.
    </para>
    <para>
      While &agama; reuses many principles and internal components from previous SUSE installers
      like &yast; and Auto&yast;, and offers a high level of backward compatibility for unattended
      installations, it is not a 100% compatible drop-in replacement for all Auto&yast; features.
      &agama; focuses only on the installation process rather than being a general configuration
      tool.
    </para>
    <figure xml:id="agama-server-client-architecture">
      <title>&agama; client-server architecture</title>
      <mediaobject>
        <imageobject role="html">
          <imagedata fileref="agama-server-client-architecture.png"/>
        </imageobject>
        <imageobject role="fo">
          <imagedata fileref="agama-server-client-architecture.png" width="85%"/>
        </imageobject>
        <textobject role="description">
          <phrase>Diagram of &agama;'s client-server architecture showing three clients&mdash;CLI, 
            Web UI and others&mdash;connecting to the &agama; core via an HTTP API</phrase>
        </textobject>
      </mediaobject>
    </figure>
  </section>
  <section xml:id="automated-installation-why-use-agama">
    <title>Why use &agama; for automated installation?</title>
    <para>
      &agama; offers its installation service through an HTTP API, which you can use
      interactively from a Web-based interface and a command-line interface (CLI), or provide a
      JSON profile to &agama; for automated installation of a target system. Using the HTTP API, you
      can also integrate with custom scripts and deployment tools. The benefits of using Agama for
      automated installation are as follows:
    </para>
    <variablelist>
      <varlistentry>
        <term>Focus on core installation</term>
        <listitem>
          <para>
            &agama; focuses on core installation tasks such as user authentication, network
            configuration, storage setup and software installation, delegating further
            configuration to other tools such as &ansible;, &salt;, &cockpit; or &openscap;.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Profile-based installation</term>
        <listitem>
          <para>
            You can define installation parameters for the target system in an easily readable and
            editable JSON or Jsonnet profile. Existing XML-based Auto&yast; profiles are also supported with
            some exceptions.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Comprehensive profile configuration</term>
        <listitem>
          <para>
            The profile allows detailed setup including user authentication, product registration,
            network connections, storage (drives, partitions, LVM, RAID, encryption, resizing,
            deleting), software selection by patterns and packages, localization (language,
            keyboard, time zone) and many other aspects of the target system that are not exposed in
            the graphical or Web-based interface. This provides a more granular level of control over the
            installation parameters.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Dynamic profiles</term>
        <listitem>
          <para>
            &agama; supports dynamic profiles using Jsonnet, injecting hardware information that
            can be processed at runtime. This avoids reliance on Auto&yast;'s rules or ERB for
            dynamic configurations.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Auto&yast; compatibility</term>
        <listitem>
          <para>
            &agama; offers a mechanism to reuse existing AutoYaST profiles to a great extent. It
            supports some dynamic features such as pre-scripts, rules/classes, and Embedded Ruby
            (ERB) when using Auto&yast; profiles. A <literal>legacyAutoyastStorage</literal>
            section allows direct use of the Auto&yast; profile's <literal>partitioning</literal>
            section for backward compatibility.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Custom scripts</term>
        <listitem>
          <para>
            Profiles can define pre-installation, post-partitioning, chroot, and init scripts that
            run at specific stages. You can include scripts by URL, location in the hard drive, or
            embed the script content in the profile itself.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Easy initiation</term>
        <listitem>
          <para>
            The typical way to start an unattended installation from an ISO image is using the
            <literal>inst.auto</literal> kernel boot option, pointing to the profile URL or its
            location in the hard drive. You can also use the <command>agama profile
            import</command> command from the &agama; CLI to load a profile, followed by the
            <command>agama install</command> command. The CLI also allows inspection, modification
            and validation of the profile, and subsequent monitoring of the installation process.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</topic>
