<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="kernel-boot-parameters-modify-introduction"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Introduction to kernel boot parameters</title>
    <!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="ssarkar@suse.com" its:translate="no"/>
    <abstract>
      <!-- can be changed via merge in the assembly -->
      <para>
        Before modifying kernel boot parameters, it is important to understand the basic concepts -
        definition, methods, benefits and examples of modifying kernel boot parameters.
      </para>
    </abstract>
  </info>
  <section xml:id="kernel-boot-parameters-modify-definition">
    <title>What are kernel boot parameters?</title>
    <para>
      Kernel boot parameters are configurations passed to the &sle; kernel during the boot process
      managed by the &grub;. The configurations are instructions to the &grub; boot loader on how
      to configure certain features and make them behave in the intended manner. The method of
      modification depends on whether you want the changes to impact only the next boot, or all
      subsequent boots till further changes are made.
    </para>
  </section>
  <section xml:id="kernel-boot-parameters-modification-types">
    <title>Methods of modification</title>
    <para>
      You can modify the kernel boot parameters using the following methods:
    </para>
    <variablelist>
      <varlistentry>
        <term>Temporarily</term>
        <listitem>
          <para>
            Changes are held in memory and apply only to the upcoming boot process. These changes
            made through the &grub; boot menu are not written to any configuration file and are
            discarded after reboot.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Permanently</term>
        <listitem>
          <para>
            Changes are written to <filename>/etc/default/grub</filename> file and persist across
            all subsequent boot processes. For permanent changes, we
            <emphasis role="strong">recommend</emphasis> using the &yastcc; instead of directly
            editing the <filename>/etc/default/grub</filename> file.
          </para>
          <para>
            However, if you directly edit the <filename>/etc/default/grub</filename> file, modify
            the <varname>GRUB_CMDLINE_LINUX</varname> or
            <varname>GRUB_CMDLINE_LINUX_DEFAULT</varname> variables. After modification, regenerate
            the &grub; configuration by running the following command with administrative
            privileges.
          </para>
<screen>&prompt.sudo;<command>grub2-mkconfig -o /boot/grub2/grub.cfg</command></screen>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="kernel-boot-parameters-modify-reason">
    <title>Benefits of modifying kernel boot parameters</title>
    <para>
      Modifying kernel boot parameters is essential for achieving specific system configurations
      and addressing several scenarios, including:
    </para>
    <itemizedlist>
      <listitem>
        <formalpara>
          <title>Performance optimization</title>
          <para>
            Tweaking parameters to enhance system performance, responsiveness, and overall
            efficiency based on specific system requirements. For example, using the
            <code>quiet</code> parameter suppresses most boot messages, reducing boot time and
            improving performance during startup.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Hardware compatibility</title>
          <para>
            Tailoring parameters to ensure compatibility with specific hardware components,
            addressing potential compatibility issues. For example, the <code>acpi=off</code>
            parameter can be used to disable the Advanced Configuration and Power Interface (ACPI)
            to resolve boot problems on older hardware.
          </para>
        </formalpara>
      </listitem>
      <listitem>
        <formalpara>
          <title>Troubleshooting</title>
          <para>
            Altering parameters to troubleshoot issues such as graphics driver problems, ensuring a
            more stable and functional system. For instance, the <code>nomodeset</code> parameter
            can be used to disable kernel mode setting, which is helpful when troubleshooting
            issues with graphics drivers that prevent the system from booting.
          </para>
        </formalpara>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="kernel-boot-parameters-modify-examples">
    <title>Examples of commonly modified kernel boot parameters</title>
    <para>
      There are several kernel parameters that you can optionally modify to customize your boot
      process. Based on you your use case, you can consider few of the most commonly modified
      kernel boot parameters:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <literal>root=</literal>: Specifies the path to the root file system.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>quiet</literal>: Suppresses most boot messages.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>splash</literal>: Displays a graphical boot splash screen.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>nomodeset</literal>: Disables kernel mode setting.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>debug</literal>: Enables debugging output.
        </para>
      </listitem>
      <listitem>
        <para>
          <literal>acpi=</literal>: Toggles the Advanced Configuration and Power Interface (ACPI)
          settings.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      For a detailed understanding of all available kernel parameters and their possible values,
      source documentation is available at
      <link
      xlink:href="https://www.kernel.org/doc/Documentation/admin-guide/kernel-parameters.txt"/>.
    </para>
  </section>
  <section xml:id="kernel-boot-parameters-modify-general-rules">
    <title>General rules for specifying values of kernel boot parameters</title>
    <para>
      When modifying kernel boot parameters, follow these essential formatting rules:
    </para>
    <variablelist>
      <varlistentry>
        <term>Basic Parameter Spacing</term>
        <listitem>
          <para>
            Separate individual parameters with a single space:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                In &yast;, select <menuchoice><guimenu>System</guimenu><guimenu>Boot
                Loader</guimenu><guimenu>Boot Loader Settings</guimenu><guimenu>Kernel
                Parameters</guimenu></menuchoice>. Enter parameters in the <guimenu>Optional Kernel Command Line
                Parameter</guimenu> field with spaces between them.
              </para>
            </listitem>
            <listitem>
              <para>
                In the <filename>/etc/default/grub</filename> configuration file for &grub;, use
                spaces between kernel parameters when passing them as string values to the
                <varname>GRUB_CMDLINE_LINUX</varname> or
                <varname>GRUB_CMDLINE_LINUX_DEFAULT</varname> variables.
              </para>
            </listitem>
            <listitem>
              <para>
                At the boot menu, press <keycap>E</keycap> to edit, locate the line starting with
                <literal>linux</literal> or <literal>linux16</literal>, and add parameters with
                spaces.
              </para>
            </listitem>
          </itemizedlist>
          <example>
            <title>Separate individual parameters with a single space</title>
<screen>root=/dev/sda1 quiet splash</screen>
          </example>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Parameter Value Assignment</term>
        <listitem>
          <para>
            When assigning values, use the equals sign (<literal>=</literal>) without spaces:
          </para>
          <example>
            <title>Correct method of assigning values to kernel parameters</title>
<screen>root=/dev/sda1 video=1920x1080</screen>
          </example>
          <example>
            <title>Incorrect method of assigning values to kernel parameters</title>
<screen>root = /dev/sda1 video = 1920x1080</screen>
          </example>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Values Containing Spaces</term>
        <listitem>
          <para>
            For values containing spaces, the handling differs between methods:
          </para>
          <variablelist>
            <varlistentry>
              <term>&yastcc; Boot Loader</term>
              <listitem>
                <para>
                  Enter the value with quotes directly in the parameter field; the &yastcc; handles
                  the spacing appropriately before passing it on to &grub;.
                </para>
                <example>
                  <title>Kernel parameter values containing spaces in the &yastcc;</title>
<screen>root="/dev/mapper/<replaceable>USER VOLUME</replaceable>"</screen>
                </example>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>&grub; configuration file</term>
              <listitem>
                <para>
                  Use either double quotes with escape characters, or use backslashes.
                </para>
                <example>
                  <title>Kernel parameter values containing spaces in the &grub; configuration file</title>
<screen>GRUB_CMDLINE_LINUX="root=\"/dev/mapper/<replaceable>USER VOLUME</replaceable>\""</screen>
<screen>GRUB_CMDLINE_LINUX="root=/dev/mapper/<replaceable>USER<emphasis>\</emphasis> VOLUME</replaceable>"</screen>
                </example>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>&grub; Boot Menu</term>
              <listitem>
                <para>
                  Use only double quotes for values containing spaces:
                </para>
                <example>
                  <title>Kernel parameter values containing spaces in the &grub; boot menu</title>
<screen>root="/dev/mapper/<replaceable>USER VOLUME</replaceable>"</screen>
                </example>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Multiple values for a kernel parameter</term>
        <listitem>
          <para>
            Use commas without spaces to separate multiple values for a single parameter in all
            methods:
          </para>
          <example>
            <title>Multiple values for a kernel parameter</title>
<screen>console=tty0,tty1 video=HDMI-A-1:1920x1080@60,VGA-1:1024x768</screen>
          </example>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</topic>
