<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="keylime-payload"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>&keylime; secure payloads</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <para>
        &keylime; is a remote attestation solution that enables you to monitor
        the health of remote nodes.
      </para>
    </abstract>
  </info>
  <section xml:id="keylime-payload-what-is">
    <title>What is a secure payload?</title>
    <para>
      A &keylime; secure payload enables you to deliver encrypted data to
      healthy agents. Payloads are used to provide keys, passwords,
      certificates, configurations or scripts that are further used by the
      &keylime; agent.
    </para>
  </section>
  <section xml:id="keylime-payload-how-it-works">
    <title>How does a secure payload work?</title>
    <para>
      A secure payload is delivered to the agent in a <filename>zip</filename>
      file that must contain a shell script named
      <filename>autorun.sh</filename>. The script is executed only if the agent
      has been properly registered and verified. To deliver the
      <filename>zip</filename> file, use the <option>--include</option> option
      of the <command>keylime_tenant</command> command.
    </para>
    <para>
      For example, the following <filename>autorun.sh</filename> script creates
      a directory structure and copies SSH keys there. The related
      <filename>zip</filename> archive must include these SSH keys.
    </para>
<screen>&prompt.user;cat autorun.sh
#!/bin/bash
 
 mkdir -p /root/.ssh/
 cp id_rsa* /root/.ssh/
 chmod 600 /root/.ssh/id_rsa*
 cp /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys</screen>
  </section>
</topic>
