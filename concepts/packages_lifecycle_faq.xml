<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="concept-example"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Package maintainer's FAQ</title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       The topic covers FAQ a package mantaine may have.
      </para>
    </abstract>
  </info>
  <qandaset>
    <qandaentry>
    <question>
        <para>I want to define a lifecycle for my package. What should I do?</para>
      </question>
      <answer>
        <para>
          Raise a Jira ticket so we can track and document the process. If you are not sure about
          the lifecycle category, contact your manager and a &slea; architect.
        </para>
      </answer>
      </qandaentry>
       <qandaentry>
    <question>
        <para>Which type of lifecycle can or should I adopt?</para>
      </question>
      <answer>
        <para>
          The further down in the stack your component is, the more packages depend on
          it, so you should take a more conservative approach. When in doubt, contact the
          &slea; architects. 
        </para>
      </answer>
      </qandaentry>
       <qandaentry>
    <question>
        <para>I want to use a balanced lifecycle for my package. Should I go for several versions in parallel?</para>
      </question>
      <answer>
        <para>
          In general, it is better to replace the old package with a new version. It creates less
          overhead on the maintainer side and is less confusing to customers. A sliding window
          is useful for most toolchain components that have API or ABI changes as part of
          new releases. However, the particular approach depends on the amount and type of changes.
          For example, if the changes can be adopted easily or even automated, then it is better to
          just update the package. When changes lead to conflicts that neither we nor the customer can easily resolve, then maintaining parallel versions is a better option. 
        </para>
        <para>
          &suse; tried this on a case-by-case basis for Python modules.
        </para>
      </answer>
      </qandaentry>
       <qandaentry>
    <question>
        <para>Should I convert my package from a balanced lifecycle to an agile one, and release updated versions also to code streams under LTS?</para>
      </question>
      <answer>
        <para>
          This is a question that we need to investigate in every case. In general, if
          the particular package is beneficial for customers on the older releases, then it may be
          worth releasing the updated packages to older releases. For example, if a component is
          mostly about operations, then it may be useful for customers on older releases. On
          the contrary, newer packages that provide hardware enablement are usually not needed, as
          customers' hardware has not changed since the time of installation.
        </para>
      </answer>
      </qandaentry>
  </qandaset>
</topic>
