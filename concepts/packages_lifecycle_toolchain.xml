<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="packages-lifecycle-toolchain"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Update strategy of toolchain components</title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       The toolchain components include the following tools: the GNU C library, the Gcc and G++
       compilers, <literal>binutils</literal>, GDB and  LLVM. Each of the components update
       strategy is described in corresponding sections.
      </para>
    </abstract>
  </info>
  <section xml:id="packages-lifecycle-toolchain-glibc">
    <title>GNU C library (<literal>glibc</literal>)</title>
    <para>
      The initial <literal>glibc</literal> version is <emphasis>2.40</emphasis>. The package is
      updated with each minor &slea; release if there are reasons for changes to the package (for
      example feature requests, performance tuning and so on). 
    </para>
    <para>
      Updates of the package provide a dynamic-linking backward compatibility to let programs built
      on the previous &slea; 16 releases functional. On contrary, symbols deprecated in the
      upstream <literal>glibc</literal> version will not be declared for the compiler and not
      available for link editing (static linking). Such cases, when source level and static linking
      backward compatibility is not guaranteed, are properly documented.
    </para>
  </section>

  <section xml:id="packages-lifecycle-toolchain-applications">
    <title>Compiler for user space applications and libraries</title>
    <para>
      Developers of user space application can use the supported GNU Compiler Collection (GCC) C
      and C++ built-in compilers. Compilers for other languages, cross-compilers and accelerator
      offloading compilers are not available on &slea; from standard repositories, but developer
      can install them from Package Hub with a community support. 
    </para>
    <para>
      Initial major version in &slea; 16.0 and 16.1 is GCC 15. Later &slea; releases will introduce the
      tick-tock model:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Each even minor release of &slea; (the tick release) introduces a new major version of
          GCC. This GCC version is supported during the LTS for the minor version that introduced
          it and also for the next &slea; minor version. For example, if GCC 17 is introduced in
          &slea; 16.2, it will be supported till the end of LTS for &slea; 16.3.
        </para>
      </listitem>
      <listitem>
        <para>
          Each odd minor release of &slea; (the tock release) comes with a new non-default major
          version of GCC. As this version is not the default one, you must explicitly
          invoke the binaries <literal>gcc-x</literal>, <literal>g++-x</literal> and
          <literal>gfortran-x</literal> to use it. These non-default version are supported for 24 months.
        </para>
      </listitem>
    </itemizedlist>
    <section xml:id="packages-lifecycle-toolchain-applications-flags">
      <title>Supported compiler flags</title>
      <para>
        Any combination of the following compiler flags is supported:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>-O0</literal>, <literal>-O2</literal> and <literal>-O3</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>-ffast-math</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>-flto</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>-fpie</literal> and <literal>-fno-pie</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>-fPIC</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>-g</literal>
          </para>
        </listitem>
      </itemizedlist>
      <para> 
        Only on &x86-64; also these options are supported:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <literal>-march=x86-64-v2 </literal> (the
            default one) 
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>-march=x86-64-v3</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>-march=x86-64-v4</literal>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Other compiler flags are not supported by &suse;. However, we can assist in repoting issues
        to the upstream GCC project.
      </para>
    </section>

    <section xml:id="packages-lifecycle-toolchain-applications-languages">
      <title>Supported language versions</title>
      <para>
        For the C language, the most recent supported version is ISO/IEC 9899:2024 (known as C23)
        with GNU extensions. 
      </para>
      <para>
        For C++, the most recent supported version is ISO/IEC 14882:2017 (known as C++17) with GNU extensions.
      </para>
      <para>
        &suse; also provides unsupported packages with a compiler for Fortran, Ada and Go (gcc-go).
      </para>
    </section>
  </section>
  <section xml:id="packages-lifecycle-toolchain-kernel">
    <title>The kernel module compiler</title>
    <para>
      To build a kernel module, you need the same compiler version as has been used to build the
      kernel. Therefore, &suse; provides the same GCC version &ndash; initially GCC 13.N.
    </para>
    <para> 
      The compiler for kernel modules is not intended for general use. The kernel module compiler
      may also be dropped in a future minosr release of &slea;.
    </para>
  </section>
  <section xml:id="packages-lifecycle-toolchain-system-builds">
    <title>The build compiler</title>
    <para>
There is a default compiler that is used internally to build &slea; 16 packages in the version GCC
13. The build compiler is provided as unsupported package in a PackageHub.
    </para>
    <para>
      Package maintainers can use a newer GCC available in the internal build service, but in this
      case you mus be aware of possible ABI issues (for example, avoid linking together code written in different C++ standards).
    </para>
  </section>

  <section xml:id="packages-lifecycle-toolchain-runtime">
    <title>GCC and G++ runtime libraries</title>
    <para>
GCC runtime libraries (<literal>libgcc</literal>, <literal>libstdc++</literal>) are updated to the
versions of a new major version of GCC on a yearly basis in all &slea; minor releases under LTS.
The runtime libraries are updated within maintenance updates.
    </para>
    <para>
      The runtime libraries are fully supported during the general support and LTS of each &slea;
      minor version. 
    </para>
    <para>
      When security incidents may happen, these runtime libraries are the only part of the
      toolchain that can be used for that matter.
    </para>
  </section>

  <section xml:id="packages-lifecycle-toolchain-binutils">
    <title>The GNU Binutils</title>
    <para>
      The GNU Binutils are upgraded to the latest upstream version in all &slea; 16 minor releases
      under general support ot LTS.
    </para>
  </section>

  <section xml:id="packages-lifecycle-toolchain-gdb">
<title>The GNU project debugger</title>
<para>
  GBD is updated to the newest major version on all &slea; 16 minor releases under general support
  or LTS. However, this means that some funcionality may removed from the package.
</para>
  </section>


</topic>
