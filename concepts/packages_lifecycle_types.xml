<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="package-lifecycle-categories"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Types of packages life cycles</title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       On &sle; 16, component packages are sorted into different lifecycle categories. This section describes
       the criteria for such a sorting.       
      </para>
    </abstract>
  </info>
  <para>
    When a package is to be categorized, the impact of the package change on the system is taken into
    account. Before the impact of the change can be estimated, interfaces of the particular
    component must be identified. For example,  in case of a shared library, a change to its API and ABI may
    be disruptive to the system, or in a case of a compiler or interpreter the relevant discruptive
   changes to interfaces
    are cahnges of supported languages, command line interface options or performance of the compiled code. On contrary, a minor backward-compatible change may have little to no impact on that
    component.
  </para>
<para>
  In general, a package falls exactly into one of the categories: <emphasis
  role="bold">stable</emphasis>, <emphasis role="bold">balanced</emphasis>, or <emphasis role="bold">agile</emphasis>. However, some technologies may have
  packages sorted into several different categories, for example, Python. The following sections
  describe the package categories in detail.  
</para>
  <section xml:id="package-lifecycle-categories-stable">
    <title>Stable</title>
    <para>
      Packages that are marked as stable* (also called conservative) are those that do not deliver a disruptive change
      while a customer is on any of the 16 minor versions. During the upgrade to another minor
      version, package version may change but the newer version does <emphasis
      role="bold">not</emphasis> introduce imcompatibile behavior. Customers expect to have LTS on
      these packages.
    </para>
    <para>
      The packages belonging to this category can change, but the following criteria apply:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          changes to functionality are backward compatible&ndash;functionality can be added, but not removed
        </para>
      </listitem>
      <listitem>
        <para>
          changes to interfaces is backward compatibile
        </para>
      </listitem>
      <listitem>
        <para>
default behavior of applications does not change in an unexpected way.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Under exceptional circumstances like serious security issues, the package can be updated even
      at the cost of bringing disruptive changes. Alternatively, if a new version of a package
      contains disruptive changes, this version can delivered as an alternative to the previous one.
    </para>
    <para>
      A typical example of a stable package is <literal>util-linux</literal>. Also
      <literal>glibc</literal>, whose update is backward compatible except for symbols that are deprecated upstream.
    </para>
  </section>
  <section xml:id="package-lifecycle-categories-balanced">
    <title>Balanced</title>
    <para>
      Packages categorized as balanced are changing (driven by upstream evolution and customer demands), but should not cause disruptive changes
      within one minor version. A small amount of incompatible changes is possible, but always
      documented in the release notes for that particular minor release.
    </para>
    <para>
      Customers expect a moderate amount of changes during the upgrade from a minor release.
      However, the transition must be smooth either by getting back to the original behavior or by
      providing the older version in prallel with the new one. Where appropriate, customers are 
    </para>
    <para>
      When change is being introduced, it can be in one of the following ways:
    </para>
    <itemizedlist>
      <listitem>
        <para>
A single version is provided in the minor release. The new version replaces the previous one while
allowing for smooth transitions between the versions. New versions are released only with new
minor release.
        </para>
      </listitem>
      <listitem>
        <para>
          Two versions are provided simultaneously. The new version is introduced in addition to the
          existing version, which then becomes obsolete with the next minor release.
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Such versions are supported at least until the end of LTS of the minor release that introduced them.
    </para>
    <para>
      To help with incorporating changes in a conservative environment, the tick-tock model can be
      used. For example, we could mark even numbered minor releases as <emphasis>tick</emphasis>
      releases and odd minor releases as <emphasis>tock</emphasis>. These <emphasis>tock</emphasis> releases could still see version updates in packages that have a
      balanced lifecycle, but these newer versions are fully backward compatible in
      all relevant aspects.   
    </para>
    <para>
      For ISVs, a stable runtime environment is critical. Therefore, not to break third party
      applications, in case of shared libraries where &suse; provides the corresponding
      <literal>-devel</literal> package, the older <literal>.so</literal> version is not deprecated
      immediately. For example, for a package called <literal>foo</literal> there are packages:
      <literal>libfoo-0_1</literal>, <literal>foo-devel</literal> and
      <literal>foo-utils</literal>; if the package version is updated while changing also the
      version of the shared library to <literal>libfoo-0_2</literal>, the
      <literal>libfoo-0_1</literal> is not removed. 
    </para>
    
    <para>
      Typical examples of balanced packages, include the following ones:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          &systemd; &ndash; changes should be backward-compatible; incompatible changes are
          documented in the release notes
        </para>
      </listitem>
      <listitem>
        <para>
kernel &ndash; the kernel is updated each minor release
        </para>
      </listitem>
      <listitem>
        <para>
          virtualization components &ndash; they are updated with each minor release
        </para>
      </listitem>
      <listitem>
        <para>
          MariaDB &ndash; a new minor version with each minor release
        </para>
      </listitem>
      <listitem>
        <para>
          PostgreSQL &ndash; upstream versions are released on a roughly annual basis, so either the
          new version is introduced with a minor release or is part of a maintenance update for
          older minor releases
        </para>
      </listitem>
      <listitem>
        <para>
          Python &ndash; a version supported for a longer preriod of time with a set of modules on top.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="package-lifecycle-categories-agile">
    <title>Agile</title>
    <para>
      Packages categorized as agile are up-to-date with upstream even though they may bring
      incompatible changes to the system.
    </para>
    <para>
      Updates to these packages are done in two possibles ways:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          With a release of a new package version, one or more older versions are supported for
          customers that cannot switch easily to the new version. There is a sliding window in
          which different versions are supported concurrently (for example, for version N and
          version N - 1). These concurrent versions are supported for a certain period of time that
          can be different from the life time of the minor release. 
        </para>
      </listitem>
      <listitem>
        <para>
         A package is just updated without support for the older version. 
        </para>
      </listitem>
    </itemizedlist>
    <para>
      All new package versions are released simultaneously to all minor releases under general support and generally also in LTS.
    </para>
    <para>
      The following packages are categorized as agile:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Go and Rust &ndash; a new version is released roughly every 6 months with a sliding
          window of 2 months
        </para>
      </listitem>
      <listitem>
        <para>
          GCC &ndash; new version of the compiler is released with each minor release with a
          sliding window of 2. However, the libraries <literal>libgcc</literal> and
          <literal>libstdc++</literal> are categorized as stable
        </para>
      </listitem>
      <listitem>
        <para>
          CLI and SDK for Public Cloud &ndash; a new version every quarter and the new version
          replaces the previous one
        </para>
      </listitem>
      <listitem>
        <para>
          Python interpreter, library and a pip &ndash; a new version is released once a year
        </para>
      </listitem>
      <listitem>
        <para>
          data files for timezone &ndash; a new version is released when a new set of definitions becomes available.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</topic>
