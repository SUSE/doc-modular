<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="pam-about"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Introduction to PAM</title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
        <para>
    Linux uses PAM (pluggable authentication modules) in the authentication
    process as a layer that mediates between user and application. PAM
    modules are available on a system-wide basis, so they can be requested by
    any application. This chapter describes how the modular authentication
    mechanism works and how it is configured.
   </para>
      </abstract>
  </info>
  <para>
   System administrators and programmers often want to restrict access to
   certain parts of the system or to limit the use of certain functions of
   an application. Without PAM, applications must be adapted every time a
   new authentication mechanism, such as LDAP, Samba, or Kerberos, is
   introduced. However, this process is time-consuming and
   error-prone. One way to avoid these drawbacks is to separate applications
   from the authentication mechanism and delegate authentication to
   centrally managed modules. Whenever a newly required authentication
   scheme is needed, it is sufficient to adapt or write a suitable
   <emphasis>PAM module</emphasis> for use by the program in question.
  </para>

  <para>
   The PAM concept consists of:
  </para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <emphasis>PAM modules</emphasis>, which are a set of shared libraries
     for a specific authentication mechanism.
    </para>
   </listitem>
   <listitem>
    <para>
     A <emphasis>module stack</emphasis> with one or more PAM modules.
    </para>
   </listitem>
   <listitem>
    <para>
     A PAM-aware <emphasis>service</emphasis> which needs authentication by
     using a module stack or PAM modules. Usually a service is a familiar
     name of the corresponding application, like <command>login</command> or
     <command>su</command>. The service name <literal>other</literal> is a
     reserved word for default rules.
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>Module arguments</emphasis>, with which the execution of a
     single PAM module can be influenced.
    </para>
   </listitem>
   <listitem>
    <para>
     A mechanism evaluating each <emphasis>result</emphasis> of a single PAM
     module execution. A positive value executes the next PAM module. The
     way a negative value is dealt with depends on the configuration:
     <quote>no influence, proceed</quote> up to <quote>terminate
     immediately</quote> and anything in between are valid options.
    </para>
   </listitem>
  </itemizedlist>
</topic>
