<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="selinux-about"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>About SELinux</title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       The topic covers the basics about &selnx;.
      </para>
    </abstract>
  </info>
  <para>
  &selnx; was developed as an additional Linux security solution that uses the
  security framework in the Linux kernel. The purpose was to allow for a more
  granular security policy that goes beyond the standard Discretionary Access
  Controls (DAC), the traditional file permissions of owner/group/world, and
  read/write/execute.
 </para>
 <para>
  &selnx; uses labels attached to objects (for example, files and network
  sockets) and uses them for access decisions.
 </para>
 <para>
  The default action of &selnx; is to deny any access. &selnx; allows only
  actions that were specifically allowed in the &selnx; policy. Another feature
  of &selnx; that increases security is that &selnx; allows strict confinement
  of processes up to the point where the processes cannot access files of other
  processes on the same system.
 </para>
 <para>
  &selnx; was designed to enhance existing security solutions, not to replace
  them. For example, discretionary access control (DAC) is still applied even
  if the system is using &selnx;. If DAC denies access first, &selnx; is then
  not used as the access was already blocked by another mechanism.
 </para>
  
</topic>
