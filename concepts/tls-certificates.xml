<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="tls-certificates-introduction"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Securing communication using TLS</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <xi:include href="../snippets/tls-certificates-introduction.xml"/>
    </abstract>
  </info>
  <para>
    This topic introduces basic terms and theory behind establishing encrypted
    communication.
  </para>
  <section xml:id="tls-certificates-terminology">
    <title>Terminology</title>
    <para>
      Here is an explanation of terms that are specific to TLS encryption.
    </para>
    <variablelist>
      <varlistentry>
        <term>TLS</term>
        <listitem>
          <para>
            <emphasis>Transport layer security</emphasis> (TLS) is a protocol
            that provides secure communication between client-server
            applications. TLS uses asymmetric cryptography with a pair of
            private and public keys. TLS is the successor to the SSL (Secure
            Sockets Layer) protocol.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SSL</term>
        <listitem>
          <para>
            <emphasis>Secure socket layer</emphasis> (SSL) was the predecessor
            of the TLS protocol. SSL version 3.0 was replaced by TLS 1.0 in 1999
            to address existing vulnerabilities.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>TLS certificate</term>
        <listitem>
          <para>
            A digital X.509 certificate that helps to secure communication
            within a client-server system. Using TLS certificate, the client
            can authenticate the identity of the server and encrypt their mutual
            communication. The certificate usually includes information about
            its issuer (CA), identity of its holder, the associated public key,
            digital signature, and its validation period.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>TLS certificate chain</term>
        <listitem>
          <para>
            A series of certificates used to establish the authenticity and
            trustworthiness of a particular certificate. A certificate chain can
            consist of the following certificate types:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                The <emphasis role="bold">root CA</emphasis> is a trusted entity
                at the top of the chain. It signs subordinate CAs and end-entity
                CAs. Root certificates are preinstalled in &productnameshort;
                to establish trust.
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">Subordinate CAs</emphasis> live between
                the root and end-entity certificates and are used to sign other
                certificates, including end-entity certificates. Their main
                purpose is to define and authorize the types of certificates
                that can be requested from the root CA. For example, there can
                be different subordinate CAs for different locations, or
                encryption key types.
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis role="bold">End-entity certificates</emphasis> are
                issued to individual entities such as Web sites, servers or
                clients. These certificates are signed by intermediate CAs and
                are used to authenticate and encrypt communication between
                clients and servers.
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Public key</term>
        <listitem>
          <para>
            A part of a TLS certificate which acts as a digital identity for the
            server. When a client connects to the server over TLS, it requests
            the server's certificate, which contains the public key. The public
            key is freely distributable and is used for data encryption.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Private key</term>
        <listitem>
          <para>
            A counterpart to the public key in asymmetric cryptography. It is
            kept secret and known only to the owner of the key pair. When a
            client connects to a server over TLS, the server sends its digital
            certificate with a public key. The client uses it to encrypt data,
            ensuring that only the server's private key can decrypt it.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>X.509</term>
        <listitem>
          <para>
            A standard that defines the format of a public key certificates.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ECDSA</term>
        <listitem>
          <para>
            Elliptic curve digital signature algorithm (ECDSA) is a
            cryptographic algorithm used to generate digital signatures based on
            the mathematics of elliptic curves. It is widely used for digital
            signature generation and verification in various cryptographic
            protocols and applications, including TLS for secure communication
            over the internet.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>CA</term>
        <listitem>
          <para>
            A <emphasis>certificate authority</emphasis> (CA) responsible for
            issuing digital certificates that authenticate the identity of
            individuals, organizations, or servers on the internet. It can be
            either a publicly trusted CA, such as
            <link
            xlink:href="https://letsencrypt.org/">Let's
            Encrypt</link>, or a private CA in which case you sign the
            certificate yourself.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>CSR</term>
        <listitem>
          <para>
            To have a certificate signed by a CA, you need to generate a public
            key and send it to the CA for signing. This process is called a
            <emphasis>certificate signing request</emphasis> (CSR).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Openssl</term>
        <listitem>
          <para>
            An open-source software library that provides cryptographic
            functions and utilities to secure communication. It is used in
            &productnameshort; for implementing secure protocols such as TLS.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>TLS handshake</term>
        <listitem>
          <para>
            A series of messages exchanged between the client and the server to
            establish a secure connection. The process involves negotiating
            cryptographic parameters, authenticating identities, and agreeing on
            encryption keys before secure communication can begin.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PKI</term>
        <listitem>
          <para>
            The public key infrastructure (PKI) is a set of policies, processes,
            software, and hardware used to create, manage, distribute, use,
            store, and revoke digital certificates. PKI enables secure
            communication and authentication over insecure networks, such as the
            Internet.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PFS</term>
        <listitem>
          <para>
            Perfect forward secrecy (PFS) is a feature of specific key-agreement
            protocols assuring that session keys will not be compromised even if
            long-term secrets&mdash;such as the private key of the
            server&mdash;used in the session key exchange are compromised.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>DH key exchange</term>
        <listitem>
          <para>
            Diffieâ€“Hellman key exchange (DH) is a mathematical method of
            securely exchanging cryptographic keys over a public channel and was
            one of the first public-key protocols. It was named after
            cryptologists Whitfield Diffie and Martin Hellman. DH is one of the
            earliest practical examples of public key exchange based on a
            private key and a corresponding public key.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>PEM</term>
        <listitem>
          <para>
            A privacy enhanced mail (PEM) file is a commonly used file format
            for storing cryptographic objects such as certificates, private
            keys, and certificate signing requests.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Trust anchor</term>
        <listitem>
          <para>
            Trust anchor is a root certificate that is inherently trusted by a
            system or application. This root certificate is used to verify the
            signatures of other certificates in the certificate chain.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="tls-certificates-handshake">
    <title>How is secure communication established?</title>
    <para>
      The following steps illustrate the process of establishing secure
      communication between the client and the server. The process is often
      referred to as a <emphasis>TLS handshake</emphasis>.
    </para>
    <orderedlist>
      <listitem>
        <para>
          <emphasis role="bold">Client 'hello'.</emphasis> The TLS handshake is
          started by the client sending a <literal>ClientHello</literal> message
          to the server. Such message includes information about the TLS
          protocol versions and cryptographic algorithms supported by the
          client, as well as a random value used for generating session keys.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Server 'hello'.</emphasis> When the server
          receives the <literal>ClientHello</literal> message, it responds with
          a <literal>ServerHello</literal> message. Such message includes the
          TLS protocol version selected by the server, the selected
          cryptographic algorithm, and a random value. The server also sends its
          digital certificate that includes the public key.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Certificate verification.</emphasis> After the
          client receives the server's certificate, the client verifies that it
          is signed by a trusted CA and that the server's domain name matches
          the one in the certificate.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Key exchange.</emphasis> After the server's
          certificate is successfully verified, the client generates a secret
          and encrypts it with the server's public key from the certificate.
          This encrypted secret is sent to the server in a
          <literal>ClientKeyExchange</literal> message.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Session key generation.</emphasis> Both the
          client and the server use the exchanged data&mdash;client and server
          random values, and the generated secret&mdash;to generate a shared
          session key. This key will be used to encrypt and decrypt data
          transmitted during the TLS session. Both parties confirm that
          subsequent messages will be encrypted by sending a
          <literal>ChangeCipherSpec</literal> message.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Finished.</emphasis> Finally, both the client
          and the server send a <literal>Finished</literal> message to confirm
          that the TLS handshake is complete. These messages contain a hash of
          all preceding TLS handshake messages, encrypted with the shared
          session key. If the hashes match on both sides, the TLS handshake is
          successful and the secure TLS connection is established.
        </para>
      </listitem>
    </orderedlist>
    <figure>
      <title>TLS handshake procedure</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="tls-handshake.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="tls-handshake.png" width="75%"/>
        </imageobject>
        <textobject role="description"><phrase>TLS handshake procedure</phrase>
        </textobject>
      </mediaobject>
    </figure>
  </section>
  <section xml:id="tls-certificates-benefits">
    <title>Benefits of using secure communication</title>
    <para>
      Some of the key benefits of secure communication are:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">Confidentiality:</emphasis> Secure communication
          ensures that sensitive information remains confidential and cannot be
          accessed by unauthorized parties. This is particularly important for
          protecting personal data and financial information.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Integrity:</emphasis> Secure communication
          guarantees the integrity of transmitted data and ensures that it
          remains unchanged during transmission. This helps prevent unauthorized
          modification of data and maintain its accuracy and reliability.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Authentication:</emphasis> Secure communication
          allows parties to authenticate each other's identities, verifying that
          they are who they claim to be. This helps prevent impersonation and
          ensures that communication is conducted securely between trusted
          parties.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis role="bold">Compliance:</emphasis> Secure communication
          helps organizations comply with regulatory requirements and industry
          standards related to data protection and privacy. Compliance with
          regulations such as GDPR often requires the implementation of secure
          communication protocols and practices.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</topic>
