<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="concept-type-unit-file"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Types of &systemd; unit files</title>
      <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
     <para>
      You can determine the type of a unit with the <literal>Type=</literal> suffix which is appended to
      the end of the resource name. &systemd; categorizes units according to the type of resource they describe.
      </para>
    </abstract>
      </info>

  <para>Types of unit files available for &systemd;:</para>
  <variablelist>
    <varlistentry>
      <term><literal>.service</literal></term>
      <listitem>
        <para>
          A service unit file describes how to manage a service or application on the server.
          This includes how to start or stop the service,under what conditions the service starts automatically,
          and the dependency or the hierarchy information for related software.
         </para>
               </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.scope</literal></term>
      <listitem>
        <para>
         This unit file is automatically created by &systemd; from the information received from its bus interfaces.
         and is used manage sets of system processes that are created externally.
         </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.path</literal></term>
      <listitem>
        <para>
        The <literal>.path</literal> unit file defines a path for path based activation.
        By default, a <literal>.service</literal> unit file of the same base name is started
        when the path reaches a specified state.
        <literal>inotify</literal> is used to monitor the path for changes.
         </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.snapshot</literal></term>
      <listitem>
        <para>
        The <command>systemctl snapshot</command> automatically creates a <literal>.snapshot</literal> unit file.
        You can modify the current state of the system after making changes. Snapshots are used for rolling back temporary states.
        </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.timer</literal></term>
      <listitem>
        <para>
        The <literal>.timer</literal> unit file defines a timer that is managed by &systemd;.
        This is similar to a cron job for delayed or scheduled activation.
        A matching unit file is started when the timer is reached.
        </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.slice</literal></term>
      <listitem>
        <para>
        A <literal>.slice</literal> unit file is associated with Linux Control Group nodes, which allow resources
        to either assigned or restricted to any processes associated with the slice.
         The name indicates the hierarchy within the control group tree. Units are placed in slices by default depending on their type.
         </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.target</literal></term>
      <listitem>
        <para>
          A <literal>.target</literal> unit file provides synchronization for other units during a boot up,
          a change in state or brings the system to a new state. Other units specify their relation to targets
          in order to sync with the target's operations.
                </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.socket</literal></term>
      <listitem>
        <para>
          A socket unit file describes a network, an IPC socket, or a FIFO buffer that &systemd; uses for socket-based activation.
          There is an associated <literal>.service</literal> file that starts when an activity is seen on the socket that this unit defines.
                </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.device</literal></term>
      <listitem>
        <para>
        This unit file defines a device that has been designated for &systemd; management by <literal>udev</literal>
        or <literal>sysfs</literal> file system. Not all devices have the <literal>.device</literal> file.
        <literal>.device</literal> unit files are required when ordering,mounting, or accessing the devices.
         </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.swap</literal></term>
      <listitem>
        <para>
          This unit file defines the swap space on the system.
          The name of the unit file must reflect the device or file path of the space.
          </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.mount</literal></term>
      <listitem>
        <para>
         This unit file defines a mount point on the system to be managed by &systemd;.
          This file is named after the mount path, with the slashes changed to dashes.
          Entries within <filename>/etc/fstab</filename> can have units created automatically.
                </para>
              </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>.automount</literal></term>
      <listitem>
        <para>
         This unit file defines a mount point that is automatically mounted. These files must be named after
         the mount point that they refer to and must have a matching <literal>.mount</literal> unit file to defines the specifics of the mount.
         </para>
              </listitem>
    </varlistentry>
    </variablelist>
</topic>
