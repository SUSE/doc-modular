<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
<!ENTITY % entities SYSTEM "../common/generic-entities.ent">
%entities;
]>
<!-- refers to https://github.com/SUSE/doc-sle/blob/main/xml/systemd.xml [sec-boot-systemd-timer-units] -->
<topic xml:id="vm-host-ip-sysctl-settings"
       role="concept" xml:lang="en"
       xmlns="http://docbook.org/ns/docbook" version="5.2"
       xmlns:its="http://www.w3.org/2005/11/its"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>IP Sysctl settings for multihome host</title>
    <meta name="maintainer" content="shalaka.harne@suse.com" its:translate="no"/>
    <abstract>
      <para>
        System-level networking parameters in Linux under <filename>/proc/sys/net/</filename> and can be managed using the sysctl command or by modifying configuration files.</para>
    </abstract>
  </info>
  <section><title>Sysctl commands</title>
  <para>The IP-Sysctl settings offered by the Linux kernel and documented at:</para>
<para>The following <literal>net.ipv4.conf.all.arp_* sysctls</literal> are relevant for the
<literal>arp</literal> behavior on a <literal>multihome host</literal>.</para>
<itemizedlist>
<listitem><para>arp_announce = 0</para>
<para> Define different restriction levels for announcing the local
        source IP address from IP packets in ARP requests sent on
        interface:
        0 - (default) Use any local address, configured on any interface
        1 - Try to avoid local addresses that are not in the target's
        subnet for this interface. This mode is useful when target
        hosts reachable via this interface require the source IP
        address in ARP requests to be part of their logical network
        configured on the receiving interface. When we generate the
        request we will check all our subnets that include the
        target IP and will preserve the source address if it is from
        such subnet. If there is no such subnet we select source
        address according to the rules for level 2.
        2 - Always use the best local address for this target.
        In this mode we ignore the source address in the IP packet
        and try to select local address that we prefer for talks with
        the target host. Such local address is selected by looking
        for primary IP addresses on all our subnets on the outgoing
        interface that include the target IP address. If no suitable
        local address is found we select the first local address
        we have on the outgoing interface or on all other interfaces,
        with the hope we will receive reply for our request and
        even sometimes no matter the source IP address we announce.</para>
      <para>The max value from conf/{all,interface}/arp_announce is used.</para>
      <para>Increasing the restriction level gives more chance for
        receiving answer from the resolved target while decreasing
        the level announces more valid sender's information.</para>
      </listitem>
<listitem><para>aarp_ignore = 0</para>
<para>Define different modes for sending replies in response to
        received ARP requests that resolve local target IP addresses:
        0 - (default): reply for any local target IP address, configured
        on any interface
        1 - reply only if the target IP address is local address
        configured on the incoming interface
        2 - reply only if the target IP address is local address
        configured on the incoming interface and both with the
        sender's IP address are part from same subnet on this interface
        3 - do not reply for local addresses configured with scope host,
        only resolutions for global and link addresses are replied
        4-7 - reserved
        8 - do not reply for all local addresses</para>
        <para>The max value from conf/{all,interface}/arp_ignore is used
        when ARP request is received on the {interface}</para>
      </listitem>
      <listitem><para>arp_filter = 0</para>
<para>  1 - Allows you to have multiple network interfaces on the same
        subnet, and have the ARPs for each interface be answered
        based on whether or not the kernel would route a packet from
        the ARP'd IP out that interface (therefore you must use source
        based routing for this to work). In other words it allows control
        of which cards (usually 1) will respond to an arp request.

        0 - (default) The kernel can respond to arp requests with addresses
        from other interfaces. This may seem wrong but it usually makes
        sense, because it increases the chance of successful communication.
        IP addresses are owned by the complete host on Linux, not by
        particular interfaces. Only for more complex setups like load-
        balancing, does this behaviour cause problems.

        arp_filter for the interface will be enabled if at least one of
        conf/{all,interface}/arp_filter is set to TRUE,
        it will be disabled otherwise.</para>
      </listitem>
</itemizedlist>
<para>Additionally, the `net.ipv4.conf.all.rp_filter` settings permit to filter
L3 / IPv4 packets using reverse routing table lookups:</para>
<itemizedlist>
  <listitem><para>rp_filter = 0</para>
  <para> 0 - No source validation.
        1 - Strict mode as defined in RFC3704 Strict Reverse Path
            Each incoming packet is tested against the FIB and if the interface
            is not the best reverse path the packet check will fail.
            By default failed packets are discarded.
        2 - Loose mode as defined in RFC3704 Loose Reverse Path
            Each incoming packet's source address is also tested against the FIB
            and if the source address is not reachable via any interface
            the packet check will fail.

        Current recommended practice in RFC3704 is to enable strict mode
        to prevent IP spoofing from DDos attacks. If using asymmetric routing
        or other complicated routing, then loose mode is recommended.

        The max value from conf/{all,interface}/rp_filter is used
        when doing source validation on the {interface}.

        Default value is 0. Note that some distributions enable it
        in startup scripts.</para>
  </listitem>
</itemizedlist>
<para>On **SUSE systems**, the `net.ipv4.conf.all.rp_filter = 2` (RFC3704 Loose Reverse Path)
is enabled by default instead of the kernel default to disable it (`rp_filter = 0`).
Unlike the strict `rp_filter = 1` mode, the `rp_filter = 2` permits asymmetric routing,
using same subnet on multiple interfaces (considers `arp_announce=0`, `arp_ignore=0`
and `arp_filter=0` defaults).</para>
<para>The `net.ipv4.conf.all.log_martians` causes to log the packets filtered/dropped by the
`rp_filter`:</para>
<para>log_martians = 0</para>
<para>Log packets with impossible addresses to kernel log.
        log_martians for the interface will be enabled if at least one of
        conf/{all,interface}/log_martians is set to TRUE,
        it will be disabled otherwise.</para>
</section>
<section><title>Default behavior</title>
<para>Linux is using a [`weak` host model](https://en.wikipedia.org/wiki/Host_model)
_as default_, configurable via IP-Sysctl settings offered by the kernel.</para>
<para>In this model, an IP address belongs to the machine and is not restricted to be
used only on the interface it is assigned to. The machine can use/associate any
interface MAC address with any IP address, regardless of the interface.</para>
<para>vm7</para>
<para>This VM acts as router in `net7` and even it is not connected to `net8` and `net9`
it is still involved in ARP resolution process.</para>
<para>The following ping commands illustrate the default behavior:</para>
  <screen>vm7:~ # ping -c 1 192.168.7.108`: reply (regular)</screen>
  <para>Regular ping of an IP on a directly connected network (network route) and using
a lookup of the destination IP via routing table causing to select the `eth7`
interface and the preferred source from the route (`src 192.168.7.107`):</para>
<screen>192.168.7.0/24 dev eth7 proto kernel scope link src 192.168.7.107</screen>
</section>
</topic>
