<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="ansible-best-practices"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
<info>
  <title>&ansible; best practices</title>
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
           <para> To utilize the most of Ansible and Ansible playbooks , here are some best practices you can follow:
      </para>
    </abstract>
  </info>
  <itemizedlist>
    <listitem><para><emphasis role="bold">Group by roles</emphasis>:
    A system can belong to multiple groups, a powerful concept exemplified by naming groups descriptively, such as <literal>webservers</literal>
    and <literal>dbservers</literal>. This structure enables playbooks to target machines based on their role and to assign role-specific variables through the group variable system.
    </para></listitem>
<listitem><para><emphasis role="bold">Describe the tasks</emphasis>:
     It is recommended to provide a clear, descriptive <literal>name</literal> for the <literal>tasks</literal>.
     This description explains why the task is being performed and is displayed when the playbook executes.
      </para></listitem>
<listitem><para><emphasis role="bold">Use the <literal>role</literal> directive</emphasis>:
It is a good practice to use the <literal>name</literal> directive to name your plays, tasks and blocks</para></listitem>
      <listitem><para><emphasis role="bold">Simplicity</emphasis>:
         Keep it simple and use only the Ansible feature you need.</para></listitem>
               </itemizedlist>
<section xml:id="vault-best-practices">
<title>Protect sensitive data with the <command>ansible-vault</command> command-line tool</title>
<para>With Vault, you can encrypt variables and files so you can protect sensitive content such as passwords or keys rather than leaving it visible as plaintext in playbooks or roles.
Some best practices include:</para>
<itemizedlist><listitem><para><emphasis role="bold">Managing Vault passwords</emphasis>: To keep track and manage your Vault , it is best to have
a strategy. For example, for a small project or a few sensitive values , you can use a single password for encryption.
You can use multiple passwords for a large project or many sensitives values. You can distinguish between different passwords with Vault IDs.
Based on your use case, you might want a different password for each encrypted file, for each directory, or each environment.
There are two options within Ansible, to store Vault passwords; in files or a third-party tool, such as the system keyring or a secret manager.
For passwords stored in a third-party tool, you need a vault password client script to retrieve them from within Ansible.
</para></listitem>
<listitem><para><emphasis role="bold">Encrypting individual variables or files</emphasis>: The two types of encryption content in Ansible are variables and files. Encrypted content is identified with the <literal>!vault</literal> tag which tells Ansible and YAML that the content needs to be decrypted.
 The <literal>|</literal> character is used for multi-line strings.
 Ansible Vault can encrypt any structured data file used by Ansible and the encryption is done in the Vault.</para></listitem>
<listitem><para><emphasis role="bold">Using encrypted individual variables or files</emphasis>: You must provide passwords for encrypted variables or files when running a task or playbook that uses them.
 You can supply these passwords either directly at the command line or by configuring a default password source using a configuration option or an environment variable.
For a single password , use <literal>--ask-vault-pass</literal> or <literal>--vault-password-file</literal> options.
When you use multiple vaults in a single inventory, use the <literal>--vault-id option.</literal>
You can also use multiple <literal>--vault-id</literal> options to specify the Vault IDs.
</para></listitem>
</itemizedlist>
         </section>
             </topic>
