<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="docker-compose-mamagement"
 role="concept" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Management of a multi-container application</title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       The topic covers exiting multi-container applications, viewing their status and other admnistrating task.
      </para>
    </abstract>
  </info>
  <para>
    After you create your multi-container application, you can use the <command>docker-compose</command>
    command to perform management operations. The command syntax is the following:
  </para>
  <screen>&prompt.user;docker compose <replaceable>[OPTIONS]</replaceable>
  <replaceable>COMMAND</replaceable></screen>
  <para>
   Run the command from the same directory where the
    <filename>compose.yml</filename> file of the multi-container application you want to manage is located.
    Alternatively, provide a path to the <filename>compose.yml</filename> file using the
    <option>-f, --file</option> option. For example, to exit and remove the multi-container application:
  </para>
  <screen>&prompt.user;docker compose -f ./test/compose.yml down</screen>
  <para>
    Other useful commands:
  </para>
  <variablelist>
    <varlistentry>
      <term>images</term>
      <listitem>
        <para>
To list all images used by the containers in the multi-container application.
        </para>
        <screen>&prompt.user;docker compose images</screen>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>pause</term>
      <listitem>
        <para>
          To pause all containers.
        </para>
        <screen>&prompt.user;docker compose pause <replaceable>[SERVICE]</replaceable></screen>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>ps</term>
      <listitem>
        <para>
          To list containers in the multi-container application.
        </para>
        <screen>&prompt.user;docker compose ps</screen>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>rm</term>
      <listitem>
        <para>To remove stopped containers.</para>
        <screen>&prompt.user;docker compose rm</screen>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>start/stop</term>
      <listitem>
        <para>
          To start or stop containers.
        </para>
        <screen>&prompt.user;docker compose stop <replaceable>[SERVICE]</replaceable></screen>
      </listitem>
    </varlistentry>
  </variablelist>
<para>
For a complete list of options and commands, run:
</para>
<screen>&prompt.user;docker-compose --help</screen>  
</topic>
