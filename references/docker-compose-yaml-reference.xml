<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="reference-example"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
   <title>Creating  <filename>compose.yml</filename></title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       Introductory text
      </para>
    </abstract>
  </info>
  <para>
    To create the application, you need to create a <filename>compose.yml</filename> file that defines your application. The
     file should include the following parts.
  </para>   
  <variablelist>
    <varlistentry>
      <term><literal>service</literal></term>
      <listitem>
        <para>
          A service is a computing component of the application. It is a run of a container image
          with a particular configuration. For details regarding the definition, refer to <xref linkend="compose-cretaing-application-yaml-file-services"/>
        </para>
        
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><literal>networks</literal></term>
      <listitem>
         <para>
          You can use the <literal>network</literal> statement to define custom networks and assign
          particular services to custom networks. For details, refer to
          <xref linkend="compose-cretaing-application-yaml-file-networks"/>
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Volume</term>
      <listitem>
        <para>
          A directory where services store and shares data.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Environment variables</term>
      <listitem>
        <para>
          You may also need to use a list of environment variables that will be passed to your services.
        </para>        
      </listitem>
    </varlistentry>
  </variablelist>
  <section xml:id="compose-cretaing-application-yaml-file-services">
    <title>Services definition</title>
    <para>
      When defining services you either need to specify a container image to use by adding <literal>image</literal>, or use the
      <literal>build</literal> statement and provide a container file to build the service from
      source files.
    </para>
    <note>
      <title>Images can be pulled automatically</title>
        <para>
  &podman; checks if the image name declared in the <filename>compose.yml</filename> file is located
  locally. If it is not, &podman; pulls the image from configured registries.
        </para>
        </note>

  </section>
  <section xml:id="compose-cretaing-application-yaml-file-networks">
    <title>Networks definition</title>
    <para>
      By default, &compose; creates a default network and each
      container in the application stack is included in the network. The default network does
      not have to be declared in the <filename>compose.yml</filename> file as it is created
      automatically by &compose;. 
            </para>
  </section>
  <section xml:id="compose-cretaing-application-yaml-file-example">
    <title>Example of <filename>compose.yml</filename></title>
  <para>
    The following example of <filename>compose.yml</filename> defines an application stack that uses the Prometheus monitoring system and the
    Grafana analytics system. 
  </para>
  <screen>
  services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
volumes:
  prom_data:
  </screen>
  <para>
    The project structure in this example must look as follows:
  </para>
  <screen>
.
├── compose.yaml
├── grafana
│   └── datasource.yml
├── prometheus
│   └── prometheus.yml
└── README.md
  </screen>
  </section>
</topic>
