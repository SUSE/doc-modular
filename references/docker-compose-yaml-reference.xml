<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="docker-compose-yaml-reference"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
   <title>Creating  <filename>compose.yml</filename></title><!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       Introductory text
      </para>
    </abstract>
  </info>
  <para>
    To create the application, you need to create a <filename>compose.yml</filename> file that defines your application. The
     file can include the following parts.
  </para>   
  <variablelist>
    <varlistentry>
      <term>service</term>
      <listitem>
        <para>
          A service is a computing component of the application. It is a run of a container image
          with a particular configuration. For details regarding the definition, refer to <xref linkend="compose-cretaing-application-yaml-file-services"/>.
        </para>        
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>networks</term>
      <listitem>
         <para>
          You can use the <literal>network</literal> statement to define custom networks and assign
          particular services to custom networks. For details, refer to
          <xref linkend="compose-cretaing-application-yaml-file-networks"/>.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>volumes</term>
      <listitem>
        <para>
          A directory managed by the container engine where services store and share data.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Environment variables</term>
      <listitem>
        <para>
          You may also need to use a list of environment variables that will be passed to your
          services. For details, refer to the <link
          xlink:href="https://docs.docker.com/compose/environment-variables/">environment variables
          reference</link>.
        </para>        
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>configs</term>
      <listitem>
        <para>
          All configuration files required by the services must be declared in the
          <literal>configs</literal> section. For details, refer to the <link
          xlink:href="https://docs.docker.com/compose/compose-file/08-configs/"><literal>configs</literal>
          definition</link>.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
  <section xml:id="compose-cretaing-application-yaml-file-services">
    <title>Services definition</title>
    <para>
      When defining services, you either need to specify a container image to use, or provide source
     files to build the service from them.
    </para>
    <para>
      To create the service container from an image, use the <literal>image</literal> statement:
    </para>
    <screen>
      services:
       db:
         image: database
    </screen>
    <para>
      &podman; checks if the image name declared in the <filename>compose.yml</filename> file is located
      locally. If it is not, &podman; pulls the image from configured registries.
    </para>
    <para>
      To build a service from source files, provide the source files and create a container file, both in the same directory.
      In the <filename>compose.yml</filename>file then use the <literal>build</literal> statement:
    </para>
    <screen>
      services:
        db: 
          build: <replaceable>PATH_TO_SOURCE_FILES</replaceable>
    </screen>
    <para>
      If a particular service must be started after another, you can use the
      <literal>depends_on</literal> statement:
    </para>
    <screen>
      services:
       db:
         image: database
         depends_on:
          system:
            condition: <replaceable>SERVICE_CONDITION</replaceable>
    </screen>
    <para>
      The  <replaceable>SERVICE_CONDITION</replaceable> can be one of the following:
      <literal>service_started</literal>, <literal>service_healthy</literal> or <literal>service_completed_successfully</literal>.
    </para>
    <para>
      For more information regarding the <literal>services</literal> definition, refer to the <link
      xlink:href="https://docs.docker.com/compose/compose-file/05-services/"><literal>services</literal> specification</link>.
    </para>
    

  </section>
  <section xml:id="compose-cretaing-application-yaml-file-networks">
    <title>Networks definition</title>
    <para>
      By default, &compose; creates a default network, and each
      container in the application stack is included in the network. The default network does
      not have to be declared in the <filename>compose.yml</filename> file as &compose;
      creates it automatically. 
            </para>
            <para>
              You can also define custom networks and assign particular services to them. For
              example, to create two networks, <literal>network1</literal> and
              <literal>network2</literal>, add the following snippet:
            </para>
            <screen>
networks:
  network1:
    # Use a custom driver
    driver: custom-driver-1
  network2:
    # Use a custom driver and name the network
    driver: custom-driver-2
    name: custom_network
            </screen>
            <para>
              You can also use an existing network. In this case, mark the network as external:
            </para>
            <screen>
              networks:
  network1:
    name: network1
    external: true
            </screen>
            <para>
              For a complete <literal>networks</literal> specification, refer to the <link
              xlink:href="https://docs.docker.com/compose/compose-file/06-networks/"><literal>networks</literal>
              specification</link>.
            </para>
  </section>
  <section xml:id="compose-cretaing-application-yaml-file-example">
    <title>Example of <filename>compose.yml</filename></title>
  <para>
    The following example of <filename>compose.yml</filename> defines an application stack that uses the Prometheus monitoring system and the
    Grafana analytics system. 
  </para>
  <screen>
  services:
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources
volumes:
  prom_data:
  </screen>
  <para>
    The project structure in this example must look as follows:
  </para>
  <screen>
.
├── compose.yaml
├── grafana
│   └── datasource.yml
├── prometheus
│   └── prometheus.yml
└── README.md
  </screen>
  </section>
</topic>
