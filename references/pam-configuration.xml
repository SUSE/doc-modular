<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="pam-configuration-files"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Structure of PAM configuration</title>
    <!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="amrita.sakthivel@suse.com" its:translate="no"/>
    <abstract>
      <!-- can be changed via merge in the assembly -->
      <para>
        The topic describes how the PAM configuration files are structured.
      </para>
    </abstract>
  </info>
  <para>
    PAM on &productnameshort; comes with a so-called directory based
    configuration. The set of configuration files is stored in
    <filename>/etc/pam.d</filename>. Every service (or program) that relies on
    the PAM mechanism has its own configuration file in this directory. For
    example, the service for <systemitem class="daemon">sshd</systemitem> can
    be found in the <filename>/etc/pam.d/sshd</filename> file.
  </para>
  <note>
    <title>File based configuration (<filename>/etc/pam.conf</filename>) not used on &productnameshort;</title>
    <para>
      The configuration of each service can be also stored in
      <filename>/etc/pam.conf</filename>. However, for maintenance and
      usability reasons, this configuration scheme is not used in
      &productname;.
    </para>
  </note>
  <para>
    The files under <filename>/etc/pam.d/</filename> define the PAM modules
    used for authentication. Each file consists of lines, which define a
    service, and each line consists of a maximum of four components:
  </para>
<screen><replaceable>TYPE</replaceable>  <replaceable>CONTROL</replaceable>
 <replaceable>MODULE_PATH</replaceable>  <replaceable>MODULE_ARGS</replaceable></screen>
  <para>
    The components have the following meaning:
  </para>
  <variablelist>
    <varlistentry>
      <term><replaceable>TYPE</replaceable></term>
      <listitem>
        <para>
          Declares the type of the service. PAM modules are processed as
          stacks. Different types of modules have different purposes. For
          example, one module checks the password, another verifies the
          location from which the system is accessed, and yet another reads
          user-specific settings. PAM knows about four different types of
          modules:
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>auth</literal></term>
            <listitem>
              <para>
                Check the user's authenticity, traditionally by querying a
                password. However, this can also be achieved with a chip card
                or through biometrics (for example, fingerprints or iris scan).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>account</literal></term>
            <listitem>
              <para>
                Modules of this type check if the user has general permission
                to use the requested service. As an example, such a check
                should be performed to ensure that no one can log in with the
                user name of an expired account.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>password</literal></term>
            <listitem>
              <para>
                The purpose of this type of module is to enable the change of
                an authentication token. Usually this is a password.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>session</literal></term>
            <listitem>
              <para>
                Modules of this type are responsible for managing and
                configuring user sessions. They are started before and after
                authentication to log login attempts and configure the user's
                specific environment.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><replaceable>CONTROL</replaceable></term>
      <listitem>
        <para>
          Indicates the behavior of a PAM module. Each module can have the
          following control flags:
        </para>
        <variablelist>
          <varlistentry>
            <term><literal>required</literal></term>
            <listitem>
              <para>
                A module with this flag must be successfully processed before
                the authentication may proceed. After the failure of a module
                with the <literal>required</literal> flag, all other modules
                with the same flag are processed before the user receives a
                message about the failure of the authentication attempt.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>requisite</literal></term>
            <listitem>
              <para>
                Modules having this flag must also be processed successfully,
                in much the same way as a module with the
                <literal>required</literal> flag. However, in case of failure a
                module with this flag gives immediate feedback to the user and
                no further modules are processed. In case of success, other
                modules are subsequently processed, like any modules with the
                <literal>required</literal> flag. The
                <literal>requisite</literal> flag can be used as a basic filter
                checking for the existence of certain conditions that are
                essential for a correct authentication.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>sufficient</literal></term>
            <listitem>
              <para>
                After a module with this flag has been successfully processed,
                the requesting application receives an immediate message about
                the success and no further modules are processed, provided
                there was no preceding failure of a module with the
                <literal>required</literal> flag. The failure of a module with
                the <literal>sufficient</literal> flag has no direct
                consequences, in the sense that any subsequent modules are
                processed in their respective order.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>optional</literal></term>
            <listitem>
              <para>
                The failure or success of a module with this flag does not have
                any direct consequences. This can be useful for modules that
                are only intended to display a message (for example, to tell
                the user that mail has arrived) without taking any further
                action.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><literal>include</literal></term>
            <listitem>
              <para>
                If this flag is given, the file specified as argument is
                inserted at this place.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><replaceable>MODULE_PATH</replaceable></term>
      <listitem>
        <para>
          Contains a full file name of a PAM module. It does not need to be
          specified explicitly, if the module is located in the default
          directory <filename>/lib/security</filename> (for all 64-bit
          platforms supported by &productname;, the directory is
          <filename>/lib64/security</filename>).
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><replaceable>MODULE_ARGS</replaceable></term>
      <listitem>
        <para>
          Contains a space-separated list of options to influence the behavior
          of a PAM module, such as <option>debug</option> (enables debugging)
          or <option>nullok</option> (allows the use of empty passwords).
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>
    In addition, there are global configuration files for PAM modules under
    <filename>/etc/security</filename>, which define the exact behavior of
    these modules (examples include <filename>pam_env.conf</filename> and
    <filename>time.conf</filename>). Every application that uses a PAM module
    calls a set of PAM functions, which then process the information in the
    configuration files and return the result to the requesting application.
  </para>
  <para>
    To simplify the creation and maintenance of PAM modules, common default
    configuration files for the types <literal>auth</literal>,
    <literal>account</literal>, <literal>password</literal>, and
    <literal>session</literal> modules have been introduced. These are
    retrieved from every application's PAM configuration. Updates to the global
    PAM configuration modules in <filename>common-*</filename> are thus
    propagated across all PAM configuration files without requiring the
    administrator to update every single PAM configuration file.
  </para>
  <para>
    The global PAM configuration files are maintained using the
    <command>pam-config</command> tool. This tool automatically adds new
    modules to the configuration, changes the configuration of existing ones or
    deletes modules (or options) from the configurations. Manual intervention
    in maintaining PAM configurations is minimized or no longer required.
  </para>
  <!-- JH: Not sure whether this will be available in ALP.
    <note os="sles;sled;osuse">
    <title>64-bit and 32-bit mixed installations</title>
    <para>
    When using a 64-bit operating system, it is possible to also include a
    runtime environment for 32-bit applications. In this case, make sure
    that you also install the 32-bit version of the PAM modules.
    </para>
    </note>
    -->
</topic>
