<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: https://github.com/SUSE/doc-sle/blob/main/xml/adm_sudo.xml -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="sudo-commands"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Common &sudo; commands</title>
    <!--add author's email address-->
    <meta name="maintainer" content="souvik.sarkar@suse.com"/>
    <abstract>
      <para>
        By adding &sudo; before any command, you can run commands with elevated
        permissions. You can also run commands as another user and use their
        environment variables. Using &sudo; helps you accomplish system
        administration tasks without logging in as root.
      </para>
    </abstract>
  </info>
  <section xml:id="reference-sudo-common-commands">
    <title>Examples of &sudo; commands</title>
    <para>
      This section provides examples of common commands that often require
      administrative privileges.
    </para>
    <variablelist>
      <varlistentry>
        <term>Run the last command with &sudo;</term>
        <listitem>
          <para>
            To repeat the last command as an administrator, run <command>sudo
            !!</command> and enter the password. For example, an user without
            administrative privileges cannot create a directory under the
            <filename>/etc/</filename> directory. To create it, run
            <command>sudo !!</command>.
          </para>
<screen>
&prompt.user;<command>mkdir /etc/test/</command>
mkdir: cannot create directory ‘/etc/test/’: Permission denied

&prompt.sudo;<command>!!</command>
sudo mkdir /etc/test/
[sudo] password for root:

&prompt.user;<command>ls -alrt /etc  | grep test</command>
drwxr-xr-x 1 root root        0 Apr 20 12:48 test
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage packages using <command>sudo</command> and <command>zypper</command></term>
        <listitem>
          <para>
            To run package management commands as an administrator, add
            <command>sudo</command> before the command in the following format:
          </para>
<screen>
&prompt.sudo;<command>zypper [--GLOBAL-OPTIONS] &lt;COMMAND&gt; [--COMMAND-OPTIONS] [ARGUMENTS]</command>
</screen>
          <para>
            For example, to install the Docker CE containerization platform
            from its official package repository, run the following commands
            with <command>sudo</command>:
          </para>
<screen>
&prompt.sudo;<command>zypper addrepo https://download.docker.com/linux/suse/docker-ce</command>

&prompt.sudo;<command>zypper refresh</command>

&prompt.sudo;<command>zypper search docker-ce</command>

&prompt.sudo;<command>zypper install docker-ce</command>

&prompt.sudo;<command>systemctl enable docker</command>

&prompt.sudo;<command>systemctl start docker</command>
</screen>
          <para>
            You do not need to add <command>sudo</command> before
            <command>zypper</command> commands that do not modify the system,
            or provides privileged access to information. For example, you can
            list the repositories for software packages without using
            <command>sudo</command>:
          </para>
<screen>
&prompt.user;<command>zypper lr</command>
Repository priorities are without effect. All enabled repositories share the same priority.

#  | Alias                                 | Name                                                                                        | Enabled | GPG Check | Refresh
---+---------------------------------------+---------------------------------------------------------------------------------------------+---------+-----------+--------
 1 | repo-oss                              | Main Repository                                                                             | Yes     | (r ) Yes  | Yes
 2 | repo-sle-debug-update                 | Update repository with debuginfo for updates from SUSE Linux Enterprise 15                  | No      | ----      | ----
 3 | repo-sle-update                       | Update repository with updates from SUSE Linux Enterprise 15                                | Yes     | (r ) Yes  | Yes
 4 | repo-source                           | Source Repository                                                                           | No      | ----      | ----
 5 | repo-update                           | Main Update Repository                                                                      | Yes     | (r ) Yes  | Yes
 6 | repo-update-non-oss                   | Update Repository (Non-Oss)                                                                 | Yes     | (r ) Yes  | Yes
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage system services using <command>sudo</command> and <command>systemctl</command></term>
        <listitem>
          <para>
            In systems that use <command>systemd</command> for managing
            services, you can use the <command>systemctl</command> with
            <command>sudo</command>. For example, to restart the Apache web
            server service, run the following command:
          </para>
<screen>
&prompt.sudo;<command>systemctl restart apache2</command>
</screen>
          <para>
            You do not need to add <command>sudo</command> before
            <command>systemctl</command> commands that do not modify the
            system, or provides privileged access to information. For example,
            you can display the status of Network Manager without using
            <command>sudo</command>:
          </para>
<screen>
&prompt.user;<command>systemctl status NetworkManager</command>
● NetworkManager.service - Network Manager
     Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled; vendor preset: disabled)
    Drop-In: /usr/lib/systemd/system/NetworkManager.service.d
             └─NetworkManager-ovs.conf
     Active: active (running) since DAY YYYY-MM-DD HH:MM:SS TIMEZONE; 1h 21min ago
       Docs: man:NetworkManager(8)
   Main PID: 1548 (NetworkManager)
      Tasks: 8 (limit: 4915)
     CGroup: /system.slice/NetworkManager.service
             ├─ 1548 /usr/sbin/NetworkManager --no-daemon
             ├─ 4304 /sbin/dhclient -d -q -sf /usr/lib/nm-dhcp-helper -pf /run/NetworkManager/dhclient-wlan0.pid -lf /var/lib/NetworkManager/dhclient-2acc1c75-018d-4909-b71
             ├─ 6379 /usr/lib/nm-openconnect-service --bus-name org.freedesktop.NetworkManager.openconnect.Connection_5
             └─ 6423 /usr/sbin/openconnect --servercert sha256:2ec361fcd88ce28ffb2b2f22a3431df49be0210a6f538893707f1041f05e42b3 --syslog --cookie-on-stdin --script /usr/lib
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Modify a user account using <command>sudo</command> and <command>usermod</command></term>
        <listitem>
          <para>
            To run the <command>usermod</command> command for modifying user
            accounts, use the following format:
          </para>
<screen>
&prompt.sudo;<command>usermod [OPTION] USERNAME</command>
</screen>
          <para>
            For example, to set the expiry date in the
            <literal>YYYY-MM-DD</literal> format for <filename>tux</filename>
            and then test the modifications, run the following commands:
          </para>
<screen>
&prompt.sudo;<command>usermod -e 2023-04-30 tux</command>
[sudo] password for root:

&prompt.sudo;<command>cat /etc/shadow | grep tux</command>
tux:$6$sE1fb6K8kdQEs4/V$fX6Fe60oTVGX0gZh7jHYQaeDygNemD0aFYTf4VGb8A4SppMWiX7SufrA1MkjhCm.uGmAiRgj3E0e3jCujhTpI0:19475:0:99999:7::19477:
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Modify file and directory ownership using <command>sudo</command> and <command>chown</command></term>
        <listitem>
          <para>
            To change file and directory ownerships from the current owner to a
            new owner, use the following format:
          </para>
<screen>
&prompt.sudo;<command>chown [OPTION] [OWNER:[GROUP]] FILE</command>
</screen>
          <para>
            For example, to give <filename>tux</filename> the ownership of
            files and subdirectories in the
            <filename>/home/test/tux-files</filename> directory, run the
            following command:
          </para>
<screen>
&prompt.sudo;<command>chown tux /home/test/tux-files/ --recursive</command>
</screen>
          <para>
            You can test the change in ownership by running the following
            command:
          </para>
<screen>
&prompt.user;<command>ls -alrt /home/test/tux-files/ --recursive</command>
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Run a command as another user using <command>sudo -s</command></term>
        <listitem>
          <para>
            Instead of using the <command>su</command> command for switching to
            a different user and then running commands, you can use the
            <command>sudo -s</command> command. A shell run by the
            <command>sudo -s</command> command inherits the environment of the
            current user. The <command>sudo -s</command> command also offers a
            few privilege control measures.
          </para>
          <para>
            To run a command as a different user, use the following format:
          </para>
<screen>
&prompt.sudo;<command>-s -u USERNAME COMMAND</command>
</screen>
          <para>
            By default, the command runs from the directory of the previous
            user, because the target user inherits the environment of the
            previous user.
          </para>
          <para>
            For example, to recursively list the files and subdirectories of
            the <filename>/home/test/tux-files/</filename> directory as the
            target user <filename>tux</filename>, run the following command:
          </para>
<screen>
&prompt.sudo;<command>-s -u tux ls -alrt /home/test/tux-files/ --recursive</command>
</screen>
          <para>
            When you use the <command>sudo -s</command> approach for running a
            command as a different user, the command is logged in your history.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Run a command as another user with a clean environment using <command>sudo -i</command></term>
        <listitem>
          <para>
            When using the <command>sudo -s</command> command, the target user
            inherits the environment of the previous user. You can prevent it
            by using the <command>sudo -i</command> command, where the target
            user gets a clean environment and starts at its own
            <envar>$HOME</envar> directory.
          </para>
          <para>
            To run a command as a different user with a clean environment, use
            the following format:
          </para>
<screen>
&prompt.sudo;<command>-i -u USERNAME COMMAND</command>
</screen>
          <para>
            The <command>sudo -i</command> command runs the shell as an
            interactive login shell of the target user. As a result, shell
            startup scripts such as <filename>.profile</filename> and
    <filename>.bash_profile</filename> files.
  </para>
  <para>
    For example, to list the files and subdirectories of the
    <filename>/home/test/tux-files/</filename> directory as
    <filename>tux</filename>, run the following command:
  </para>
<screen>
&prompt.sudo;<command>-i -u tux ls -alrt /home/test/tux-files/</command>
</screen>
  <para>
    When you use the <command>sudo -i</command> approach for running a
    command as a different user, the command is logged in your history.
  </para>
</listitem>
</varlistentry>
<varlistentry>
<term>Display the current &sudo; settings using <command>sudo -V</command></term>
<listitem>
  <para>
    As a <literal>root</literal> user, you can display the current &sudo; settings for the
    entire system using the following commands:
  </para>
<screen>
&prompt.user;<command>su -</command>

&prompt.sudo;<command>-V</command>
</screen>
  <para>
    The output of the <command>sudo -V</command> command is lengthy, but contains
    information that are useful for system administrators. For example, the sample output
    below contains information about the password timeouts and retry limits for &sudo; passwords.
  </para>
<screen>
<command>
Sudo version 1.9.9
Configure options: --host=x86_64-suse-linux-gnu --build=x86_64-suse-linux-gnu --program-prefix= --disable-dependency-tracking --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --includedir=/usr/include --libdir=/usr/lib64 --libexecdir=/usr/lib --localstatedir=/var --sharedstatedir=/var/lib --mandir=/usr/share/man --infodir=/usr/share/info --disable-dependency-tracking --libexecdir=/usr/lib/sudo --docdir=/usr/share/doc/packages/sudo --with-noexec=/usr/lib/sudo/sudo_noexec.so --enable-tmpfiles.d=/usr/lib/tmpfiles.d --with-pam --with-pam-login --with-ldap --with-selinux --with-linux-audit --with-logfac=auth --with-all-insults --with-ignore-dot --with-tty-tickets --enable-shell-sets-home --enable-warnings --enable-python --enable-openssl --with-sendmail=/usr/sbin/sendmail --with-sudoers-mode=0440 --with-env-editor --without-secure-path --with-passprompt=[sudo] password for %p:  --with-rundir=/var/lib/sudo --with-sssd
Sudoers policy plugin version 1.9.9
Sudoers file grammar version 48

Sudoers path: /etc/sudoers
nsswitch path: /etc/nsswitch.conf
ldap.conf path: /etc/ldap.conf
ldap.secret path: /etc/ldap.secret
Authentication methods: 'pam'
Syslog facility if syslog is being used for logging: auth
Syslog priority to use when user authenticates successfully: notice
Syslog priority to use when user authenticates unsuccessfully: alert
Ignore '.' in $PATH
Send mail if the user is not in sudoers
Lecture user the first time they run sudo
Require users to authenticate by default
Root may run sudo
Set $HOME to the target user when starting a shell with -s
Always set $HOME to the target user's home directory
Allow some information gathering to give useful error messages
Visudo will honor the EDITOR environment variable
Prompt for the target user's password, not the users's
Set the LOGNAME and USER environment variables
Length at which to wrap log file lines (0 for no wrap): 80
Authentication timestamp timeout: 5.0 minutes
Password prompt timeout: 5.0 minutes
Number of tries to enter a password: 3
Umask to use or 0777 to use user's: 022
Path to mail program: /usr/sbin/sendmail
Flags for mail program: -t
Address to send mail to: root
Subject line for mail messages: *** SECURITY information for %h ***
Incorrect password message: Sorry, try again.
Path to lecture status dir: /var/lib/sudo/lectured
Path to authentication timestamp dir: /var/lib/sudo/ts
Default password prompt: [sudo] password for %p:
Default user to run commands as: root
Value to override user's $PATH with: /usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin:/usr/local/sbin
Path to the editor for use by visudo: /usr/bin/vi
When to require a password for 'list' pseudocommand: any
When to require a password for 'verify' pseudocommand: all
File descriptors >= 3 will be closed before executing a command
Reset the environment to a default set of variables
Environment variables to check for safety:
TZ
TERM
LINGUAS
LC_*
LANGUAGE
LANG
COLORTERM
Environment variables to remove:
*=()*
RUBYOPT
RUBYLIB
PYTHONUSERBASE
PYTHONINSPECT
PYTHONPATH
PYTHONHOME
TMPPREFIX
ZDOTDIR
READNULLCMD
NULLCMD
FPATH
PERL5DB
PERL5OPT
PERL5LIB
PERLLIB
PERLIO_DEBUG
JAVA_TOOL_OPTIONS
SHELLOPTS
BASHOPTS
GLOBIGNORE
PS4
BASH_ENV
ENV
TERMCAP
TERMPATH
TERMINFO_DIRS
TERMINFO
_RLD*
LD_*
PATH_LOCALE
NLSPATH
HOSTALIASES
RES_OPTIONS
LOCALDOMAIN
CDPATH
IFS
Environment variables to preserve:
XDG_SESSION_COOKIE
LINGUAS
LANGUAGE
LC_ALL
LC_TIME
LC_TELEPHONE
LC_PAPER
LC_NUMERIC
LC_NAME
LC_MONETARY
LC_MESSAGES
LC_MEASUREMENT
LC_IDENTIFICATION
LC_COLLATE
LC_CTYPE
LC_ADDRESS
LANG
Locale to use while parsing sudoers: C
Compress I/O logs using zlib
Directory in which to store input/output logs: /var/log/sudo-io
File in which to store the input/output log: %{seq}
Add an entry to the utmp/utmpx file when allocating a pty
PAM service name to use: sudo
PAM service name to use for login shells: sudo-i
Attempt to establish PAM credentials for the target user
Create a new PAM session for the command to run in
Perform PAM account validation management
Enable sudoers netgroup support
Check parent directories for writability when editing files with sudoedit
Allow commands to be run even if sudo cannot write to the audit log
Allow commands to be run even if sudo cannot write to the log file
Log entries larger than this value will be split into multiple syslog messages: 960
File mode to use for the I/O log files: 0600
Execute commands by file descriptor instead of by path: digest_only
Type of authentication timestamp record: tty
Ignore case when matching user names
Ignore case when matching group names
Log when a command is allowed by sudoers
Log when a command is denied by sudoers
Sudo log server timeout in seconds: 30
Enable SO_KEEPALIVE socket option on the socket connected to the logserver
Verify that the log server's certificate is valid
Set the pam remote user to the user running sudo
The format of logs to produce: sudo
Enable SELinux RBAC support
The largest size core dump file that may be created (in bytes): 0,0

Local IP address and netmask pairs:
192.168.122.86/255.255.255.0
fe80::5054:ff:fe9a:fae8/ffff:ffff:ffff:ffff::

Sudoers I/O plugin version 1.9.9
Sudoers audit plugin version 1.9.9
</command>
</screen>
        </listitem>
      </varlistentry>
    </variablelist>
    <!--table>
      <title>A table title</title>
      <tgroup cols="2">
      <colspec colwidth="50*"/>
      <colspec colwidth="50*"/>
      <tbody>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      </tbody>
      </tgroup>
      </table-->
  </section>
</topic>
