<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: https://github.com/SUSE/doc-sle/blob/main/xml/adm_sudo.xml -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="sudo-commands"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <title>Common &sudo; commands</title>
  <info>
    <meta name="maintainer" content="Julia Faltenbacher"/>
  </info>
  <section xml:id="reference-sudo-common-commands">
    <title>Common &sudo; commands</title>
    <para>
      By adding &sudo; before any command, you can run commands with elevated
      permissions. You can also run commands as another user and use their
      environment variables. Using &sudo; helps you accomplish system
      administration tasks without logging in as root. This section provides
      examples of common commands that often require administrative privileges.
    </para>
    <variablelist>
      <title>Examples of commands with &sudo;</title>
      <varlistentry>
        <term>Run the last command with &sudo;</term>
        <listitem>
          <para>
            To repeat the last command as an administrator, run <command>sudo
            !!</command> and enter the password. For example, an user without
            administrative privileges cannot create a directory under the
            <command>/etc/</command> directory. To create it, run <command>sudo
            !!</command>.
          </para>
<screen>
  $ mkdir /etc/test/
  mkdir: cannot create directory ‘/etc/test/’: Permission denied

  $ sudo !!
  sudo mkdir /etc/test/
  [sudo] password for root:

  $ ls -alrt /etc | grep test
  drwxr-xr-x 1 root root        0 Apr 20 12:48 test
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage packages using <command>sudo</command> and <command>zypper</command></term>
        <listitem>
          <para>
            To run package management commands as an administrator, add
            <command>sudo</command> before the command. If you are using
            <command>zypper</command> as your package manager, use the
            following format:
          </para>
<screen>
  $ sudo zypper [--GLOBAL-OPTIONS] &lt;COMMAND&gt; [--COMMAND-OPTIONS] [ARGUMENTS]
</screen>
          <para>
            For example, to install the popular code editor VS Code from its
            official package repository, run the following commands with
            <command>sudo</command>:
          </para>
<screen>
  $ sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc

  $ sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode

  $ sudo zypper refresh

  $ sudo zypper install code
</screen>
          <para>
            You don't need to add <command>sudo</command> before
            <command>zypper</command> commands that do not modify the system,
            or provides privileged access to information. For example, you can
            list the repositories for software packages without using
            <command>sudo</command>:
          </para>
<screen>
  $ zypper lr
Repository priorities are without effect. All enabled repositories share the same priority.

#  | Alias                                 | Name                                                                                        | Enabled | GPG Check | Refresh
---+---------------------------------------+---------------------------------------------------------------------------------------------+---------+-----------+--------
 1 | repo-oss                              | Main Repository                                                                             | Yes     | (r ) Yes  | Yes
 2 | repo-sle-debug-update                 | Update repository with debuginfo for updates from SUSE Linux Enterprise 15                  | No      | ----      | ----
 3 | repo-sle-update                       | Update repository with updates from SUSE Linux Enterprise 15                                | Yes     | (r ) Yes  | Yes
 4 | repo-source                           | Source Repository                                                                           | No      | ----      | ----
 5 | repo-update                           | Main Update Repository                                                                      | Yes     | (r ) Yes  | Yes
 6 | repo-update-non-oss                   | Update Repository (Non-Oss)                                                                 | Yes     | (r ) Yes  | Yes
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage system services using <command>sudo</command> and <command>systemctl</command></term>
        <listitem>
          <para>
            In systems that use <command>systemd</command> for managing
            services, you can use the <command>systemctl</command> with
            <command>sudo</command>. For example, to restart the Apache web
            server service, run the following command:
          </para>
<screen>
  $ sudo systemctl restart apache2
</screen>
          <para>
            You do not need to add <command>sudo</command> before
            <command>systemctl</command> commands that do not modify the
            system, or provides privileged access to information. For example,
            you can display the status of Network Manager without using
            <command>sudo</command>:
          </para>
<screen>
  $ systemctl status NetworkManager
● NetworkManager.service - Network Manager
     Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled; vendor preset: disabled)
    Drop-In: /usr/lib/systemd/system/NetworkManager.service.d
             └─NetworkManager-ovs.conf
     Active: active (running) since DAY YYYY-MM-DD HH:MM:SS TIMEZONE; 1h 21min ago
       Docs: man:NetworkManager(8)
   Main PID: 1548 (NetworkManager)
      Tasks: 8 (limit: 4915)
     CGroup: /system.slice/NetworkManager.service
             ├─ 1548 /usr/sbin/NetworkManager --no-daemon
             ├─ 4304 /sbin/dhclient -d -q -sf /usr/lib/nm-dhcp-helper -pf /run/NetworkManager/dhclient-wlan0.pid -lf /var/lib/NetworkManager/dhclient-2acc1c75-018d-4909-b71
             ├─ 6379 /usr/lib/nm-openconnect-service --bus-name org.freedesktop.NetworkManager.openconnect.Connection_5
             └─ 6423 /usr/sbin/openconnect --servercert sha256:2ec361fcd88ce28ffb2b2f22a3431df49be0210a6f538893707f1041f05e42b3 --syslog --cookie-on-stdin --script /usr/lib
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Modify a user account using <command>sudo</command> and <command>usermod</command></term>
        <listitem>
          <para>
            To run the <command>usermod</command> command for modifying user
            accounts, use the following format:
          </para>
<screen>
  $ sudo usermod [OPTION] USERNAME
</screen>
          <para>
            For example, to set the expiry date in the
            <command>YYYY-MM-DD</command> format for <command>user-1</command>
            and then test the modifications, run the following commands:
          </para>
<screen>
  $ sudo usermod -e 2023-04-30 user-1
  [sudo] password for root:

  $ sudo cat /etc/shadow | grep user-1
  user-1:$6$sE1fb6K8kdQEs4/V$fX6Fe60oTVGX0gZh7jHYQaeDygNemD0aFYTf4VGb8A4SppMWiX7SufrA1MkjhCm.uGmAiRgj3E0e3jCujhTpI0:19475:0:99999:7::19477:

</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Modify file and directory ownership using <command>sudo</command> and <command>chown</command></term>
        <listitem>
          <para>
            To change file and directory ownerships from the current owner to a
            new owner, use the following format:
          </para>
<screen>
  $ sudo chown [OPTION] [OWNER:[GROUP]] FILE
</screen>
          <para>
            For example, to change the ownership of files and subdirectories in
            the <command>/home/test/user-1-files</command> directory from
            <command>test</command> to <command>user-1</command>, run the
            following command:
          </para>
<screen>
  $ sudo chown user-1 /home/test/user-1-files/ --recursive
</screen>
          <para>
            You can test the change in ownership by running the following
            command:
          </para>
<screen>
  $ ls -alrt /home/test/user-1-files/ --recursive
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Run a command as another user using <command>sudo -s</command></term>
        <listitem>
          <para>
            Instead of using the <command>su</command> command for switching to
            a different user and then run commands, you can use the
            <command>sudo -s</command>. A shell run by the <command>sudo
            -s</command> command inherits the environment of the current user.
            The <command>sudo -s</command> command also offers a few privilege
            control measures.
          </para>
          <para>
            To run a command as a different user, use the following format:
          </para>
<screen>
  $ sudo -s -u USERNAME COMMAND
</screen>
          <para>
            By default, the command runs from the directory of the previous
            user, because the user environment is inherited.
          </para>
          <para>
            For example, to recursively list the files and subdirectories of
            the <command>/home/test/user-1-files/</command> directory as
            <command>user-1</command>, run the following command:
          </para>
<screen>
  $ sudo -s -u user-1 ls -alrt /home/test/user-1-files/ --recursive
</screen>
          <para>
            When you use the <command>sudo -s</command> approach for running a
            command as a different user, the command is logged in your history.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Run a command as another user with a clean environment using <command>sudo -i</command></term>
        <listitem>
          <para>
            When using the <command>sudo -s</command> command, the target user
            inherits the environment of the previous user. You can prevent it
            by using the <command>sudo -i</command> command, where the target
            user gets a clean environment and starts at its own
            <command>$HOME</command> directory.
          </para>
          <para>
            To run a command as a different user with a clean environment, use
            the following format:
          </para>
<screen>
  $ sudo -i -u USERNAME COMMAND
</screen>
          <para>
            The <command>sudo -i</command> command runs the shell as an
            interactive login shell of the target user. As a result, shell
            startup scripts such as <command>.profile</command> and
            <command>.bash_profile</command> files.
          </para>
          <para>
            For example, to list the files and subdirectories of the
            <command>/home/test/user-1-files/</command> directory as
            <command>user-1</command>, run the following command:
          </para>
<screen>
  $ sudo -i -u user-1 ls -alrt /home/test/user-1-files/
</screen>
          <para>
            When you use the <command>sudo -i</command> approach for running a
            command as a different user, the command is logged in your history.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <!--table>
      <title>A table title</title>
      <tgroup cols="2">
      <colspec colwidth="50*"/>
      <colspec colwidth="50*"/>
      <tbody>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      </tbody>
      </tgroup>
      </table-->
  </section>
</topic>
