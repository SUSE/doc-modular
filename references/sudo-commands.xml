<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: https://github.com/SUSE/doc-sle/blob/main/xml/adm_sudo.xml -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="sudo-commands"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Common &sudo; commands</title>
    <!--add author's email address-->
    <meta name="maintainer" content="souvik.sarkar@suse.com"/>
    <abstract>
      <para>
        By adding &sudo; before any command, you can run commands with elevated
        permissions. You can also run commands as another user and use their
        environment variables. Using &sudo; helps you accomplish system
        administration tasks without logging in as root.
      </para>
    </abstract>
  </info>
  <section xml:id="reference-sudo-common-commands">
    <title>Examples of &sudo; commands</title>
    <para>
      This section provides examples of common commands that often require
      administrative privileges.
    </para>
    <variablelist>
      <varlistentry>
        <term>Run the last command with &sudo;</term>
        <listitem>
          <para>
            To repeat the last command as an administrator, run <command>sudo
            !!</command> and enter the password. For example, an user without
            administrative privileges cannot create a directory under the
            <filename>/etc/</filename> directory. To create it, run
            <command>sudo !!</command>.
          </para>
<screen>
&prompt.user;<command>mkdir /etc/test/</command>
mkdir: cannot create directory ‘/etc/test/’: Permission denied

&prompt.sudo;<command>!!</command>
sudo mkdir /etc/test/
[sudo] password for root:

&prompt.user;<command>ls -alrt /etc  | grep test</command>
drwxr-xr-x 1 root root        0 Apr 20 12:48 test
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage packages using <command>sudo</command> and <command>zypper</command></term>
        <listitem>
          <para>
            To run package management commands as an administrator, add
            <command>sudo</command> before the command in the following format:
          </para>
<screen>
&prompt.sudo;<command>zypper [--GLOBAL-OPTIONS] &lt;COMMAND&gt; [--COMMAND-OPTIONS] [ARGUMENTS]</command>
</screen>
          <para>
            For example, to install the Docker CE containerization platform
            from its official package repository, run the following commands
            with <command>sudo</command>:
          </para>
<screen>
&prompt.sudo;<command>zypper addrepo https://download.docker.com/linux/suse/docker-ce</command>

&prompt.sudo;<command>zypper refresh</command>

&prompt.sudo;<command>zypper search docker-ce</command>

&prompt.sudo;<command>zypper install docker-ce</command>

&prompt.sudo;<command>systemctl enable docker</command>

&prompt.sudo;<command>systemctl start docker</command>
</screen>
          <para>
            You do not need to add <command>sudo</command> before
            <command>zypper</command> commands that do not modify the system,
            or provides privileged access to information. For example, you can
            list the repositories for the installed software packages on your system without using
            <command>sudo</command>:
          </para>
<screen>
&prompt.user;<command>zypper lr</command>
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Manage system services using <command>sudo</command> and <command>systemctl</command></term>
        <listitem>
          <para>
            In systems that use <command>systemd</command> for managing
            services, you can use the <command>systemctl</command> with
            <command>sudo</command>. For example, to restart the Apache web
            server service, run the following command:
          </para>
<screen>
&prompt.sudo;<command>systemctl restart apache2</command>
</screen>
          <para>
            You do not need to add <command>sudo</command> before
            <command>systemctl</command> commands that do not modify the
            system, or provides privileged access to information. For example,
            you can display the status of Network Manager without using
            <command>sudo</command>:
          </para>
<screen>
&prompt.user;<command>systemctl status NetworkManager</command>
● NetworkManager.service - Network Manager
     Loaded: loaded (/usr/lib/systemd/system/NetworkManager.service; enabled; vendor preset: disabled)
    Drop-In: /usr/lib/systemd/system/NetworkManager.service.d
             └─NetworkManager-ovs.conf
     Active: active (running) since DAY YYYY-MM-DD HH:MM:SS TIMEZONE; 1h 21min ago
       Docs: man:NetworkManager(8)
   Main PID: 1548 (NetworkManager)
      Tasks: 8 (limit: 4915)
     CGroup: /system.slice/NetworkManager.service
             ├─ 1548 /usr/sbin/NetworkManager --no-daemon
             ├─ 4304 /sbin/dhclient -d -q -sf /usr/lib/nm-dhcp-helper -pf /run/NetworkManager/dhclient-wlan0.pid -lf /var/lib/NetworkManager/dhclient-2acc1c75-018d-4909-b71
             ├─ 6379 /usr/lib/nm-openconnect-service --bus-name org.freedesktop.NetworkManager.openconnect.Connection_5
             └─ 6423 /usr/sbin/openconnect --servercert sha256:2ec361fcd88ce28ffb2b2f22a3431df49be0210a6f538893707f1041f05e42b3 --syslog --cookie-on-stdin --script /usr/lib
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Modify a user account using <command>sudo</command> and <command>usermod</command></term>
        <listitem>
          <para>
            To run the <command>usermod</command> command for modifying user
            accounts, use the following format:
          </para>
<screen>
&prompt.sudo;<command>usermod [OPTION] USERNAME</command>
</screen>
          <para>
            For example, to set the number of days to <literal>30</literal> for permanently
            disabling the user account
            <literal>tux</literal> after password expiry, run the following commands:
          </para>
<screen>
&prompt.sudo;<command>usermod --inactive 30 tux</command>
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Modify file and directory ownership using <command>sudo</command> and <command>chown</command></term>
        <listitem>
          <para>
            To change file and directory ownerships from the current owner to a
            new owner, use the following format:
          </para>
<screen>
&prompt.sudo;<command>chown [OPTION] [OWNER:[GROUP]] FILE</command>
</screen>
          <para>
            For example, to give <filename>tux</filename> the ownership of
            files and subdirectories in the
            <filename>/home/test/tux-files</filename> directory, run the
            following command:
          </para>
<screen>
&prompt.sudo;<command>chown tux /home/test/tux-files/ --recursive</command>
</screen>
          <para>
            You can test the change in ownership by running the following
            command:
          </para>
<screen>
&prompt.user;<command>ls -alrt /home/test/tux-files/ --recursive</command>
</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Run a command as another user using <command>sudo -s</command></term>
        <listitem>
          <para>
            Instead of using the <command>su</command> command for switching to
            a different user and then running commands, you can use the
            <command>sudo -s</command> command. A shell run by the
            <command>sudo -s</command> command inherits the environment of the
            current user. The <command>sudo -s</command> command also offers a
            few privilege control measures.
          </para>
          <para>
            To run a command as a different user, use the following format:
          </para>
<screen>
&prompt.sudo;<command>-s -u USERNAME COMMAND</command>
</screen>
          <para>
            By default, the command runs from the directory of the previous
            user, because the target user inherits the environment of the
            previous user.
          </para>
          <para>
            For example, to recursively list the files and subdirectories of
            the <filename>/home/test/tux-files/</filename> directory as the
            target user <filename>tux</filename>, run the following command:
          </para>
<screen>
&prompt.sudo;<command>-s -u tux ls -alrt /home/test/tux-files/ --recursive</command>
</screen>
          <para>
            When you use the <command>sudo -s</command> approach for running a
            command as a different user, the command is logged in your history.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Run a command as another user with a clean environment using <command>sudo -i</command></term>
        <listitem>
          <para>
            When using the <command>sudo -s</command> command, the target user
            inherits the environment of the previous user. You can prevent it
            by using the <command>sudo -i</command> command, where the target
            user gets a clean environment and starts at its own
            <envar>$HOME</envar> directory.
          </para>
          <para>
            To run a command as a different user with a clean environment, use
            the following format:
          </para>
<screen>
&prompt.sudo;<command>-i -u USERNAME COMMAND</command>
</screen>
          <para>
            The <command>sudo -i</command> command runs the shell as an
            interactive login shell of the target user. As a result, shell
            startup scripts such as <filename>.profile</filename> and
    <filename>.bash_profile</filename> files.
  </para>
  <para>
    For example, to list the files and subdirectories of the
    <filename>/home/test/tux-files/</filename> directory as
    <filename>tux</filename>, run the following command:
  </para>
<screen>
&prompt.sudo;<command>-i -u tux ls -alrt /home/test/tux-files/</command>
</screen>
  <para>
    When you use the <command>sudo -i</command> approach for running a
    command as a different user, the command is logged in your history.
  </para>
</listitem>
</varlistentry>
<varlistentry>
<term>Display the current &sudo; settings using <command>sudo -V</command></term>
<listitem>
  <para>
    As a <literal>root</literal> user, you can display the current &sudo; settings for the
    entire system using the following commands:
  </para>
<screen>
&prompt.user;<command>su -</command>

&prompt.sudo;<command>-V</command>
</screen>
  <para>
    The output of the <command>sudo -V</command> command is lengthy, but contains
    information that are useful for system administrators. For example, the sample output
    below contains information about the password timeouts and retry limits for &sudo; passwords.
  </para>
<screen>
...
Authentication timestamp timeout: 5.0 minutes
Password prompt timeout: 5.0 minutes
Number of tries to enter a password: 3
...
</screen>
        </listitem>
      </varlistentry>
    </variablelist>
    <!--table>
      <title>A table title</title>
      <tgroup cols="2">
      <colspec colwidth="50*"/>
      <colspec colwidth="50*"/>
      <tbody>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      <row>
      <entry>an entry</entry>
      <entry>another entry</entry>
      </row>
      </tbody>
      </tgroup>
      </table-->
  </section>
</topic>
