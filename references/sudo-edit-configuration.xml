<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: https://github.com/SUSE/doc-sle/blob/main/xml/adm_sudo.xml -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="sudo-edit-configuration"
 role="reference" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <title>Maintaining &sudo; configuration files</title>
  <info>
    <meta name="maintainer" content="jana.jaeger@suse.com" its:translate="no"/>
    <abstract>
      <para>
        The integrity of your system's &sudo; configuration is very important.
        Errors in these files can compromise your entire system. The
        <command>visudo</command> command provides a safe and secure way for
        an administrator to edit the &sudo; configuration.</para>
    </abstract>
  </info>
  <para>
    The main policy configuration file for &sudo; is
  <filename>/etc/sudoers</filename>. This file is supplied by the system packages
  and changes made to it may break updates. Therefore, create separate
  configuration files holding your custom settings under the
  <filename>/etc/sudoers.d/</filename> directory. These are pulled in by default
  by a directive in <filename>/etc/sudoers</filename>.
  </para>
  <para>
    Settings in the custom configuration files under the
    <filename>/etc/sudoers.d/</filename> directory always take precedence over the same
    settings made in the global configuration file
    <filename>/etc/sudoers</filename>. The global configuration is read and
    applied first and the custom one after that.
  </para>
  <section xml:id="sudo-edit-configuration-visudo">
    <title>Editing &sudo; configuration files with <command>visudo</command></title>
    <para>
      While it is possible to edit &sudo; configuration files with any editing
      tool, it is best practice to use <command>visudo</command> for this task.
      <command>visudo</command> provides a basic set of safety measures to make
      sure you do not lock yourself out from your system due to a broken &sudo;
      configuration. It checks for parse errors, provides basic integrity
      checks and locks the configuration file against simultaneous edits,
      either by someone else or you in another session. If you tried editing a
      locked configuration file, <command>visudo</command> would tell you to
      try again later.
    </para>
    <para>
      By default, <command>visudo</command> uses <command>vi</command> as the
      underlying editor. To change this to, for example,
      <command>nano</command>, set the <systemitem>EDITOR</systemitem>
      environment variable:
    </para>
    <screen>
&prompt.sudo;EDITOR=/usr/bin/nano visudo -f /etc/sudoers.d/<replaceable>NAME</replaceable>
    </screen>
  </section>
<!-- How to create custom configs with visudo -->
  <section xml:id="sudo-edit-configuration-custom">
    <title>Creating custom &sudo; configuration files</title>
    <para>
      To create a custom configuration file in the
      <filename>/etc/sudoers.d/</filename> directory, run
      <command>visudo</command> with the <option>-f</option> option and provide
      the name of your new configuration file:
    </para>
<<<<<<< HEAD
<screen>&prompt.sudo;visudo -f /etc/sudoers.d/<replaceable>01</replaceable>_<replaceable>custom_configuration</replaceable></screen>
    <para>
      When naming your custom configuration files, stick to the following
=======
    <screen>&prompt.sudo;visudo -f /etc/sudoers.d/<replaceable>01</replaceable>_<replaceable>custom_configuration</replaceable></screen>
    <para>
      When naming your custom configuration files, remember the following 
>>>>>>> f3ca336 (final round of Souvik's feedback)
      general rules:
    </para>
    <variablelist>
      <varlistentry>
        <term>Use descriptive file names</term>
        <listitem>
          <para>
            Use file names that hint at what the configuration file does.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Do not use <option>~</option> and <option>.</option> in the file names</term>
        <listitem>
          <para>
<<<<<<< HEAD
            &sudo; interprets configuration file names containing
            <option>.</option> as provided or created by the package management
            rather than the system adminstrator and ignores them. The same
            applies to files that end in <option>~</option>. These are
=======
            &sudo; interprets configuration file names containing 
            <option>.</option> as provided or created by the package management 
            rather than the system administrator and ignores them. The same 
            applies to files that end in <option>~</option>. These are 
>>>>>>> f3ca336 (final round of Souvik's feedback)
            interpreted as being copies locked by an editing tool.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Make sure the configuration files are read in the correct order</term>
        <listitem>
          <para>
<<<<<<< HEAD
            The order in which any custom files under
            <filename>/etc/sudoers.d/</filename> are parsed determines how
            directives are carried out. If you have set one directive in a file
            parsed early in the process and the same one in another file that
            is parsed later, the last read version trumps the earlier one.
=======
            The order in which any custom files under 
            <filename>/etc/sudoers.d/</filename> are parsed determines how 
            directives are carried out. If you have set one directive in a file 
            parsed early in the process and the same one in another file that is 
            parsed later, &sudo; processes the last read version.
>>>>>>> f3ca336 (final round of Souvik's feedback)
          </para>
          <para>
            To determine the order in which your custom configurations are
            read, add numbering to your configuration files and use a
            consistent number of leading zeroes. For example,
            <filename>01_myfirstconfig</filename> is parsed before
            <filename>10_myotherconfig</filename>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="sudo-edit-configuration-debug">
    <title>Checking &sudo; configurations with <command>visudo</command></title>
    <para>
      <command>visudo</command> performs a number of built-in checks to ensure
      your system's integrity.
    </para>
    <para>
      A basic syntax check is run when you edit a &sudo; configuration file. In
      this example, the edit introduced an error:
    </para>
<screen>&prompt.sudo;visudo -f /etc/sudoers.d/01_test
[sudo] password for root:
visudo: /etc/sudoers.d/01_test:1:17: unknown defaults entry "insult"<co xml:id="co-error"/>
What now?
Options are:
  (e)dit sudoers file again<co xml:id="co-edit"/>
  e(x)it without saving changes to sudoers file<co xml:id="co-exit"/>
  (Q)uit and save changes to sudoers file (DANGER!)<co xml:id="co-save"/>

What now? e
    </screen>
    <calloutlist>
      <callout arearefs="co-error">
        <para>
          An error has been spotted. The file name, the line number and the
          type of error are given.
        </para>
      </callout>
      <callout arearefs="co-edit">
        <para>
          Open the file in editing mode again and fix the error. If this option
          is selected, the file opens in edit mode again and the line
          containing the error is highlighted.
        </para>
      </callout>
      <callout arearefs="co-exit">
        <para>
          Exit without applying the most recent change.
        </para>
      </callout>
      <callout arearefs="co-save">
        <para>
          Apply the changes and exit. This results in a malfunctioning or broken
          &sudo; configuration.
        </para>
      </callout>
    </calloutlist>
    <para>
      To run a check of your entire &sudo; configuration, run:
    </para>
<screen>&prompt.sudo;visudo -c
/etc/sudoers: parsed OK
/etc/sudoers.d/01_test: parsed OK
/etc/sudoers.d/02_test: parsed OK
/etc/sudoers.d/03_test: parsed OK
    </screen>
    <para>
      This tells you that all of your configuration files are syntactically 
      correct and it also gives you the order in which the configurations 
      are parsed. This information is needed in case you notice unexpected 
      behavior of &sudo; which can simply be caused by directives being 
      applied in the wrong order or overriding each other. If the configuration 
      contains an error, <command>visudo</command> reports the file 
      name, line number and error description of the affected file (see above).
    </para>
  </section>
</topic>
