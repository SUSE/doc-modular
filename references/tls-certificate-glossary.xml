<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE glossary
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<glossary version="5.2" xml:lang="en"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:trans="http://docbook.org/ns/transclusion"
          xmlns:its="http://www.w3.org/2005/11/its"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns="http://docbook.org/ns/docbook">
  <title>Glossary</title>
  <glossentry xml:id="gt-tls"><glossterm>TLS</glossterm>
    <glossdef>
      <para>
        <emphasis>Transport layer security</emphasis> (TLS) is a protocol that
        provides secure communication between client-server applications. TLS
        uses asymmetric cryptography with a pair of private and public keys. TLS
        is the successor to the SSL (Secure Sockets Layer) protocol.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-ssl"><glossterm>SSL</glossterm>
    <glossdef>
      <para>
        <emphasis>Secure socket layer</emphasis> (SSL) was the predecessor of
        the TLS protocol. SSL version 3.0 was replaced by TLS 1.0 in 1999 to
        address existing vulnerabilities.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-certificate"><glossterm>TLS certificate</glossterm>
    <glossdef>
      <para>
        A digital X.509 certificate that helps to secure communication within a
        client-server system. Using TLS certificate, the client can authenticate
        the identity of the server and encrypt their mutual communication. The
        certificate usually includes information about its issuer (CA), identity
        of its holder, the associated public key, digital signature, and its
        validation period.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-certificate-chain"><glossterm>TLS certificate chain</glossterm>
    <glossdef>
      <para>
        A series of certificates used to establish the authenticity and
        trustworthiness of a particular certificate. A certificate chain can
        consist of the following certificate types: <xref
        linkend="gt-tls-root-ca"/>, <xref linkend="gt-tls-subordinate-ca"/> and
        <xref linkend="gt-tls-end-entity-ca"/>.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-root-ca"><glossterm>root CA</glossterm>
    <glossdef>
      <para>
        A trusted entity at the top of the certificate chain. It signs
        subordinate CAs and end-entity CAs. Root certificates are preinstalled
        in &productnameshort; to establish trust.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-subordinate-ca"><glossterm>subordinate CA</glossterm>
    <glossdef>
      <para>
        CAs that live between the root and end-entity certificates and are used
        to sign other certificates, including end-entity certificates. Their
        main purpose is to define and authorize the types of certificates that
        can be requested from the root CA. For example, there can be different
        subordinate CAs for different locations, or encryption key types.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-end-entity-ca"><glossterm>end-entity certificate</glossterm>
    <glossdef>
      <para>
        TLS certificates issued to individual entities such as Web sites,
        servers or clients. These certificates are signed by subordinate CAs and
        are used to authenticate and encrypt communication between clients and
        servers.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-pubkey"><glossterm>public key</glossterm>
    <glossdef>
      <para>
        A part of a TLS certificate which acts as a digital identity for the
        server. When a client connects to the server over TLS, it requests the
        server's certificate, which contains the public key. The public key is
        freely distributable and is used for data encryption.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-privkey"><glossterm>private key</glossterm>
    <glossdef>
      <para>
        A counterpart to the public key in asymmetric cryptography. It is kept
        secret and known only to the owner of the key pair. When a client
        connects to a server over TLS, the server sends its digital certificate
        with a public key. The client uses it to encrypt data, ensuring that
        only the server's private key can decrypt it.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-x509"><glossterm>X.509</glossterm>
    <glossdef>
      <para>
        A standard that defines the format of a public key certificates.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-ecdsa"><glossterm>ECDSA</glossterm>
    <glossdef>
      <para>
        Elliptic curve digital signature algorithm (ECDSA) is a cryptographic
        algorithm used to generate digital signatures based on the mathematics
        of elliptic curves. It is widely used for digital signature generation
        and verification in cryptographic protocols and applications, including
        TLS for secure communication over the internet.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-ca"><glossterm>CA</glossterm>
    <glossdef>
      <para>
        A <emphasis>certificate authority</emphasis> (CA) responsible for
        issuing digital certificates that authenticate the identity of
        individuals, organizations or servers on the internet. It can be either
        a publicly trusted CA, such as
        <link xlink:href="https://letsencrypt.org/">Let's Encrypt</link>, or a
        private CA in which case you sign the certificate yourself.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-csr"><glossterm>CSR</glossterm>
    <glossdef>
      <para>
        To have a certificate signed by a CA, you need to generate a public key
        and send it to the CA for signing. This process is called a
        <emphasis>certificate signing request</emphasis> (CSR).
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-openssl"><glossterm>Openssl</glossterm>
    <glossdef>
      <para>
        An open-source software library that provides cryptographic functions
        and utilities to secure communication. It is used in &productnameshort;
        for implementing secure protocols such as TLS.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-handshake"><glossterm>TLS handshake</glossterm>
    <glossdef>
      <para>
        A series of messages exchanged between the client and the server to
        establish a secure connection. The process involves negotiating
        cryptographic parameters, authenticating identities, and agreeing on
        encryption keys before secure communication can begin.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-pki"><glossterm>PKI</glossterm>
    <glossdef>
      <para>
        The public key infrastructure (PKI) is a set of policies, processes,
        software and hardware used to create, manage, distribute, use, store and
        revoke digital certificates. PKI enables secure communication and
        authentication over insecure networks, such as the Internet.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-pfs"><glossterm>PFS</glossterm>
    <glossdef>
      <para>
        Perfect forward secrecy (PFS) is a feature of specific key-agreement
        protocols assuring that session keys are not compromised even if
        long-term secrets&mdash;such as the private key of the server&mdash;used
        in the session key exchange are compromised.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-dh"><glossterm>DH key exchange</glossterm>
    <glossdef>
      <para>
        Diffieâ€“Hellman key exchange (DH) is a mathematical method of securely
        exchanging cryptographic keys over a public channel and was one of the
        first public-key protocols. It was named after cryptologists Whitfield
        Diffie and Martin Hellman. DH is one of the earliest practical examples
        of public key exchange based on a private key and a corresponding public
        key.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-pem"><glossterm>PEM</glossterm>
    <glossdef>
      <para>
        A privacy enhanced mail (PEM) file is a commonly used file format for
        storing cryptographic objects such as certificates, private keys, and
        certificate signing requests.
      </para>
    </glossdef>
  </glossentry>
  <glossentry xml:id="gt-tls-trust-anchor"><glossterm>Trust anchor</glossterm>
    <glossdef>
      <para>
        Trust anchor is a root certificate that is inherently trusted by a
        system or application. This root certificate is used to verify the
        signatures of other certificates in the certificate chain.
      </para>
    </glossdef>
  </glossentry>
</glossary>
