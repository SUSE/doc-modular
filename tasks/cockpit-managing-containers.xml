<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="task-example"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Managing containers using &cockpit;</title>
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract>
      <para>
        &cockpit; enables you to run, commit and delete containers as an
        alternative to using a container engine.
      </para>
    </abstract>
  </info>
  <section xml:id="task-running-containers">
    <title>Running new containers from images</title>
    <note>
      <title>Image required to run a container</title>
      <para>
        To run a container, you need a container image, either pulled by using
        &cockpit; or by &podman;. For details about &podman;, refer to the
        <link xlink:href="https://documentation.suse.com/sle-micro/html/SLE-Micro-all/article-podman.html">&podman;
        guide</link>.
      </para>
    </note>
    <para>
      To run a new container from an image, proceed as follows:
    </para>
    <procedure>
      <step>
        <para>
          Navigate to the <guimenu>Podman containers</guimenu> page.
        </para>
      </step>
      <step>
        <para>
          In the <guimenu>Images</guimenu> view, click the play icon.
        </para>
      </step>
      <step>
        <para>
          In the <guimenu>Run image</guimenu> window, enter the container
          details as described below.
        </para>
        <variablelist>
          <varlistentry>
            <term>Name</term>
            <listitem>
              <para>
                You can define a custom name for the container. If not
                specified, the generated value is used.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Command</term>
            <listitem>
              <para>
                Defines a command that is run inside the container, for
                example, <filename>/usr/lib/systemd/systemd</filename> or
                <filename>/bin/bash</filename>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Memory limit</term>
            <listitem>
              <para>
                You can limit maximum memory consumption of the container by
                checking the box and specifying the limit.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>With terminal</term>
            <listitem>
              <para>
                The container will not run in the detached mode.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>CPU shares</term>
            <listitem>
              <para>
                Specify the weight of the container to use CPU time. The
                default weight is 1024. The weight applies only if containers
                are under high load. If the tasks in one container are idle, other
                containers may use its CPU time.
              </para>
              <para>
                If you have four containers, two of them have CPU shares of 512
                and the other two have 1024. Thus, under high load, the
                containers with lower CPU shares get only 16,5% of CPU time,
                while those with 1024 CPU shares get 33% of CPU time.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Ports</term>
            <listitem>
              <para>
                You can publish the ports of the container to the host. If you do
                not provide the host IP address, the port will be bound to all
                host IP addresses. If you omit the host port number, a random
                port is assigned.
              </para>
              <para>
                To publish a port for both protocols (TCP and UDP), enter the
                same port number twice, just select different protocols.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Volumes</term>
            <listitem>
              <para>
                Maps the volumes on the host system to the paths in the
                container. The <literal>Container path</literal> must be an
                absolute path inside the container. If it does not exist, the
                corresponding directory will be created.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Environment</term>
            <listitem>
              <para>
                Enables passing environment variables to the container.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </step>
      <step>
        <para>
          Click <guimenu>Run</guimenu> to proceed and start a container.
        </para>
      </step>
    </procedure>
  </section>
  <section xml:id="further-actions-with-containers">
    <title>Further actions with running containers</title>
    <para>
      After expanding the container details, you can perform the following
      tasks:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          access a terminal of the container in the <guimenu>Console</guimenu>
          tab
        </para>
      </listitem>
      <listitem>
        <para>
          view the container logs in the <guimenu>Logs</guimenu> tab
        </para>
      </listitem>
      <listitem>
        <para>
          delete the container by clicking the trash bin button
        </para>
      </listitem>
      <listitem>
        <para>
          commit changes performed to the container, for example, installing
          packages to the container
        </para>
      </listitem>
      <listitem>
        <para>
          start the container by clicking <guimenu>Start</guimenu>
        </para>
      </listitem>
      <listitem>
        <para>
          restart the container, either by regular <guimenu>Restart</guimenu>,
          where processes running inside the container are stopped, or by
          <guimenu>Force restart</guimenu>, where the processes are killed, and
          you may lose data
        </para>
      </listitem>
      <listitem>
        <para>
          stop the container, either by regular <guimenu>Stop</guimenu>,
          <guimenu>Force stop</guimenu> or <guimenu>Checkpoint</guimenu>. When
          using <guimenu>Checkpoint</guimenu>, the state of all processes in
          the container is written to the disk, and after the next start, the
          container is restored to the same point before stopping.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</topic>
