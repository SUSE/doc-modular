<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="task-example"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Managing containers using &cockpit;</title>
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract>
      <para>
        &cockpit; enables you to run, commit and delete containers as an
        alternative to using a container engine.
      </para>
    </abstract>
  </info>
  <section xml:id="task-running-containers">
    <title>Running new containers from images</title>
    <note>
      <title>Image required to run a container</title>
      <para>
        To run a container, you need a container image. The image can be pulled using
        &podman; or &cockpit;. When using &cockpit;, you can pull an image in advance as
        described in <xref linkend="getting-image-downloading"/>, or you can pull the image directly
        from the <guimenu>Create container</guimenu> form as described below<phrase os="slmicro">When using &podman;, refer to the
        <link xlink:href="https://documentation.suse.com/sle-micro/html/SLE-Micro-all/article-podman.html">&podman;
        guide</link></phrase>.
      </para>
    </note>
    <para>
      To run a new container, proceed as follows:
    </para>
    <procedure>
      <step>
        <para>
          Navigate to the <guimenu>Podman containers</guimenu> page.
        </para>
      </step>
      <step>
        <para>
          If you pulled an image in advance: 
        </para>
        <substeps>
          <step>
            <para>
              In the <guimenu>Images</guimenu> view, click <guimenu>Show images</guimenu>.
            </para>
          </step>
          <step>
            <para>
              Click <guimenu>Create container</guimenu> next  to the image you want to use.
            </para>
          </step>    
        </substeps>
      </step>
      <step>
        <para>
          If you do not have the image, click <guimenu>Create container</guimenu> in the
          <guimenu>Containers</guimenu> view.
        </para>
      </step>
      <step>
        <para>
          In the <guimenu>Create container</guimenu> window, enter the container
          details as described below. Note that some options are available only for system administrators.
        </para>
            <para>
              In the <guimenu>Details</guimenu> tab, enter the following details:
            </para>
            <variablelist>
              <varlistentry>
                <term>Owner</term>
                <listitem>
                  <para>
                    Select whether the container will be visible only for users with <command>sudo</command> privileges by selecting <guimenu>system</guimenu>. The <guimenu>user</guimenu> defines that the container is visible to privileged users and regular users.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Name</term>
                <listitem>
                  <para>
                    Specify a unique name for the container.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Image</term>
                <listitem>
                  <para>
                    This field is enabled if you do not have an image. After you start typing the
                    image name, &cockpit; makes suggestions of images in the configured registries.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Pull the latest image</term>
                <listitem>
                  <para>
                    The checkbox is available if you are creating the container from an already downloaded image. If selected, the latest image version is pulled before the container is started. 
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Command</term>
                <listitem>
                  <para>
                    You can specify a command to run in the container.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>With terminal</term>
                <listitem>
                  <para>
                    Select the option to gain access to the container using a terminal. If not selected, the container will be in the detached state.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Memory limit</term>
                <listitem>
                  <para>
                    You can limit the maximum memory consumption of the container by
                checking the box and specifying the limit.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CPU shares</term>
                <listitem>
                  <para>
                Specify the weight of the container to use CPU time. The
                default weight is 1024. The weight applies only if containers
                are under high load. If the tasks in one container are idle, other
                containers may use its CPU time.
              </para>
              <para>
                If you have four containers, two of them have CPU shares of 512
                and the other two have 1024. Thus, under high load, the
                containers with lower CPU shares get only 16,5% of CPU time,
                while those with 1024 CPU shares get 33% of CPU time.
              </para>
                </listitem>
              </varlistentry>
              <varlistentry os="slemicro;slmicro" condition="5.5;6.0">
                <term>Restart policy</term>
                <listitem>
                  <para>
                    Specify when the container is restarted after it exits.
                  </para>
                </listitem>
              </varlistentry>          
              
            </variablelist>
            <para>
            In the <guimenu>Integration</guimenu> tab, you can enter the following parameters:
          </para>
          <variablelist>
            <varlistentry>
              <term>Port mapping</term>     
              <listitem>
                <para>
                  After you click the <guimenu>Add port mapping</guimenu> button, specify the host IP address, the host port to map the container port onto, the container port and select the protocol. If you do not set the host IP address or set the value to 0.0.0.0, the port is bound to ALL host IP addresses. If you omit the host port, a random one is used for the mapping.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Volumes</term>
              <listitem>
                <para>
                  This field maps a path in a container onto a path on the host machine. Fill in the host path, the container path and select the &selnx; label. 
                </para>
                <para>
                  The &selnx; label <guimenu>private</guimenu> defines that the volume is accessible only from the particular container. The <guimenu>shared</guimenu> label means that all containers can access the volume.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Environment variables</term>
              <listitem>
                <para>
                  To define environment variables in the container, click <guimenu>Add variable</guimenu> and fill in <guimenu>Key</guimenu> and <guimenu>Value</guimenu>. You can enter multiple variables by adding more lines.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            In the <guimenu>Health check</guimenu> tab, you can set the interval for triggering
          commands to check the container's status. Fill in the following parameters:
          </para>
            <variablelist>
              <varlistentry>
                <term>Command</term>
                <listitem>
                  <para>
                    Specify the command that is triggered to check the container status.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Interval</term>
                <listitem>
                  <para>
                    Specify the interval of checks in seconds.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Timeout</term>
                <listitem>
                  <para>
                    The maximum time in seconds to wait before the interval is considered failed.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Start period</term>
                <listitem>
                  <para>
                    The time interval after the container is started when the health check is not performed.
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Retries</term>
                <listitem>
                  <para>
                    Specify how many times the check can be performed before the status is considered unhealthy. 
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>When unhealthy</term>
                <listitem>
                  <para>
                    Select the action to take after a container is considered unhealthy.  
                  </para>
                  </listitem>
              </varlistentry>
            </variablelist>
                </step>
      <step>
        <para>
        To create the container, click <guimenu>Create</guimenu> or <guimenu>Create and run</guimenu> to create and start the container.
      </para>
      </step>      
    </procedure>
       
  </section>
  <section xml:id="further-actions-with-containers">
    <title>Further actions with running containers</title>
    <para>
      Under the three-dot menu, you can perform the following actions: 
    </para>
    <itemizedlist>
       <listitem>
        <para>
         delete the container
        </para>
      </listitem>
      <listitem>
        <para>
          pause the container
        </para>
      </listitem>
      <listitem>
        <para>
          commit changes performed to the container, for example, installing
          packages to the container
        </para>
      </listitem>
      <listitem>
        <para>
          checkpoint the container&mdash;write the state of the container to disk and stop the container
        </para>
      </listitem>
      <listitem>
        <para>
          restart the container either by regular <guimenu>Restart</guimenu>,
          where processes running inside the container are stopped, or by
          <guimenu>Force restart</guimenu>, where the processes are killed, and
          you may lose data
        </para>
      </listitem>
      <listitem>
        <para>
          stop the container, either by regular <guimenu>Stop</guimenu>,
          <guimenu>Force stop</guimenu> or <guimenu>Checkpoint</guimenu>. When
          using <guimenu>Checkpoint</guimenu>, the state of all processes in
          the container is written to the disk, and after the next start, the
          container is restored to the same point before stopping.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      By expanding the container details, you can access the container's terminal in the 
      <guimenu>Console</guimenu> tab and view its information in other tabs.           
    </para>
    
  </section>
</topic>
