<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="compose-cretaing-application"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Creating a container-based application</title><!-- can be changed via merge
in the assembly -->
    <!-- add author's e-mail -->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       The topic covers a simple example of a containerized application.
              </para>
    </abstract>
  </info>
  <para>
    To create a containerized application, proceed as follows:
  </para>
  <procedure>
    <step>
      <para>
Create the configuration file <filename>compose.yml</filename>. For details, refer to <xref linkend="compose-cretaing-application-yaml-file"/>.
      </para>
    </step>
    <step>
      <para>
        Prepare the required directory structure. We recommend that the
        <filename>compose.yml</filename> file is located at the top of your working directory. 
      </para>
    </step>
    
    <step>
      <para>
        If needed, prepare files specific to services used by the containerized application. For
        exammple, if you intend to build your own service, create a containerfile.
        Alternatively, include configuration files of the services being used.
      </para>
      <para> We
        recommend to create a subdirectory per service in the working directory and place the
        service-specific files there.
      </para>
    </step>
    <step>
      <para>
      Deploy the application. For details, refer to <xref linkend="compose-cretaing-application-deployment"/>.
      </para>
    </step>
  </procedure>
    <section xml:id="compose-cretaing-application-deployment">
    <title>Deploying applications </title>
    <para>
      After you create the proper directory structure and the <filename>compose.yml</filename>
      file, you can deploy the application:
        </para>
        <procedure>
          <step>
            <para>
              Verify that there is no running copy of the container you intend to run:
            </para>
            <screen>&prompt.user; podman ps</screen>
            <para>
              If needed, remove the particular container:
            </para>
            <screen>&prompt.user; podman rm -f <replaceable>CONTAINER_ID</replaceable></screen>
          </step>
          <step>
            <para>
              Start the application stack by running from the directory where <filename>compose.yml</filename>
            is located:</para>
            <screen>&prompt.user;podman compose up -d</screen>
            <para>
&compose; creates a separate network for te application stack.
            </para>
          </step>
          <step>
            <para>
              You can verify that containers are running and ports are mapped by listing running containers:
            </para>
            <screen>&prompt.user;podman ps</screen>
          </step>
        </procedure>
        <tip>
          <title>Exiting the application stack</title>
          <para>
To exit the application stack, run the command:
          </para>
          <screen>&prompt.user;docker compose down</screen>
        </tip>
        
  </section>
</topic>
