<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>

<!-- refers to legacy doc: https://github.com/SUSE/doc-sleha/blob/main/xml/ha_fencing.xml -->

<topic xml:id="ha-fencing-creating-resources-for-physical-device"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Adding cluster resources for a physical &stonith; device</title>
    <meta name="maintainer" content="tahlia.richardson@suse.com" its:translate="no"/>
    <abstract>
      <para>
        To set up fencing, you need to configure one or more &stonith; resources&mdash;the <systemitem class="daemon">pacemaker-fenced</systemitem> daemon requires no configuration. All configuration is stored in the CIB. A &stonith; resource is a resource of class <literal>stonith</literal>. &stonith; resources are a representation of &stonith; plug-ins in the CIB. Apart from the fencing operations, the &stonith; resources can be started, stopped and monitored, like any other resource. Starting or stopping &stonith; resources means loading and unloading the &stonith; device driver on a node. Starting and stopping are thus only administrative operations and do not translate to any operation on the fencing device itself. However, monitoring does translate to logging in to the device (to verify that the device will work if it is needed). When a &stonith; resource fails over to another node it enables the current node to talk to the &stonith; device by loading the respective driver.
        </para>
    </abstract>
  </info>

  <para>
    Do not configure several power switches in parallel.
  </para>

  <itemizedlist>
    <title>Requirements</title>
    <listitem>
      <para>
        An existing &ha; cluster is already running.
      </para>
    </listitem>
    <listitem>
      <para>
        A physical &stonith; device is accessible from all cluster nodes.
      </para>
    </listitem>
  </itemizedlist>
  <para>
    Perform this procedure on only one node in the cluster:
  </para>
  <procedure>
    <step>
      <para>
        Log in either as the &rootuser; user or as a user with <command>sudo</command> privileges.
      </para>
    </step>
    <step>
      <para>
        Show a list of all the supported &stonith; types:
      </para>
  <screen>&prompt.user;<command>sudo crm ra list stonith</command></screen>
    </step>
    <step>
      <para>
        Show the list of parameters for a specific &stonith; device:
      </para>
  <screen>&prompt.user;<command>sudo crm ra info stonith:<replaceable>DEVICE</replaceable></command></screen>
    </step>
    <step>
      <para>
        Start the <command>crm</command> interactive shell:
      </para>
<screen>&prompt.user;<command>sudo crm configure</command></screen>
    </step>
    <step>
      <para>
      Create the &stonith; resource with the <literal>stonith</literal>
      class, the type you have chosen,
      and the respective parameters if needed, for example:
      </para>
<screen>&prompt.crm.conf;<command>primitive my-stonith stonith:external/ipmi \
  params hostname="&node1;" \
  ipaddr="&subnetI;.221" \
  userid="admin" passwd="secret" \
  op monitor interval=60m timeout=120s</command></screen>
    <para>
     An IBM RSA lights-out device might be configured like this:
    </para>
<screen>&prompt.crm.conf;<command>primitive st-ibmrsa-1 stonith:external/ibmrsa-telnet \
  params nodename=&node1; ip_address=192.168.0.101 \
  username=USERNAME password=PASSW0RD</command>
&prompt.crm.conf;<command>primitive st-ibmrsa-2 stonith:external/ibmrsa-telnet \
  params nodename=&node2; ip_address=192.168.0.102 \
  username=USERNAME password=PASSW0RD</command></screen>
    </step>
    <step>
      <para>
        Add location constraints:
      </para>
<screen>&prompt.crm.conf;<command>location l-st-&node1; st-ibmrsa-1 -inf: &node1;</command>
&prompt.crm.conf;<command>location l-st-&node2; st-ibmrsa-2 -inf: &node2;</command></screen>
    <para>
     In this example, location constraints are used for the following
     reason: there is always a certain probability that the &stonith;
     operation is going to fail. Therefore, a &stonith; operation on the
     node which is the executioner as well is not reliable. If the node is
     reset, it cannot send the notification about the fencing operation
     outcome. The only way to do that is to assume that the operation is
     going to succeed and send the notification beforehand. But if the
     operation fails, problems could arise. Therefore, by convention,
     <systemitem class="daemon">pacemaker-fenced</systemitem> refuses to terminate its host.
    </para>
    </step>
    <step>
      <para>
        Add stonith-enabled, stonith-timeout, etc.?
      </para>
    </step>
    <step>
      <para><!--Do you still need to do this or is it automatic when you quit?-->
        Commit your changes:
      </para>
<screen>&prompt.crm.conf;<command>commit</command></screen>
    </step>
    <step>
      <para>
        Exit the <command>crm</command> interactive shell:
      </para>
<screen>&prompt.crm.conf;<command>quit</command></screen>
    </step>
    <step>
      <para>
        Check something somehow, maybe <command>crm configure show</command>
      </para>
    </step>
  </procedure>
</topic>
