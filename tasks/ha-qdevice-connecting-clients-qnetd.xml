<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>

<!-- refers to legacy doc: https://github.com/SUSE/doc-sleha/blob/main/xml/ha_qdevice-qnetd.xml -->

<topic xml:id="ha-qdevice-connecting-clients-qnetd"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Connecting &qdevice; clients to the &qnet; server</title>
    <meta name="maintainer" content="tahlia.richardson@suse.com" its:translate="no"/>
    <abstract>
      <para>
       After you set up your &qnet; server, you can set up and run the clients.
         You can connect the clients to the &qnet; server during the installation
         of your cluster, or you can add them later. This procedure documents how
         to add them later.
      </para>
    </abstract>
  </info>
  <important role="compact">
        <para>
          To complete the &qnet; configuration, the clients must have &rootuser; SSH access
          to the &qnet; server.
        </para>
       </important>
      <procedure>
         <step>
            <para>
             On all nodes, install the <package>corosync-qdevice</package> package:
            </para>
            <screen>&prompt.root;<command>zypper install corosync-qdevice</command></screen>
         </step>
         <step>
            <para>
             On one of the nodes, run the following command to configure &qdevice;:
            </para>
<screen>&prompt.root;<command>crm cluster init qdevice</command>
Do you want to configure QDevice (y/n)? <command>y</command>
HOST or IP of the QNetd server to be used []<command><replaceable>QNETD_SERVER</replaceable></command>
TCP PORT of QNetd server [5403]
QNetd decision ALGORITHM (ffsplit/lms) [ffsplit]
QNetd TIE_BREAKER (lowest/highest/valid node id) [lowest]
Whether using TLS on QDevice/QNetd (on/off/required) [on]
Heuristics COMMAND to run with absolute path; For multiple commands, use ";" to separate []</screen>
            <para>
             Confirm with <literal>y</literal> that you want to configure &qdevice;,
             then enter the host name or IP address of the &qnet; server. For the
             remaining fields, you can accept the default values or change them
             if required.
            </para>
         </step>
      </procedure>
      <para>
        The script configures &qdevice; on the nodes and completes the &qnet; configuration
        on the &qnet; server, including generating CA and server certificates, starting the
        &qnet; daemon, and updating the cluster's quorum configuration.
      </para>
      <important>
        <title><literal>SBD_WATCHDOG_TIMEOUT</literal> for diskless SBD and &qdevice;</title>
        <para>
          If you use &qdevice; with diskless SBD, the <literal>SBD_WATCHDOG_TIMEOUT</literal>
          value must be greater than &qdevice;'s <literal>sync_timeout</literal> value,
          or SBD will time out and fail to start.
        </para>
        <para>
          The default value for <literal>sync_timeout</literal> is 30 seconds.
          Therefore, in the file <filename>/etc/sysconfig/sbd</filename>, make sure
          that <literal>SBD_WATCHDOG_TIMEOUT</literal> is set to a greater value,
          such as <literal>35</literal>.
        </para>
      </important>
      <para>
         If you need additional control over how votes are determined, use heuristics.
         Heuristics are a set of commands that are executed in parallel.
      </para>
      <para>
         For this purpose, the command <command>crm cluster init qdevice</command>
         provides the option <option>--qdevice-heuristics</option>. You can
         pass one or more commands (separated by semicolons) with absolute paths.
      </para>
      <para>
         For example, if your own command for heuristic checks is located at
         <filename>/usr/sbin/my-script.sh</filename> you can run it on
         one of your cluster nodes as follows:
      </para>
      <screen>&prompt.root;<command>crm cluster init qdevice --qnetd-hostname=&node3; \
     --qdevice-heuristics=/usr/sbin/my-script.sh \
     --qdevice-heuristics-mode=on</command></screen>
      <para>
         The command or commands can be written in any language such as Shell, Python, or Ruby.
         If they succeed, they return <literal>0</literal> (zero), otherwise they return an error code.
      </para>
      <para>
         You can also pass a set of commands. Only when all commands finish successfully (return
         code is zero), have the heuristics passed.
      </para>
      <para>
         The <option>--qdevice-heuristics-mode=on</option> option lets the heuristics
         commands run regularly.
      </para>
  <para>
    Check the status of the cluster with <command>crm status</command>.
  </para>
</topic>
