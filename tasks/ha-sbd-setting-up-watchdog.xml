<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>

<!-- refers to legacy doc: https://github.com/SUSE/doc-sleha/blob/main/xml/ha_storage_protection.xml -->

<topic xml:id="ha-sbd-setting-up-watchdog"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Setting up the &sbd; watchdog</title>
    <meta name="maintainer" content="tahlia.richardson@suse.com" its:translate="no"/>
    <abstract>
      <xi:include href="../snippets/ha-watchdog.xml"/>
    </abstract>
  </info>
  <para>
    Hardware-specific watchdog drivers are available as kernel modules. However, sometimes the wrong
    watchdog kernel module loads automatically. Use the following procedure to make sure the correct
    module is loaded. Perform this procedure on <emphasis>all</emphasis> nodes in the cluster:
  </para>

  <procedure>
    <step>
      <para>
        List the drivers that are installed with your kernel version:
      </para>
<screen>&prompt.user;<command>rpm -ql kernel-<replaceable>VERSION</replaceable> | grep watchdog</command></screen>
      <para>
        To help you find the correct driver for your hardware, see <xref linkend="ha-watchdog-drivers"/>.
        However, this is not a complete list and might not be accurate for your specific system.
        Check your system's hardware configuration if possible, or ask your hardware or system
        vendor for details about system-specific watchdog configuration.
      </para>
      <important>
        <title><systemitem>softdog</systemitem> limitations</title>
        <para>
          If no hardware watchdog is available, &crmsh; automatically configures the software
          watchdog (<systemitem>softdog</systemitem>) when configuring &sbd;. This watchdog can be
          used for testing purposes, but is <emphasis>not</emphasis> recommended for production
          environments.
        </para>
        <para>
          The <systemitem>softdog</systemitem> driver assumes that at least one CPU is still
          running, so if all CPUs are stuck, <systemitem>softdog</systemitem> cannot reboot the
          system. Hardware watchdogs work even if all CPUs are stuck.
        </para>
      </important>
    </step>
    <step>
      <para>
        Check whether any watchdog modules are already loaded in the kernel:
      </para>
<screen>&prompt.user;<command>lsmod | egrep "(wdt|dog)"</command></screen>
      <para>
        If the correct watchdog module is already loaded, you can skip to
        <xref linkend="sbd-watchdog-device-verify"/>.
      </para>
    </step>
    <step>
      <para>
        If the wrong watchdog module is loaded, you can unload it with the following command:
      </para>
<screen>&prompt.user;<command>sudo rmmod <replaceable>WRONG_MODULE</replaceable></command></screen>
    </step>
    <step>
      <para>
        Enable the watchdog module that matches your hardware:
      </para>
<screen>&prompt.user;<command>sudo bash -c "echo <replaceable>WATCHDOG_MODULE</replaceable> &gt; /etc/modules-load.d/watchdog.conf"</command></screen>
      <tip role="compact">
        <para>
          If you run this command as the &rootuser; user, you can omit <command>bash -c</command> and
          the quotes (&quot;&quot;):
        </para>
<screen>&prompt.root;<command>echo <replaceable>WATCHDOG_MODULE</replaceable> &gt; /etc/modules-load.d/watchdog.conf</command></screen>
      </tip>
    </step>
    <step>
      <para>
        Reload the kernel modules:
      </para>
<screen>&prompt.user;<command>sudo systemctl restart systemd-modules-load</command></screen>
    </step>
    <step>
      <para>
        Check whether the watchdog module is loaded correctly:
      </para>
<screen>&prompt.user;<command>lsmod | egrep "(wdt|dog)"</command></screen>
    </step>
    <step xml:id="sbd-watchdog-device-verify">
      <para>
        Verify that at least one watchdog device is available:
      </para>
<screen>&prompt.user;<command>sudo sbd query-watchdog</command></screen>
      <para>
        If no watchdog device is available, you might need to use a different driver.
      </para>
    </step>
    <step>
      <para>
        Verify that the watchdog device works:
      </para>
<screen>&prompt.user;<command>sudo sbd -w /dev/<replaceable>WATCHDOG_DEVICE</replaceable> test-watchdog</command></screen>
      <para>
        If the test is successful, the node reboots.
      </para>
    </step>
   </procedure>

  <important>
    <title>Accessing the watchdog timer</title>
    <para>
      &sbd; must be the only software that accesses the watchdog timer. Some hardware vendors ship
      systems management software that uses the watchdog for system resets (for example, the HP ASR
      daemon). If this is the case, disable the additional software.
    </para>
  </important>
  <table xml:id="ha-watchdog-drivers" pgwide="1">
    <title>Commonly used watchdog drivers</title>
    <tgroup cols="2">
    <thead>
      <row>
        <entry>Hardware</entry><entry>Driver</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>HP</entry><entry><systemitem>hpwdt</systemitem></entry>
      </row>
      <row>
        <entry>Dell, Lenovo (Intel TCO)</entry><entry><systemitem>iTCO_wdt</systemitem></entry>
      </row>
      <row>
        <entry>Fujitsu</entry><entry><systemitem>ipmi_watchdog</systemitem></entry>
      </row>
      <row>
        <entry>LPAR on IBM Power</entry><entry><systemitem>pseries-wdt</systemitem></entry>
      </row>
      <row>
        <entry>VM on IBM z/VM</entry><entry><systemitem>vmwatchdog</systemitem></entry>
      </row>
      <row>
        <entry>VM on VMware vSphere</entry><entry><systemitem>wdat_wdt</systemitem></entry>
      </row>
      <row>
        <entry>Generic</entry><entry><systemitem>softdog</systemitem></entry>
      </row>
    </tbody>
    </tgroup>
  </table>
</topic>
