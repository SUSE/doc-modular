<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="observability-installing"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Setting up &sobservability; for &productname;</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <para>
        &sobservability; provides comprehensive monitoring and insights into
        your infrastructure and applications. It enables efficient tracking of
        metrics, logs and traces, helping you maintain optimal performance and
        troubleshoot issues effectively. This procedure guides you through
        setting up &sobservability; for the &productname; environment.
      </para>
    </abstract>
  </info>
  <section xml:id="ai-observability-requirements">
    <title>Requirements</title>
    <para>
      To set up &sobservability; for &productname;, you need to meet the
      following requirements.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Have access to &sappco;.
        </para>
      </listitem>
      <listitem>
        <para>
          Have a valid &productname; subscription.
        </para>
      </listitem>
      <listitem>
        <para>
          Have a valid license for &sobservability; in &scc;.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="ai-observability-overview">
    <title>Setup process overview</title>
    <para>
      The following chart shows high-level steps of the &sobservability; setup
      for &productname; procedure. You need to execute the steps from each
      column starting left to right with top-to-bottom order.
    </para>
    <itemizedlist>
      <listitem>
        <para>
          <emphasis>Yellow steps</emphasis> require your actions in the Web user
          interface.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Blue steps</emphasis> are related to &helm; chart
          installations.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Grey steps</emphasis> represent other type of interaction,
          such as coding.
        </para>
      </listitem>
    </itemizedlist>
    <figure xml:id="ai-observability-overview-figure">
      <title>High-level overview of the &sobservability; setup</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="ai-observability-overview.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="ai-observability-overview.png" width="75%"/>
        </imageobject>
        <textobject role="description"><phrase>High-level overview of the &sobservability; setup</phrase>
        </textobject>
      </mediaobject>
    </figure>
    <tip>
      <title>Setup clusters</title>
      <para>
        You can create and configure &kube; clusters for &productname; and
        &sobservability; as you prefer. If you are using &ranchermanager;, check
        its
        <link xlink:href="https://ranchermanager.docs.rancher.com/how-to-guides/new-user-guides/kubernetes-clusters-in-rancher-setup">documentation</link>
        For testing purposes, you can even share one cluster for both
        deployments. You can skip instructions on setting up a specific cluster
        if you already have one configured.
      </para>
    </tip>
  </section>
  <section xml:id="ai-observability-observability-cluster">
    <title>Set up the &sobservability; cluster</title>
    <procedure>
      <step>
        <para>
          <emphasis role="bold">Install &sobservability;.</emphasis> You can
          follow the official
          <link
          xlink:href="https://docs.stackstate.com/get-started/k8s-suse-rancher-prime#installing-suse-observability">&sobservability;
          documentation</link> for all installation instructions. Remember to
          <link xlink:href="https://docs.stackstate.com/self-hosted-setup/install-stackstate/kubernetes_openshift/ingress">expose
          your APIs</link> and collector endpoints to your &productname;
          cluster.
        </para>
      </step>
      <step>
        <para>
          <emphasis role="bold">Enable and configure &kube;
          StackPack.</emphasis> In the &sobservability; Web UI, access the page
          <guimenu>StackPacks</guimenu> from the left menu. Under
          <guimenu>Kubernetes</guimenu> select the <guimenu>Kubernetes</guimenu>
          StackPack and configure it. It is crucial to set the proper cluster
          name that matches the name of the observed cluster.
        </para>
        <figure xml:id="ai-observability-kube-slackpak-figure">
          <title>Enabling &kube; SlackPak</title>
          <mediaobject>
            <imageobject role="fo">
              <imagedata fileref="ai-observability-kube-slackpak.png" width="75%"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="ai-observability-kube-slackpak.png" width="75%"/>
            </imageobject>
            <textobject role="description"><phrase>Enabling Kubernetes SlackPak</phrase>
            </textobject>
          </mediaobject>
        </figure>
        <para>
          The &kube; StackPack status reads <literal>Waiting for data</literal>
          until you finish installing the &sobservability; Agent" in the
          &productname; cluster.
        </para>
      </step>
      <step>
        <para>
          <emphasis role="bold">Enable OpenTelemetry StackPack.</emphasis> In
          the &sobservability; Web UI, access the page
          <guimenu>StackPacks</guimenu> from the left menu. Select the
          &otelemetry; SlackPack and install it.
        </para>
        <figure xml:id="ai-observability-otelemetry-slackpak-figure">
          <title>Enabling &otelemetry; SlackPack</title>
          <mediaobject>
            <imageobject role="fo">
              <imagedata fileref="ai-observability-otelemetry-slackpak.png" width="75%"/>
            </imageobject>
            <imageobject role="html">
              <imagedata fileref="ai-observability-otelemetry-slackpak.png" width="75%"/>
            </imageobject>
            <textobject role="description"><phrase>Enabling &otelemetry; SlackPack</phrase>
            </textobject>
          </mediaobject>
        </figure>
      </step>
      <step>
        <para>
          <emphasis role="bold">Install &productname; &sobservability;
          extension.</emphasis> Create a new &helm; chart file named
          <filename>genai_values.yaml</filename>. The following values are
          mandatory:
        </para>
<screen>
serverUrl: <replaceable>SUSE_OBSERVABILITY_API_URL</replaceable>
apiKey: <replaceable>SUSE_OBSERVABILITY_API_KEY</replaceable><co xml:id="co-obs-apikey2"/>
apiToken: <replaceable>SUSE_OBSERVABILITY_API_CLI_TOKEN</replaceable><co xml:id="co-obs-clitoken2"/>
clusterName: <replaceable>OBSERVED_SERVER_NAME</replaceable><co xml:id="co-obs-observed-name2"/>
</screen>
        <calloutlist>
          <callout arearefs="co-obs-apikey2">
            <para>
              The API key is included in the
              <filename>baseConfig_values.yaml</filename> file that is used
              during the installation of &sobservability;.
            </para>
          </callout>
          <callout arearefs="co-obs-clitoken2">
            <para>
              You can retrieve the API token in the &sobservability; Web UI by
              navigating the side menu to the CLI page.
            </para>
          </callout>
          <callout arearefs="co-obs-observed-name2">
            <para>
              Use the same cluster name that you used during the &kube;
              StackPack configuration.
            </para>
          </callout>
        </calloutlist>
        <para>
          Run the install command.
        </para>
<screen>&prompt.user;<command>helm upgrade --install ai-obs \
  oci://dp.apps.rancher.io/charts/suse-ai-observability-extension \
  -f genai_values.yaml --namespace so-extensions --create-namespace</command></screen>
        <para>
          After the installation is complete, a new menu called
          <guimenu>GenAI</guimenu> is added to the Web interface and also a
          &kube; cron job is created that synchronizes the topology view with
          the components found in the &productname; cluster.
        </para>
      </step>
    </procedure>
  </section>
  <section xml:id="ai-observability-ai-cluster">
    <title>Set up the &productname; cluster</title>
    <procedure>
      <step>
        <para>
          <emphasis role="bold">Install &nvoperator;.</emphasis> Follow the
          instructions in
          <link xlink:href="https://documentation.suse.com/suse-ai/1.0/html/NVIDIA-Operator-installation/index.html"/>.
        </para>
      </step>
      <step>
        <para>
          <emphasis role="bold">Install &otelemetry; collector.</emphasis>
          Create a secret with your &sobservability; API key in the namespace
          where you want to install the collector. Retrieve the API key using
          the Web UI or from the <filename>baseConfig_values.yaml</filename>
          file that you used during the &sobservability; installation. If the
          namespace does not exist yet, create it.
        </para>
<screen>kubectl create namespace observability
kubectl create secret generic open-telemetry-collector \
  --namespace observability \
  --from-literal=API_KEY='<replaceable>SUSE_OBSERVABILITY_API_KEY</replaceable>'</screen>
        <para>
          Create a new file named <filename>otel-values.yaml</filename> with the
          following content.
        </para>
<screen>extraEnvsFrom:
  - secretRef:
      name: open-telemetry-collector
mode: deployment
image:
  repository: "otel/opentelemetry-collector-k8s"
ports:
  metrics:
    enabled: true
presets:
  kubernetesAttributes:
    enabled: true
    extractAllPodLabels: true
config:
  receivers:
    prometheus:
      config:
        scrape_configs:
        - job_name: 'gpu-metrics'
          scrape_interval: 10s
          scheme: http
          kubernetes_sd_configs:
            - role: endpoints
              namespaces:
                names:
                - gpu-operator
  exporters:
    otlp:
endpoint: http://suse-observability-otel-collector.suse-observability.svc.cluster.local:4317 <co xml:id="co-obs-otel-collector3"/>
      headers:
        Authorization: "SUSEObservability ${env:API_KEY}"
      tls:
        insecure: true
  processors:
    tail_sampling:
      decision_wait: 10s
      policies:
      - name: rate-limited-composite
        type: composite
        composite:
          max_total_spans_per_second: 500
          policy_order: [errors, slow-traces, rest]
          composite_sub_policy:
          - name: errors
            type: status_code
            status_code:
              status_codes: [ ERROR ]
          - name: slow-traces
            type: latency
            latency:
              threshold_ms: 1000
          - name: rest
            type: always_sample
          rate_allocation:
          - policy: errors
            percent: 33
          - policy: slow-traces
            percent: 33
          - policy: rest
            percent: 34
    resource:
      attributes:
      - key: k8s.cluster.name
        action: upsert
        value: <replaceable>CLUSTER_NAME</replaceable> <co xml:id="co-obs-clustername3"/>
      - key: service.instance.id
        from_attribute: k8s.pod.uid
        action: insert
    filter/dropMissingK8sAttributes:
      error_mode: ignore
      traces:
        span:
          - resource.attributes["k8s.node.name"] == nil
          - resource.attributes["k8s.pod.uid"] == nil
          - resource.attributes["k8s.namespace.name"] == nil
          - resource.attributes["k8s.pod.name"] == nil
  connectors:
    spanmetrics:
      metrics_expiration: 5m
      namespace: otel_span
    routing/traces:
      error_mode: ignore
      table:
      - statement: route()
        pipelines: [traces/sampling, traces/spanmetrics]
  service:
    extensions:
      - health_check
    pipelines:
      traces:
        receivers: [otlp, jaeger]
        processors: [filter/dropMissingK8sAttributes, memory_limiter, resource]
        exporters: [routing/traces]
      traces/spanmetrics:
        receivers: [routing/traces]
        processors: []
        exporters: [spanmetrics]
      traces/sampling:
        receivers: [routing/traces]
        processors: [tail_sampling, batch]
        exporters: [debug, otlp]
      metrics:
        receivers: [otlp, spanmetrics, prometheus]
        processors: [memory_limiter, resource, batch]
        exporters: [debug, otlp]</screen>
        <calloutlist>
          <callout arearefs="co-obs-otel-collector3">
            <para>
              Set the exporter to your exposed &sobservability; collector. For
              production usage, we recommend using TLS communication.
            </para>
          </callout>
          <callout arearefs="co-obs-clustername3">
            <para>
              Replace <replaceable>CLUSTER_NAME</replaceable> with the cluster's
              name.
            </para>
          </callout>
        </calloutlist>
        <para>
          Finally, run the installation command.
        </para>
<screen>&prompt.user;<command>helm upgrade \
  --install opentelemetry-collector open-telemetry/opentelemetry-collector \
  -f otel-values.yaml -n observability</command></screen>
        <para>
          Verify the installation by checking the existence of a new deployment
          and service in the observability namespace.
        </para>
      </step>
      <step>
        <para>
          <emphasis role="bold">Install the &sobservability; Agent.</emphasis>
        </para>
<screen>&prompt.user;helm upgrade --install \
  --namespace suse-observability --create-namespace \
  --set-string 'stackstate.apiKey'='<replaceable>YOUR_API_KEY</replaceable>'<co xml:id="co-obs-apikey1"/> \
  --set-string 'stackstate.cluster.name'='<replaceable>CLUSTER_NAME</replaceable><co xml:id="co-obs-clustername1"/>' \
  --set-string 'stackstate.url'='http://suse-observability-router.suse-observability.svc.cluster.local:8080/receiver/stsAgent'<co xml:id="co-obs-stackstate"/> \
  --set 'nodeAgent.skipKubeletTLSVerify'=true suse-observability-agent \
  suse-observability/suse-observability-agent</screen>
        <calloutlist>
          <callout arearefs="co-obs-apikey1">
            <para>
              Retrieve the API key using the Web UI or from the
              <filename>baseConfig_values.yaml</filename> file that you used
              during the &sobservability; installation.
            </para>
          </callout>
          <callout arearefs="co-obs-clustername1">
            <para>
              Replace <replaceable>CLUSTER_NAME</replaceable> with the cluster's
              name.
            </para>
          </callout>
          <callout arearefs="co-obs-stackstate">
            <para>
              Replace with your &sobservability; server URL.
            </para>
          </callout>
        </calloutlist>
      </step>
      <step>
        <para>
          <emphasis role="bold">Install &productname;.</emphasis> Refer to
          <xref linkend="ai-library-installing"/> for the complete procedure.
        </para>
      </step>
    </procedure>
  </section>
  <section xml:id="ai-observability-openlit">
    <title>Instrument applications with &openlit;</title>
    <para>
      &openlit; offers a Python and a TypeScript SDK available. Below are two
      examples of using these kits, one for each language. Notice that it is
      possible to configure the &otelemetry; endpoint with an environment
      variable. For full configuration options for &openlit; SDK, check the
      <link xlink:href="https://docs.openlit.io/latest/sdk-configuration">upstream
      documentation</link>.
    </para>
    <section xml:id="ai-observability-openlit-python">
      <title>Python &openlit; SDK</title>
      <procedure>
        <step>
          <para>
            Add dependency:
          </para>
<screen>&prompt.user;<command>pip install openlit</command></screen>
        </step>
        <step>
          <para>
            Import &openlit; and initialize it in your code&mdash;usually in the
            main entrypoint. Remember to adjust the &otelemetry; endpoint to
            point to your &otelemetry; collector instance that was installed
            earlier.
          </para>
<screen>import openlit

openlit.init(otlp_endpoint="http://otel-collector.observability.svc.cluster.local:4318")</screen>
        </step>
        <step>
          <para>
            After including the code above, you will start receiving telemetry
            data from the libraries currently supported by &openlit;. You can
            test it with &ollama;, for example:
          </para>
<screen>import ollama
  import openlit
    
  openlit.init()
    
  response = ollama.chat(model='gemma:2b', messages=[
    {
      'role': 'user',
      'content': 'Why is the sky blue?',
    },
  ])</screen>
        </step>
      </procedure>
    </section>
    <section xml:id="ai-observability-openlit-node">
      <title>Node &openlit; SDK</title>
      <procedure>
        <step>
          <para>
            Add dependency:
          </para>
<screen>&prompt.user;<command>npm install openlit</command></screen>
        </step>
        <step>
          <para>
            Import &openlit; and initialize it in your code&mdash;usually in the
            main entrypoint. Remember to adjust the &otelemetry; endpoint to
            point to your &otelemetry; collector instance that was installed
            earlier.
          </para>
<screen>import Openlit from "openlit"
 
Openlit.init({ otlpEndpoint: "http://127.0.0.1:4318/v1/traces" })</screen>
        </step>
        <step>
          <para>
            After including the code above, you will start receiving telemetry
            data from the libraries currently supported by &openlit;.
          </para>
        </step>
      </procedure>
    </section>
  </section>
</topic>
