<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="podman-getting-images"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Getting container images</title><!-- can be changed via merge
in the assembly -->
    <!-- add author's e-mail -->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
       The topic covers the <command>podman pull</command> command and default registries.
      </para>
    </abstract>
  </info>
  <para>
    To run a container, you need an image. An image includes all dependencies
    needed to run an application. You can obtain images from an image
    registry. Available registries are defined in the
    <filename>/etc/containers/registries.conf</filename> configuration file.
    If you have a local image registry or want to use other registries, add
    the registries into the configuration file.
  </para>
  <important>
    <title>No tools for building images in &productname;</title>
    <para>
      &productname; does not provide tools for building custom images. Therefore,
      the only way to get an image is to pull it from an image registry.
    </para>
  </important>
  <xi:include href="../snippets/Micro-default-registries.xml"/>
  <para>
    The <command>podman pull</command> command pulls an image from an image
    registry. The syntax is as follows:
  </para>
<screen>&prompt.root;podman pull <replaceable>[OPTIONS]</replaceable> <replaceable>SOURCE</replaceable></screen>
  <para>
    The <replaceable>source</replaceable> can be an image without the
    registry name. In that case, Podman tries to pull the image from all
    registries configured in the
    <filename>/etc/containers/registries.conf</filename> file. The default
    image tag is <literal>latest</literal>. The default location of pulled
    images is
    <filename>/var/lib/containers/storage/overlay-images/</filename>.
  </para>
  <para>
    To view all possible options of the <command>podman pull</command>
    command, run:
  </para>
<screen>&prompt.root;podman pull --help</screen>
  <note>
    <title>Getting images using Cockpit</title>
    <para>
      If you are using Cockpit, you can also pull images from an image
      registry in the <guimenu>Podman containers</guimenu> menu by clicking
      <guimenu>+ Get new image</guimenu>.
    </para>
  </note>
  <para>
    Podman enables you to search for images in an image registry or a list of
    registries using the command:
  </para>
<screen>&prompt.root;podman search <replaceable>IMAGE_NAME</replaceable></screen>
  <para>
    Alternatively, you can use the skopeo tool to manage container images and
    image repositories. For details, refer to the following section.
  </para>
  <section xml:id="podman-tools-skopeo">
    <title>skopeo</title>
    <para>
      <link xlink:href="https://github.com/containers/skopeo">skopeo</link>
      is a command-line utility for managing, inspecting and signing
      container images and image repositories. skopeo can be used to inspect
      containers and repositories on remote and local container registries.
      skopeo can copy container images between different storage back-ends.
    </para>
    <para>
      skopeo works with the following registry types:
    </para>
    <variablelist>
      <varlistentry>
        <term>containers-storage:<replaceable>IMAGE_REFERENCE</replaceable></term>
        <listitem>
          <para>
            An image located in a local image store.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>docker://<replaceable>IMAGE_REFERENCE</replaceable></term>
        <listitem>
          <para>
            An image in a registry.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      skopeo provides several commands to manage images and registries:
    </para>
    <variablelist>
      <varlistentry>
        <term><command>inspect</command></term>
        <listitem>
        <para>
          The command fetches the repository manifest and can show you
          information like tags available for the specified repository,
          labels of a container image, the operating system of an image, and so
          on.
        </para>
        <para>
          The command has the following syntax:
        </para>
<screen>&prompt.user;<command>skopeo inspect <replaceable>REGISTRY_TYPE</replaceable><replaceable>IMAGE_NAME</replaceable></command>
      </screen>
        <para>
          An example of usage follows:
        </para>
<screen>&prompt.user;<command>skopeo inspect docker://registry.suse.com/suse/pcp:latest</command>
{
  "Name": "registry.suse.com/suse/pcp",
  "Digest": "sha256:eee17c009fb8b05e5825a8c9658d972ab13a17541180bd7a1348fccc6e4fc77f",
  "RepoTags": [
      "5",
      "5-12.54",
      "5-13.10",
      ...
      ],
  "Created": "2023-06-19T16:59:01.617731565Z",
  "DockerVersion": "20.10.23-ce",
  "Labels": {
      "com.suse.application.pcp.created": "2023-06-19T16:58:29.786850402Z",
      "com.suse.application.pcp.description": "Performance Co-Pilot (pcp) container image based on the SLE Base Container Image. This container image is not supported when using a container runtime other than podman.",
      ...
      ],
      "Architecture": "amd64",
  "Os": "linux",
  "Layers": [
      "sha256:a05e4c4d1fc89c7f7aa60829b8631b64873df6041f627eb2b43524e9e010446e",
      "sha256:19793da49ce886a67aa62657dc24a105a26d63568ce27de241246bc6cc9bc008",
      "sha256:403f9ef6c98d4cf277caf3166ca4455817828e33c8b699237bb8eb24cb2b41bf"
  ],
  "LayersData": [
      {
          "MIMEType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
          "Digest": "sha256:a05e4c4d1fc89c7f7aa60829b8631b64873df6041f627eb2b43524e9e010446e",
          "Size": 47291175,
          "Annotations": null
      },
      ...
  ],
  "Env": [
      "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      </screen>
    </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>copy</command></term>
        <listitem>
          <para>
            The command enables you to copy container images between
            registries, container storage back-ends and local directories.
          </para>
          <para>
            An example of usage follows:
          </para>
<screen>&prompt.user;<command>skopeo copy oci:busybox_ocilayout:latest dir:existingemptydirectory</command>
        </screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>delete</command></term>
        <listitem>
          <para>
            To mark an image for later removal by the registry's garbage
            collector.
          </para>
<screen>
          &prompt.user;<command>skopeo delete docker://registry.example.com/example/pause:latest</command>
          </screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><command>sync</command></term>
        <listitem>
          <para>
            To synchronize images between registry repositories and local
            directories.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</topic>
