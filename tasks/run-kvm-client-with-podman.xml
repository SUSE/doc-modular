<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="task-run-kvm-client-with-podman" xml:lang="en"
 role="task"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <info>
    <meta name="maintainer" content="caleb.crane@suse.com" its:translate="no"/>
    <title>Using the &kvmclient; workload</title>
    <abstract>
      <para>
        The &kvmclient; workload can be installed on &productnameshort; to
        provide client tooling to interact with the &kvmserver;. The
        &kvmclient; workload provides wrappers for many virtualization tools to
        be run inside of a container.
      </para>
    </abstract>
  </info>
  <procedure>
    <step>
      <para>
        Identify the &kvmclient; workload image:
      </para>
<screen>
&prompt.root;podman search kvm-client
[...]
registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads/kvm-client
</screen>
    </step>
    <step>
      <para>
        Install the &kvmclient; workload. This pulls the container image from
        the registry and installs the included wrappers on the host.
      </para>
<screen>&prompt.root;podman container runlabel install registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads/kvm-client:latest</screen>
    </step>
    <step>
      <para>
        Optionally, print list of installed wrappers.
      </para>
<screen>&prompt.root;find -L /usr -xtype l -samefile $(command -v kvm-client-wrapper)</screen>
    </step>
    <step>
      <para>
        Run the desired tool from the list of installed wrappers. The wrapper
        transparently handles passing through the given executable, flags, and
        arguments into the container
      </para>
    </step>
  </procedure>
</topic>
