<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="saptune-manage-sap-sols"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Managing &sapsol;s</title>
    <!-- can be changed via merge
      in the assembly -->
    <!-- add author's e-mail -->
    <meta name="maintainer" content="" its:translate="no"/>
    <abstract>
      <!-- can be changed via merge in the assembly -->
      <para>
        Learn how to manage &sapsol;s.
      </para>
    </abstract>
  </info>
  <section xml:id="task-saptune-manage-sap-sols-manage">
    <title>Introduction</title>
    <para>
      Before you proceed, make sure that the requirements listed below are met.
    </para>
  </section>
  <section xml:id="task-saptune-manage-sap-sols-requirements">
    <title>Requirements</title>
    <itemizedlist>
      <listitem>
        <para>
          A system with &saptune; installed, configured, and enabled.
        </para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="task-saptune-manage-sap-sols-perform">
  <title>Managing &sapsol;s</title>
  <para>
   This chapter explains how to work with &sapsol;s.
  </para>
  <para>
An &sapsol; is a combination of &sapnote; configurations grouped logically. It generally represents an &sap; product or combination. Applying an &sapsol; effectively applies all &sapnote; configurations listed in it. Instructions for listing and setting a solution are provided in <!-- <section linkend="sec-saptune-configure-tuning"/>. -->
  </para>

  <section xml:id="sec-saptune-customize-solution">
  <title>Customizing an &sapsol;</title>
  <para>An &sapsol; can be customized using the following command:</para>
  <screen>&prompt.root;<command>saptune solution customise <replaceable>SOLUTION</replaceable></command></screen>
  <para>
    The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with a copy of the Solution configuration. Change the Note list for the architecture to your liking. For more information, refer to the <literal>saptune-note(5)</literal> man page.
    </para>
    <para>
    This creates an override file <filename>/etc/saptune/override/<replaceable>SOLUTION.sol</replaceable></filename>. It is possible to create the file elsewhere and place it in <filename>/etc/saptune/override/</filename>.
    </para>
    <para>
    When you are done customizing an &sapsol;, restart the <literal>saptune</literal> service to apply the changes.
    </para>
 </section>
  
 <section xml:id="sec-saptune-create-solution">
  <title>Creating a new &sapsol;</title>
  <para>To create a new &sapsol;, run the following command:</para>
<screen>&prompt.root;<command>saptune solution create <replaceable>SOLUTION</replaceable></command></screen>
  <para>
  The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with a Solution configuration template. Fill in the template.
  </para>
  <para>
  This creates a Solution configuration file <filename>/etc/saptune/extra/<replaceable>SOLUTION.sol</replaceable></filename>. It is possible to create the file elsewhere and place it in <filename>/etc/saptune/extra/</filename>.
  </para>
 </section>

 <section xml:id="sec-saptune-edit-solution">
 <title>Editing a custom &sapsol;</title>
 <para>
 To edit a custom &sapsol;, use the following command:
 </para>

<screen>&prompt.root;<command>saptune solution edit <replaceable>SOLUTION</replaceable></command></screen>

<para>
The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with the Solution configuration.
</para>
<para>
When you are done editing an &sapsol;, restart the <literal>saptune</literal> service to apply the changes.
</para>
<para>
Custom Solutions can be customized like shipped Solutions.
 </para>
 </section>

 <section xml:id="sec-saptune-delete-solution">
   <title>Deleting an &sapsol;</title>
   <para>
   The following command deletes a created Solution (in this example, myHANA), including the corresponding override file or the override file of a shipped Solution, if available:
   </para>
<screen>&prompt.root;<command>saptune solution delete myHANA</command>

Solution to delete is a customer/vendor specific Solution.
Do you really want to delete this Solution 'myHANA'? [y/n]: y</screen>
  <para>
   The &sapsol; may not be applied at the time. Keep in mind the following:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     A confirmation is required to finish the action.
    </para>
   </listitem>
   <listitem>
    <para>
      &sapsol;s shipped by &saptune; cannot be deleted. Only the override file is removed, if available.
    </para>
   </listitem>
   <listitem>
    <para>
      If the &sapsol; is already applied, the command is terminated
      with the information that the &sapsol; first needs to be reverted
      before it can be deleted.
    </para>
   </listitem>
  </itemizedlist>
 </section>

  <section xml:id="sec-saptune-rename-solution">
   <title>Renaming an &sapsol;</title>
   <para>To rename an &sapsol;, run the following command:</para>
   <screen>&prompt.root;<command>saptune solution rename myHANA myHANA2</command>

Solution to rename is a customer/vendor specific Solution.
Do you really want to rename this Solution 'myHANA' to the new name 'myHANA2'? [y/n]:</screen>
  <para>
   The &sapsol; may not be applied at the time. Keep in mind the following points:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     A confirmation is needed to finish the action.
    </para>
   </listitem>
   <listitem>
    <para>
      &sapsol;s shipped by &saptune; cannot be renamed.
    </para>
   </listitem>
   <listitem>
    <para>
      If the &sapsol; is already applied, the command will be terminated
      with the information that the &sapsol; first needs to be reverted
      before it can be renamed.
    </para>
   </listitem>
  </itemizedlist>
  </section>

  <section xml:id="sec-saptune-show-solution">
   <title>Showing the configuration of an &sapsol;</title>
   <para>To list the configuration of an &sapsol;, run the following command:</para>
   <screen>&prompt.root;<command>saptune solution show <replaceable>SOLUTION</replaceable></command></screen>
  </section>

  <section xml:id="sec-saptune-switch-solution">
    <title>Switching to another &sap; Solution</title>
    <para>
      Starting with &saptune; version 3.1, it is easier to switch to a different solution using the <command>saptune solution change <replaceable>SOLUTION</replaceable></command> command.
    </para>
    <para>
      Keep in mind that internally the current solution is reverted first, and then the new solution is applied. If you have additional notes configured, the order is not preserved.
    </para>
    <para>
      If the same solution is already applied, no action is taken. Otherwise the current solution gets reverted and the new one applied. The command prompts for confirmation before making the change. This can be disabled by adding the <option>--force</option> option.
    </para>
  </section>

  <section xml:id="sec-saptune-verify-solution">
  <title>Verifying an &sapsol;</title>
  <para>
  To verify the tuning of a Solution, use the following command:
  </para>
<screen>&prompt.root;<command>saptune solution verify <replaceable>SOLUTION</replaceable></command></screen>
<para>
For information about the output of the <command>verify</command> command and how to verify the entire tuning instead of a single Solution, refer to <xref linkend="saptune-verify"/>.
</para>
</section>

<section xml:id="sec-saptune-simulate-solution">
<title>Performing a dry run of an SAP Solution</title>
<para>
To show all parameters of all Notes belonging to a Solution, use the following command:
</para>
<screen>&prompt.root;<command>saptune solution simulate <replaceable>SOLUTION</replaceable></command></screen>

<para>
The command lists the current system value and the expected values (default and override).
</para>

<note>
<title>Deprecation notice</title>
<para>
The <command>simulate</command> command is deprecated since 3.1, and it is removed in all &saptune; versions in &sles4sap; 16. 
</para>
</note>
</section>

  <section xml:id="sec-saptune-revert-solution">
    <title>Reverting an &sapsol;</title>
    <para>To revert an &sapsol;, run the following command:</para>
    <screen>&prompt.root;<command>saptune solution revert <replaceable>SOLUTION</replaceable></command></screen>
    <para>
     The &sapsol; must be applied. This reverts all &sapnote;s parts of the &sapsol; that are still applied.
    </para>
  </section>

  <section xml:id="sec-saptune-edit-custom-solution">
   <title>Editing a custom &sapsol;</title>
   <para>To edit a custom &sapsol;, run:</para>
   <screen>&prompt.root;<command>saptune solution edit <replaceable>SOLUTION</replaceable></command></screen>
  </section>

  <section xml:id="sec-saptune-list-solution">
   <title>Listing an enabled/applied &sapsol;</title>
   <para>To list an enabled &sapsol;, run:</para>
   <screen>&prompt.root;<command>saptune solution enabled</command></screen>
   <para>To list an applied &sapsol;, run:</para>
   <screen>&prompt.root;<command>saptune solution applied</command></screen>
   <para>
    If &sapnote;s from an applied &sapsol; have been reverted, the string <literal>(partial)</literal>
    has been added to the solution name.
   </para>
   <para>
   Both commands are primarily meant for use in scripts.
      </para>
    </section>
  </section>
</topic>
