<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="selinux-troubleshoot-audit2allow"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Analyzing <filename>/var/log/audit/audit.log</filename> with <command>audit2allow</command></title><!-- can be changed via merge
in the assembly -->
    <!-- add author's e-mail -->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
        Instead of interpreting the events in
        <filename>/var/log/audit/audit.log</filename> yourself, you can use the
        <command>audit2allow</command> command. 
      </para>
    </abstract>
  </info>
  <para>
    The command helps analyze the
    cryptic log messages in <filename>/var/log/audit/audit.log</filename>. An
    <command>audit2allow</command> troubleshooting session always consists of
    three different commands. First, you would use <command>audit2allow -w
    -a</command> to present the audit information in a more readable way. The
    <command>audit2allow -w -a</command> by default works on the
    <filename>audit.log</filename> file. If you want to analyze a specific
    message in the audit.log file, copy it to a temporary file and analyze
    the file with:
  </para>
<screen>&prompt.sudo;<command>audit2allow -w -i <replaceable>FILENAME</replaceable></command></screen>
  <example>
    <title>Analyzing audit messages</title>
<screen>&prompt.sudo;<command>audit2allow -w -i testfile</command>
type=AVC msg=audit(1348173901.309:300): avc:  denied  { append } for  pid=1316
comm="rsyslogd" name="acpid" dev=sda6 ino=582296
scontext=system_u:system_r:syslogd_t tcontext=system_u:object_r:apmd_log_t tclass=file</screen>
  </example>
  <variablelist>
    <varlistentry>
      <term>This was caused by:</term>
      <listitem>
        <para>
          A missing type enforcement (TE) allow rule.
        </para>
        <para>
          To generate a loadable module to allow this access, run
        </para>
<screen>&prompt.sudo;<command>audit2allow</command></screen>
      </listitem>
    </varlistentry>
  </variablelist>
  <para>
    To find out which specific rule has denied access, you can use
    <command>audit2allow -a</command> to show the enforcing rules from all
    events that were logged into the <filename>audit.log </filename> file, or
    <command>audit2allow -i <replaceable>FILENAME</replaceable></command> to
    show it for messages that you have stored in a specific file:
  </para>
  <example>
    <title>Viewing which lines deny access</title>
<screen>&prompt.sudo;<command>audit2allow -i testfile</command>
#============= syslogd_t ==============
allow syslogd_t apmd_log_t:file append;</screen>
  </example>
  <para>
    To create an &selnx; module with the name <literal>mymodule</literal>
    that you can load to allow the access that was previously denied, run
  </para>
<screen>&prompt.sudo;<command>audit2allow -a -R -M mymodule</command></screen>
  <para>
    If you want to do this for all events that have been logged into the
    <filename>audit.log</filename> file, use the <option>-a -M</option>
    command arguments. To do it only for specific messages that are in a
    specific file, use <option>-i -M</option> as in the example below:
  </para>
  <example>
    <title>Creating a policy module allowing an action previously denied</title>
<screen>&prompt.sudo;<command>audit2allow -i testfile -M example</command>
******************** IMPORTANT ***********************
To make this policy package active, execute:

semodule -i example.pp</screen>
  </example>
  <para>
    As indicated by the <command>audit2allow</command> command, you can now
    run this module by using the <command>semodule -i</command> command,
    followed by the name of the module that <command>audit2allow</command>
    has created for you (<filename>example.pp</filename> in the above
    example).
  </para>
</topic>
