<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refer to README.md for file and id naming conventions -->
<topic xml:id="sles-pxe-server-configure-grub2"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Configuring &grub; for PXE boot</title>
    <meta name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
    <abstract>
      <para>
        This section describes how to configure the &grub; bootloader for PXE-based booting on
        &productname; &productnumber;. It covers creating the network boot directory structure,
        setting up architecture-specific bootloaders, and implementing a flexible configuration
        system that supports multiple architectures and installation scenarios.
      </para>
    </abstract>
  </info>
  <section xml:id="sles-pxe-server-configure-grub2-intro">
    <title>Introduction</title>
    <para>
      &grub; serves as the network bootloader for PXE clients, loading kernel and initrd files to
      start the &agama; installer. This section demonstrates how to create a sophisticated &grub;
      configuration that automatically detects client architecture, manages network interface
      selection, and provides a unified boot menu supporting multiple installation types and target
      architectures.
    </para>
    <para>
      The configuration approach uses a modular design with separate files for architecture
      detection, variable definitions, and boot menu entries. This enables support for
      machine-specific configurations and automated installation profiles while maintaining
      consistency across different hardware platforms.
    </para>
  </section>
  <section xml:id="sles-pxe-server-configure-grub2-reqs">
    <title>Requirements</title>
    <itemizedlist>
      <listitem>
        <para>
          Ensure that the &grub; network boot directory structure is in place, as described in the
          previous sections.
        </para>
      </listitem>
      <listitem>
        <para>
          Ensure that the installer files are properly organized as described in the previous
          sections.
        </para>
      </listitem>
      <listitem>
        <para>
          &grub; packages for all target architectures must be installed:
          <package>grub2-x86_64-efi</package>, <package>grub2-i386-pc</package>,
          <package>grub2-aarch64-efi</package>, and <package>grub2-ppc64le-ieee1275</package>
        </para>
      </listitem>
      <listitem>
        <para>
          The <package>shim</package> package for &uefisecboot; support (optional).
        </para>
      </listitem>
      <listitem>
        <para>
          Administrative access to <filename>/srv/tftpboot</filename> or equivalent PXE root.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="sles-pxe-server-configure-grub2-main-config">
    <title>Creating the &grub; configuration</title>
    <para>
      The &grub; configuration file handles three main tasks: detecting the client's architecture, 
      managing network interfaces and loading other configuration files. This modular 
      approach provides flexibility for different deployment scenarios.
    </para>
    <procedure xml:id="proc-create-main-grub-config">
      <title>Setting up the main <filename>grub.cfg</filename> file</title>
      <step>
        <para>
          Create the main &grub; configuration file at
          <filename>/srv/tftpboot/boot/grub2/grub.cfg</filename>:
        </para>
<screen>&prompt.sudo;<command>cat &gt; /srv/tftpboot/boot/grub2/grub.cfg &lt;&lt; 'EOF'</command>
# Architecture detection and mapping
if [ "$grub_cpu" == "i386" ]; then
  set arch='x86_64'
elif [ "$grub_cpu" == "x86_64" ]; then
  set arch='x86_64'
elif [ "$grub_cpu" == "arm64" ]; then
  set arch='aarch64'
elif [ "$grub_cpu" == "powerpc" ]; then
  set arch='ppc64le'
fi

if [ "X$arch" == "X" ]; then
  echo "ERROR: No architecture found for ${grub_cpu}"
  exit
else
  echo "Running on $arch CPU architecture"
fi
export arch


# Network interface configuration for PXE-selected NIC
# - dracut based images on SLE-16:
set ipcfg="ifname=pxe0:${net_default_mac} ip=pxe0:dhcp"
export ipcfg
# - linuxrc installer on SLE-15:
set ifcfg="ifcfg=${net_default_mac}=dhcp"
export ifcfg

# Define typical serial console kernel parameter
#set sconsole="console=tty0 console=ttyS0,115200n8"
#export sconsole

# Load machine-specific configuration if available
if [ -s "${config}/${net_default_mac}/grub.cfg" ]; then
  ## Source a host specific configuration of grub menu:
  source "${config}/${net_default_mac}/grub.cfg"
else
  ## Source default grub boot menu:
  source "${prefix}/menu.cfg"
fi
EOF
</screen>
      </step>
    </procedure>
    <variablelist>
      <title>Key configuration elements</title>
      <varlistentry>
        <term>Architecture detection</term>
        <listitem>
          <para>
            Maps &grub; CPU types to distribution architectures, enabling unified menu entries that
            work across different hardware platforms
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Network interface management</term>
        <listitem>
          <para>
            Defines an <varname>${ipcfg}</varname> variable using the grub2 variable
            <varname>${net_default_mac}</varname> to activate dhcp only on the PXE boot interface
            named <literal>pxe0</literal>, avoiding network probing issues on multi-interface systems.
            </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Utility definitions</term>
        <listitem>
          <para>
            Defines a typical <varname>${sconsole}</varname> variable with serial console parameters.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Machine-specific configuration</term>
        <listitem>
          <para>
            Loads optional per-machine configuration files based on MAC address, enabling
            customized per-machine boot parameters and automated installation profiles
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="sles-pxe-server-configure-grub2-menu">
    <title>Creating the unified boot menu</title>
    <para>
      The boot menu uses variables from the main configuration to provide architecture-agnostic
      menu entries that automatically adapt to different hardware platforms and installation types.
    </para>
    <procedure xml:id="proc-create-grub-menu">
      <title>Setting up the menu.cfg file</title>
      <step>
        <para>
          Create the unified boot menu at <filename>/srv/tftpboot/boot/grub2/menu.cfg</filename>:
        </para>
<screen>&prompt.sudo;<command>cat &gt; /srv/tftpboot/boot/grub2/menu.cfg &lt;&lt; 'EOF'</command>
menuentry 'SLES-16.0 Online Installation' {
  linux  /boot/images/SLES-16.0/${arch}/linux showopts root=live:http://pxe.example.net/boot/images/SLES-16.0/${arch}/squashfs.img ${ipcfg} ${sconsole} ${autoinstall}
  initrd /boot/images/SLES-16.0/${arch}/initrd
}

menuentry 'SLES-16.0 Local Installation' {
  linux  /boot/images/SLES-16.0/${arch}/linux showopts root=live:http://pxe.example.net/boot/images/SLES-16.0/${arch}/squashfs.img inst.install_url=http://pxe.example.net/install/SLES-16.0/${arch} ${ipcfg} ${sconsole} ${autoinstall}
  initrd /boot/images/SLES-16.0/${arch}/initrd
}
EOF
</screen>
      </step>
    </procedure>
    <note>
      <title>Menu entry flexibility</title>
      <para>
        The menu entries use variables that are automatically populated based on the client
        architecture and configuration. The <varname>${arch}</varname> variable ensures the
        correct files are loaded.
       </para>
       <para>
        The optional <varname>${ipcfg}</varname> variable causes only the PXE-selected
        network interface to be set up.
       </para>
       <para>
        The optional <varname>${sconsole}</varname> variable enables a serial console in the
        installer system.
       </para>
    </note>
  </section>
  <section xml:id="sles-pxe-server-configure-grub2-machine-specific">
    <title>Machine-specific configurations</title>
    <para>
      For advanced deployments, you can create machine-specific configuration files that override
      default settings or provide automated installation parameters.
    </para>
    <procedure xml:id="proc-machine-specific-config">
      <title>Creating machine-specific configuration</title>
      <step>
        <para>
          Create a directory for machine-specific configurations:
        </para>
<screen>&prompt.sudo;<command>mkdir -p /srv/tftpboot/boot/config</command></screen>
      </step>
      <step>
        <para>
          For a machine with a MAC address <literal>aa:bb:cc:dd:ee:ff</literal>, create a specific
          configuration:
        </para>
<screen>&prompt.sudo;<command>mkdir -p /srv/tftpboot/boot/config/aa:bb:cc:dd:ee:ff</command></screen>
      </step>
      <step>
        <para>
          Create the machine-specific <filename>grub.cfg</filename>:
        </para>
<screen>&prompt.sudo;<command>cat &gt; /srv/tftpboot/boot/config/aa:bb:cc:dd:ee:ff/grub.cfg &lt;&lt; 'EOF'</command>
# Machine-specific configuration for aa:bb:cc:dd:ee:ff
set default='SLES-16.0 Full Installation'

# Activate the menu-entry after 5sec timeout
set timeout=5

# Use know predictable network interface name
set ipcfg="ip=eno1:dhcp"

# Set the autoinstall variable for this machine
set autoinstall="inst.auto=http://pxe.example.net/install/profiles/aa:bb:cc:dd:ee:ff/sles16.json"
export autoinstall

# Load the default menu
source "/boot/grub2/menu.cfg"
EOF
</screen>
        <para>
          Alternatively, provide own menu entry in the host-specific <filename>grub.cfg</filename>
          (e.g. generated for a specific boot attempt):
        </para>
<screen>&prompt.sudo;<command>cat &gt; /srv/tftpboot/boot/config/aa:bb:cc:dd:ee:ff/grub.cfg &lt;&lt; 'EOF'</command>
set default='SLES-16.0 Auto-Installation'
set timeout=5

menuentry 'SLES-16.0 Auto-Installation' {
  linux  /boot/images/SLES-16.0/${arch}/linux showopts root=live:http://pxe.example.net/boot/images/SLES-16.0/${arch}/squashfs.img inst.install_url=http://pxe.example.net/install/SLES-16.0/${arch} inst.auto=http://pxe.example.net/install/profiles/${net_default_mac}/sles16.json ip=eno1:dhcp
  initrd /boot/images/SLES-16.0/${arch}/initrd
}
EOF
</screen>
      </step>
    </procedure>
    <example xml:id="ex-machine-specific-parameters">
      <title>Common machine-specific parameters</title>
      <variablelist>
        <varlistentry>
          <term><varname>default</varname></term>
          <listitem>
            <para>
              Specifies which menu entry to boot automatically
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>timeout</varname></term>
          <listitem>
            <para>
              Sets the boot timeout in seconds
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>ipcfg</varname></term>
          <listitem>
            <para>
              Overrides network interface configuration for specific hardware
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><varname>autoinstall</varname></term>
          <listitem>
            <para>
              Provides machine-specific automated installation profile URLs
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </example>
  </section>
  <section xml:id="sles-pxe-server-configure-grub2-verify">
    <title>Verifying &grub; configuration</title>
    <para>
      After creating the configuration files, verify that the setup is correct, and all required
      files are in place.
    </para>
    <procedure xml:id="proc-verify-grub-config">
      <title>Verification steps</title>
      <step>
        <para>
          Check the &grub; directory structure:
        </para>
<screen>&prompt.user;<command>find /srv/tftpboot/boot/grub2 -type f -name "*.cfg" -o -name "*.efi" -o -name "core.*"</command></screen>
      </step>
      <step>
        <para>
          Verify the configuration file syntax by testing with &grub; tools:
        </para>
<screen>&prompt.user;<command>grub2-script-check /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
<screen>&prompt.user;<command>grub2-script-check /srv/tftpboot/boot/grub2/menu.cfg</command></screen>
      </step>
      <step>
        <para>
          Ensure proper file permissions:
        </para>
<screen>&prompt.sudo;<command>chmod -R 644 /srv/tftpboot/boot/grub2/*.cfg</command></screen>
<screen>&prompt.sudo;<command>find /srv/tftpboot/boot/grub2 -type d -exec chmod 0755 {} \;</command></screen>
      </step>
    </procedure>
    <important>
      <title>Configuration testing</title>
      <para>
        Test the &grub; configuration with actual PXE clients to ensure proper architecture
        detection and menu functionality. The <varname>${net_default_mac}</varname> variable is
        only available during actual network boot scenarios.
      </para>
    </important>
  </section>
  <section xml:id="sles-pxe-server-configure-grub2-troubleshooting">
    <title>Troubleshooting &grub; configuration</title>
    <para>
      Common issues and their solutions when working with &grub; PXE configurations. Each problem
      includes diagnostic steps and specific commands to resolve the issue.
    </para>
    <section xml:id="sles-pxe-server-grub2-troubleshoot-arch">
      <title>Architecture detection fails</title>
      <para>
        When &grub; fails to detect the correct architecture, clients may boot with incorrect
        binaries or fail to load altogether.
      </para>
      <procedure xml:id="proc-debug-arch-detection">
        <title>Debugging architecture detection</title>
        <step>
          <para>
            Add debug output to the &grub; configuration to see detected values:
          </para>
<screen>&prompt.sudo;<command>cat &gt;&gt; /srv/tftpboot/boot/grub2/grub.cfg &lt;&lt; 'EOF'</command>
# Debug architecture detection
echo "Detected grub_cpu: ${grub_cpu}"
echo "Mapped arch: ${arch}"
sleep 3
EOF</screen>
        </step>
        <step>
          <para>
            Test the configuration syntax:
          </para>
<screen>&prompt.user;<command>grub2-script-check /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
        </step>
        <step>
          <para>
            If architecture mapping is incomplete, extend the detection logic:
          </para>
<screen>&prompt.sudo;<command>sed -i '/elif \[ "$grub_cpu" == "powerpc" \]/a\\nelif [ "$grub_cpu" == "riscv64" ]; then\n  set arch='\''riscv64'\''\\' /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
        </step>
        <step>
          <para>
            Verify the architecture-specific directories exist:
          </para>
<screen>&prompt.user;<command>ls -la /srv/tftpboot/boot/grub2/</command></screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-grub2-troubleshoot-network">
      <title>Network interface not found</title>
      <para>
        Some firmware implementations may not set the <varname>${net_default_mac}</varname>
        variable correctly, causing network configuration failures.
      </para>
      <procedure xml:id="proc-debug-network-interface">
        <title>Diagnosing network interface issues</title>
        <step>
          <para>
            Add debug output to check network variables:
          </para>
<screen>&prompt.sudo;<command>sed -i '/set ipcfg=/i\\necho "Default MAC: ${net_default_mac}"\necho "Network variables set"\nsleep 2' /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
        </step>
        <step>
          <para>
            Create a fallback network configuration:
          </para>
<screen>&prompt.sudo;<command>cat &gt;&gt; /srv/tftpboot/boot/grub2/grub.cfg &lt;&lt; 'EOF'</command>

# Fallback network configuration if net_default_mac is empty
if [ "X${net_default_mac}" == "X" ]; then
  set ipcfg="ip=dhcp"
  set ifcfg="ifcfg=*=dhcp"
  echo "WARNING: Using fallback network configuration"
  sleep 2
fi
EOF
</screen>
        </step>
        <step>
          <para>
            Test network configuration with a specific interface:
          </para>
<screen>&prompt.sudo;<command>echo 'set ipcfg="ip=eno1:dhcp"' &gt; /srv/tftpboot/boot/config/test-network.cfg</command></screen>
        </step>
        <step>
          <para>
            Verify network interface names on the target system:
          </para>
<screen>&prompt.user;<command>ip link show</command></screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-grub2-troubleshoot-file-paths">
      <title>File paths not found</title>
      <para>
        Incorrect file paths prevent &grub; from loading kernel and initrd files, causing boot
        failures.
      </para>
      <procedure xml:id="proc-debug-file-paths">
        <title>Verifying file path accessibility</title>
        <step>
          <para>
            Check if the installer files exist in the expected locations:
          </para>
<screen>&prompt.user;<command>find /srv/tftpboot/boot/images -name "linux" -o -name "initrd" -o -name "squashfs.img"</command></screen>
        </step>
        <step>
          <para>
            Verify TFTP access to boot files:
          </para>
<screen>&prompt.user;<command>tftp localhost -c get /boot/grub2/grub.cfg /tmp/test-grub.cfg</command></screen>
        </step>
        <step>
          <para>
            Test HTTP access to installer files:
          </para>
<screen>&prompt.user;<command>curl -I http://localhost/boot/images/SLES-16.0/x86_64/linux</command></screen>
        </step>
        <step>
          <para>
            Check file permissions and ownership:
          </para>
<screen>&prompt.user;<command>ls -la /srv/tftpboot/boot/images/SLES-16.0/*/</command></screen>
        </step>
        <step>
          <para>
            Fix permissions if needed:
          </para>
<screen>&prompt.sudo;<command>chmod -R 644 /srv/tftpboot/boot/images/</command></screen>
<screen>&prompt.sudo;<command>find /srv/tftpboot/boot/images/ -type d -exec chmod 755 {} \;</command></screen>
        </step>
        <step>
          <para>
            Verify symbolic links are not broken:
          </para>
<screen>&prompt.user;<command>find /srv/tftpboot/boot/images/ -type l -exec ls -la {} \;</command></screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-grub2-troubleshoot-efi">
      <title>EFI boot failures</title>
      <para>
        EFI and Secure Boot issues can prevent proper bootloader initialization or cause
        authentication failures.
      </para>
      <procedure xml:id="proc-debug-efi-boot">
        <title>Diagnosing EFI boot problems</title>
        <step>
          <para>
            Verify Secure Boot files are present:
          </para>
<screen>&prompt.user;<command>ls -la /srv/tftpboot/boot/grub2/x86_64-efi/*.efi</command></screen>
        </step>
        <step>
          <para>
            Check that shim (bootx64.efi or shim.efi), grub.efi and MokManager.efi files are properly copied:
          </para>
<screen>&prompt.user;<command>file /srv/tftpboot/boot/grub2/x86_64-efi/bootx64.efi</command></screen>
        </step>
        <step>
          <para>
            Verify EFI file integrity:
          </para>
<screen>&prompt.user;<command>sha256sum /srv/tftpboot/boot/grub2/x86_64-efi/*.efi</command></screen>
        </step>
        <step>
          <para>
            Test if files are accessible via TFTP:
          </para>
<screen>&prompt.user;<command>tftp localhost -c get /boot/grub2/x86_64-efi/bootx64.efi /tmp/test-shim.efi</command></screen>
        </step>
        <step>
          <para>
            For aarch64 systems, verify ARM64 EFI files:
          </para>
<screen>&prompt.user;<command>ls -la /srv/tftpboot/boot/grub2/arm64-efi/*.efi</command></screen>
        </step>
        <step>
          <para>
            Check that the DHCP configuration provides the correct bootloader paths:
          </para>
<screen>&prompt.user;<command>grep -n "bootx64.efi\|shim.efi\|bootaa64.efi"
/etc/dnsmasq.d/dhcp.conf /etc/kea/kea-dhcp?.conf /etc/dhcpd?.conf</command></screen>
        </step>
        <step>
          <para>
            If files are missing, recopy from the ISO mounted to /mnt or from the shim package files:
          </para>
<screen>&prompt.sudo;<command>cp -v /mnt/EFI/BOOT/*.efi /srv/tftpboot/boot/grub2/x86_64-efi/</command></screen>
<screen>&prompt.sudo;<command>cp -pL /usr/share/efi/x86_64/*.efi /srv/tftpboot/boot/grub2/x86_64-efi/</command></screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-grub2-troubleshoot-menu">
      <title>Menu entries not loading</title>
      <para>
        When &grub; loads but menu entries fail or display errors, the issue is often related to
        variable expansion or file references.
      </para>
      <procedure xml:id="proc-debug-menu-entries">
        <title>Debugging menu entry problems</title>
        <step>
          <para>
            Test menu configuration syntax:
          </para>
<screen>&prompt.user;<command>grub2-script-check /srv/tftpboot/boot/grub2/menu.cfg</command></screen>
        </step>
        <step>
          <para>
            Add debug output to menu entries:
          </para>
<screen>&prompt.sudo;<command>sed -i '/linux_kernel.*{images}/i\\necho "Loading: ${images}/SLES-16.0/${arch}/linux"\necho "Architecture: ${arch}"' /srv/tftpboot/boot/grub2/menu.cfg</command></screen>
        </step>
        <step>
          <para>
            Verify variable expansion works correctly:
          </para>
<screen>&prompt.sudo;<command>cat &gt; /srv/tftpboot/boot/grub2/debug-menu.cfg &lt;&lt; 'EOF'</command>
menuentry 'Debug Variables' {
  echo "arch = ${arch}"
  echo "images = ${images}"
  echo "ipcfg = ${ipcfg}"
  sleep 5
}
EOF
</screen>
        </step>
        <step>
          <para>
            Test with a simplified menu entry:
          </para>
<screen>&prompt.sudo;<command>cat &gt; /srv/tftpboot/boot/grub2/simple-menu.cfg &lt;&lt; 'EOF'</command>
menuentry 'Simple Test' {
  linux /boot/images/SLES-16.0/x86_64/linux
  initrd /boot/images/SLES-16.0/x86_64/initrd
}
EOF
</screen>
        </step>
        <step>
          <para>
            Load the test menu temporarily:
          </para>
<screen>&prompt.sudo;<command>sed -i 's|source "${prefix}/menu.cfg"|source "${prefix}/simple-menu.cfg"|' /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
        </step>
        <step>
          <para>
            Restore the original menu after testing:
          </para>
<screen>&prompt.sudo;<command>sed -i 's|source "${prefix}/simple-menu.cfg"|source "${prefix}/menu.cfg"|' /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-grub2-troubleshoot-logging">
      <title>Enabling detailed logging</title>
      <para>
        For persistent issues, enable comprehensive logging to capture detailed information about
        the boot process.
      </para>
      <procedure xml:id="proc-enable-grub-logging">
        <title>Setting up &grub; debug logging</title>
        <step>
          <para>
            Create a debug version of the main configuration:
          </para>
<screen>&prompt.sudo;<command>cp /srv/tftpboot/boot/grub2/grub.cfg /srv/tftpboot/boot/grub2/grub.cfg.backup</command></screen>
        </step>
        <step>
          <para>
            Add comprehensive debug output:
          </para>
<screen>&prompt.sudo;<command>cat &gt; /srv/tftpboot/boot/grub2/debug.cfg &lt;&lt; 'EOF'</command>
# Debug configuration for GRUB troubleshooting
set debug=all
set pager=1

echo "=== GRUB Debug Information ==="
echo "grub_cpu: ${grub_cpu}"
echo "grub_platform: ${grub_platform}"
echo "net_default_mac: ${net_default_mac}"
echo "net_default_server: ${net_default_server}"
echo "============================="
sleep 5
EOF
</screen>
        </step>
        <step>
          <para>
            Include debug configuration in main file:
          </para>
<screen>&prompt.sudo;<command>sed -i '1i\source "${prefix}/debug.cfg"' /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
        </step>
        <step>
          <para>
            Monitor TFTP logs during boot attempts:
          </para>
<screen>&prompt.user;<command>sudo journalctl -f -u tftp.socket</command></screen>
        </step>
        <step>
          <para>
            Monitor DHCP logs for PXE requests:
          </para>
<screen>&prompt.user;<command>sudo journalctl -f -u dhcpd</command></screen>
        </step>
        <step>
          <para>
            Disable debug mode after troubleshooting:
          </para>
<screen>&prompt.sudo;<command>sed -i '/source "${prefix}\/debug.cfg"/d' /srv/tftpboot/boot/grub2/grub.cfg</command></screen>
        </step>
      </procedure>
    </section>
  </section>
  <section xml:id="sles-pxe-server-configure-grub2-next-steps">
    <title>Next steps</title>
    <para>
      With &grub; properly configured, you can proceed to:
    </para>
    <itemizedlist>
      <listitem>
        <para>
          Configure HTTP and TFTP services to serve the boot files and installer content
        </para>
      </listitem>
      <listitem>
        <para>
          Set up DHCP services to direct PXE clients to the appropriate bootloaders
        </para>
      </listitem>
      <listitem>
        <para>
          Test the complete PXE boot process on target hardware
        </para>
      </listitem>
    </itemizedlist>
    <para>
      The flexible &grub; configuration system provides a foundation for sophisticated PXE
      deployment scenarios, supporting multiple architectures and installation types through a
      unified interface.
    </para>
  </section>
</topic>
