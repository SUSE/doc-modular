<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
<!ENTITY % entities SYSTEM "../common/generic-entities.ent">
%entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="sudo-creating-custom-configuration"
       role="task" xml:lang="en"
       xmlns="http://docbook.org/ns/docbook" version="5.2"
       xmlns:its="http://www.w3.org/2005/11/its"
       xmlns:xi="http://www.w3.org/2001/XInclude"
       xmlns:xlink="http://www.w3.org/1999/xlink"
       xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Creating custom &sudo; configurations</title><!-- can be changed via merge
         in the assembly -->
    <!-- add author's e-mail -->
    <meta name="maintainer" content="jana.jaeger@suse.com" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
        Learn how to build a simple example custom &sudo; configuration and
        expand it step by step. Create groups and use aliases to keep your custom
        configuration lean and efficient.
      </para>
    </abstract>
  </info>
  <warning>
    <title>Example configurations are for demonstration purposes only</title>
    <para>
      The example rules outlined below are purely for demonstration purposes.
      Use them to understand the general syntax of &sudo; configuration files.
      Do not use them in real-world setups, because they
      do not reflect the complexity of these environments.
    </para>
  </warning>
  <section xml:id="sudo-creating-custom-configuration-bp">
    <title>&sudo; configuration best practices</title>
    <para>
      Before your start, here are a few ground rules for maintaining &sudo;
      configurations:
    </para>
    <variablelist>
      <varlistentry>
        <term>Always use <command>visudo</command> to edit &sudo; configuration files</term>
        <listitem>
          <para>
            Any changes to the &sudo; configuration should be done using the
            <command>visudo</command> command. <command>visudo</command> is a
            tailor-made tool that allows you to edit the &sudo; configuration
            files and runs basic syntax checks, making sure that the
            configuration remains intact and functional. A faulty &sudo;
            configuration can result in a user being locked out of their own system.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Always create custom configurations under <filename>/etc/sudoers.d/</filename></term>
        <listitem>
          <para>
            Custom configurations must reside under
            <filename>/etc/sudoers.d/</filename> to be pulled in by &sudo;.
            Settings in the custom configuration files take precedence over the
            ones in the default configuration in <filename>/etc/sudoers</filename>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Always mind the order in which configurations are read</term>
        <listitem>
          <para>
            To make sure the custom configurations are read in the correct order, prefix them with numbers.
            Use leading zeroes to establish the order in which the files are read. For example,
            <filename>01_myfirstconfig</filename> is parsed before
            <filename>10_myotherconfig</filename>. If a directive has been set
            in a file that is read before another file that contains
            conflicting information, the last-read directive is applied.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Always use descriptive file names</term>
        <listitem>
          <para>
            Use file names that hint at what the configuration file does. This
            helps you keep track of what your &sudo; setup is supposed to do.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <!-- this only applies to some ALP-based products. Don't copy over to SLE!-->
    <!-- entities will be added as soon as we have proper products out there -->
    <tip>
      <title>&sudo; configuration and immutable file systems</title>
      <para>
        An immutable file system is a file system that cannot be changed once it
        has been installed. It is accessed read-only. If the &suse; product you
        are using relies on an immutable file system, the &sudo; default
        configuration shipped with the product is installed under
        <filename>/usr/etc/sudoers</filename> and any pre-configured adjustments
        reside under <filename>/usr/etc/sudoers.d/</filename>.
      </para>
      <para>
        Your own custom configurations are located under
        <filename>/etc/sudoers.d/</filename> and take precedence over anything
        that is provided in <filename>/usr/etc/sudoers.d/</filename>. The
        <command>visudo</command> command opens <filename>/usr/etc/sudoers</filename>
        and saves the changed file to <filename>/etc/sudoers</filename>, if
        there was no prior <filename>sudoers</filename> file. If there was
        already one, <command>visudo</command> opens and writes that one. The
        instance located under <filename>/etc/</filename> takes precedence over
        the one that is kept under <filename>/usr/etc/</filename>. This way,
        user-made configuration adjustments will not get broken upon updates.
      </para>
    </tip>
  </section>

  <section xml:id="sudo-creating-custom-config-single-user">
    <title>Create a user-specific configuration file</title>
    <para>
      Create a &sudo; configuration file that allows a normal user (&exampleuser;)
      to use the <command>useradd</command> command with their own password
      instead of the &rootuser; password.
    </para>
    <example xml:id="ex-sudo-custom-config-user">
      <title>Create a user-specific configuration file</title>
      <procedure>
        <step>
          <para>
            As system administrator (&rootuser;), create a custom configuration
            file that holds the new user-specific directives by starting
            <command>visudo</command>. Use both numbering and a descriptive name:
          </para>
          <screen>
&prompt.root;<command>visudo -f /etc/sudoers.d/02_usermanagement</command>
          </screen>
        </step>
        <step>
          <para>
            Create a rule that allows &exampleuser; to execute the
            <command>/usr/sbin/useradd</command> binary in the entire environment
            that this &sudo; configuration is applied to:
          </para>
          <screen>
&exampleuser_plain;<co xml:id="co-who"/> ALL<co xml:id="co-where"/> = /usr/sbin/useradd<co xml:id="co-what"/>
          </screen>
          <calloutlist>
            <callout arearefs="co-who">
              <para>
                Specify the user or group. List users by name or
                <literal>#UID</literal>, and groups by <literal>%GROUPNAME</literal>.
                If you have several items here, separate them with commas. To
                negate entries, use <literal>!</literal>.
              </para>
            </callout>
            <callout arearefs="co-where">
              <para>
                Specify one or several (separated by commas) hosts. Use
                (fully qualified) host names or IP addresses. Add
                <literal>ALL</literal> to enforce this setting globally
                across all hosts. Use <literal>!</literal> for negations.
              </para>
            </callout>
            <callout arearefs="co-what">
              <para>
                Specify one or several executables (separated by commas). When
                specifying them, make sure to mind the following rules:
              </para>
              <variablelist>
                <varlistentry>
                  <term><command>/usr/sbin/useradd</command></term>
                  <listitem>
                    <para>
                      Without any additional options added, this allows the
                      execution of every possible <command>useradd</command> command.
                    </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term><command>/usr/sbin/useradd -c</command></term>
                  <listitem>
                    <para>
                      If you explicitly specify an option, then that option is
                      the only one that is allowed. Nothing else would be available
                      to the user you specified above.
                    </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term><command>/usr/sbin/useradd ""</command></term>
                  <listitem>
                    <para>
                      This would just let the user invoke a mere
                      <command>useradd</command> without any option at all.
                    </para>
                  </listitem>
                </varlistentry>
              </variablelist>
              <para>
                In the example above, you would want to either allow all
                options and subcommands or limit them to a few for security
                reasons, but forbidding a user to specify any option at all
                would be pointless in this context.
              </para>
            </callout>
          </calloutlist>
        </step>
          <step>
          <para>
            Save the configuration, leave the editor and open a second shell to test
            whether &sudo; honors your new configuration.
          </para>
        </step>
      </procedure>
    </example>
  </section>

  <section xml:id="sudo-creating-custom-config-group">
    <title>Create custom configurations by grouping items</title>
    <para>
      Modify the configuration from <xref linkend="ex-sudo-custom-config-user"/>
      so that a group of named users can run the <command>useradd</command>
      command without the need for the &rootuser; password. Also, add the
      <command>usermod</command> and <command>userdel</command> to the list of
      commands available to this group.
    </para>
    <example xml:id="ex-sudo-custom-config-group">
      <title>Create custom configurations by grouping items</title>
      <procedure>
        <step>
          <para>
            To modify the example configuration, open it as system administrator with
            <command>visudo</command>:
          </para>
          <screen>&prompt.root;<command>visudo /etc/sudoers.d/02_usermanagement</command>
          </screen>
        </step>
        <step>
          <para>
            Add more users to the rule in a comma-separated list:
          </para>
          <screen>&exampleuser_plain;, &exampleuserII_plain; ALL = /usr/sbin/useradd
          </screen>
        </step>
        <step>
          <para>
            To allow the listed users to execute a list of commands, specify the
            commands as a comma-separated list:
          </para>
          <screen>&exampleuser_plain;, &exampleuserII_plain; ALL = /usr/sbin/useradd, /usr/sbin/usermod, /usr/sbin/userdel
          </screen>
        </step>
             <step>
          <para>
            Save the configuration, leave the editor and open a second shell to test
            whether &sudo; honors your new configuration.
          </para>
        </step>
      </procedure>
    </example>
  </section>
  <section xml:id="sudo-creating-custom-config-aliases">
    <title>Simplify configurations by applying aliases</title>
    <para>
      Use aliases to simplify your custom configuration from
      <xref linkend="ex-sudo-custom-config-group"/> even further. Grouping items
      helps to a certain extent, but using global aliases for users,
      commands and hosts is the most efficient way to keep a clean and
      lean &sudo; configuration.
    </para>
    <para>
      Using aliases and groups instead of lists is a much better way to address
      changes in your setup. Should a user leave, just remove them from the
      global <literal>User_Alias</literal> declaration in your alias declaration
      file instead of scouring all the separate custom configuration files.
      The same procedure applies for any other type of alias
      (<literal>Host_Alias</literal>, <literal>Cmnd_Alias</literal>
      and <literal>Runas_Alias</literal>).
    </para>
    <example xml:id="ex-sudo-custom-config-alias">
      <title>Simplify configurations by applying aliases</title>
      <procedure>
        <step>
          <para>
            Create a new file to hold your global alias definitions:
          </para>
          <screen>&prompt.root;<command>visudo /etc/sudoers.d/01_aliases</command>
</screen>
        </step>
        <step>
          <para>
            Add the following line to create the <literal>TEAMLEADERS</literal>
            alias:
          </para>
          <screen>User_Alias    TEAMLEADERS = &exampleuser_plain;, &exampleuserII_plain;
          </screen>
        </step>
        <step>
          <para>
            Add the following line to create the <literal>USERMANAGEMENT</literal> alias:
          </para>
          <screen>Cmnd_Alias    USERMANAGEMENT = /usr/sbin/useradd, /usr/sbin/usermod, /usr/sbin/userdel
          </screen>
        </step>
        <step>
          <para>
            Save your changes and exit <command>visudo</command>.
          </para>
        </step>
        <step>
          <para>
            As system administrator, start <command>visudo</command> to edit the
            example configuration file:
          </para>
          <screen>&prompt.root;<command>visudo -f /etc/sudoers.d/02_usermanagement</command>
          </screen>
        </step>
        <step>
          <para>
            Delete the previous rule and replace it with the following rule that
            uses the aliases you have just defined above:
          </para>
          <screen>TEAMLEADERS ALL = USERMANAGEMENT
          </screen>
        </step>
        <step>
          <para>
            To let all the users defined by <literal>User_Alias</literal> use
            their own password instead of the &rootuser; password, add
            the following line:
          </para>
          <screen>Defaults:TEAMLEADERS !targetpw</screen>
        </step>
        <step>
          <para>
            Save the configuration, leave the editor and open a second shell to test
            whether &sudo; honors your new configuration.
          </para>
        </step>
      </procedure>
    </example>
    <note>
      <title>For more information</title>
      <para>
        Find a more detailed description of the &sudo; configuration syntax in
        <xref linkend="sudo-user-authorization"/> and refer to the man page of
        &sudo;.
      </para>
    </note>
  </section>
</topic>
