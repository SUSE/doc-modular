<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="tls-creating-private-ca"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Creating a private certificate authority</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <xi:include href="../snippets/tls-certificates-introduction.xml"/>
    </abstract>
  </info>
  <para>
    If you do not plan to get the server certificate signed by a trusted CA, you
    have to create your private CA. Such approach is fine for testing and
    internal scenarios, but not for production network applications.
  </para>
  <procedure>
    <itemizedlist>
      <title>Rrquirements</title>
      <xi:include href="../snippets/requirement-root-or-sudo-privileges.xml"/>
    </itemizedlist>
    <step>
      <para>
        Generate a private key for your private CA. The following command
        creates a new 2048 bits long RSA key using the SHA-256 hash algorithm.
        During its creation, you will be asked for an encryption passphrase.
      </para>
<screen>&prompt.user;openssl req -sha256 -newkey rsa:2048 -subj "/CN=myRootCA/C=CZ/L=Prague" -keyout <replaceable>myRootCA.key</replaceable></screen>
      <para>
        Replace the <option>-subj</option> value with your suitable string.
      </para>
    </step>
    <step>
      <para>
        Create a certificate signed by the generated private key. You will be
        asked for the encryption passphrase.
      </para>
<screen>&prompt.user;openssl req -key <replaceable>myRootCA.key</replaceable> -new -x509 -days 1820 -subj "/CN=myRootCA/C=CZ/L=Prague" -out <replaceable>myRootCA.crt</replaceable></screen>
      <para>
        The generated <replaceable>myRootCA.crt</replaceable> is a self-signed
        CA certificate. You can use it to sign other certificates for five
        years. Replace the <option>-subj</option> value with your suitable
        string.
      </para>
    </step>
    <step>
      <para>
        Secure the CA certificate by restricting its permissions and ownership
        so that only the &rootuser; can read it.
      </para>
<screen>&prompt.sudo;chown &rootuser;:&rootuser; <replaceable>myRootCA.crt</replaceable>
&prompt.sudo;chmod 600 <replaceable>myRootCA.crt</replaceable></screen>
    </step>
    <step performance="optional">
      <para>
        Verify the validity of the CA private key.
      </para>
<screen>&prompt.user;openssl pkey -check -in <replaceable>myRootCA.key</replaceable>
Enter pass phrase for myRootCA.key:
Key is valid
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCq/oAhZ0VGSsGb
[...]
8q3vKA+KRtxhMgW1f50U2qo=
-----END PRIVATE KEY-----</screen>
    </step>
    <step performance="optional">
      <para>
        Verify your private CA by displaying its basic data. It must include the
        <literal>CA:TRUE</literal> flag.
      </para>
<screen>&prompt.user;openssl x509 -in <replaceable>myRootCA.crt</replaceable> -text -noout
Certificate:
[...]
    Signature Algorithm: sha256WithRSAEncryption
    Issuer: CN = myRootCA, C = CZ, L = Prague
    Validity
        Not Before: Apr 23 14:41:53 2024 GMT
        Not After : Apr 17 14:41:53 2029 GMT
    Subject: CN = myRootCA, C = CZ, L = Prague
    X509v3 extensions:
[...]
        X509v3 Basic Constraints: critical
          CA:TRUE
[...]</screen>
    </step>
  </procedure>
  <itemizedlist>
    <title>Next steps</title>
    <listitem>
      <para>
        To trust the server certificate, client machines need to know the
        private CA certificate with which the server private certificate was
        signed. Refer to <xref linkend="tls-adding-new-certificates"/> for
        details about storing CA certificates in a system-wide certificate store
        on the client.
      </para>
    </listitem>
    <listitem>
      <para>
        Create a server private TLS key as described in
        <xref
        linkend="tls-creating-private-key"/>.
      </para>
    </listitem>
  </itemizedlist>
</topic>
