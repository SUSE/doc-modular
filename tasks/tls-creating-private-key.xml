<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="tls-creating-private-key"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Creating a private TLS key</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <xi:include href="../snippets/tls-certificates-introduction.xml"/>
    </abstract>
  </info>
  <para>
    A server needs a private TLS key to encrypt data required by a client.
    The following procedure describes how to generate it.
  </para>
  <procedure>
    <itemizedlist>
      <title>Requirements</title>
      <xi:include href="../snippets/requirement-root-or-sudo-privileges.xml"/>
    </itemizedlist>
    <step>
      <para>
        Generate a private TLS key. The following example generates an
        unencrypted 256-bit ECDSA key.
      </para>
      <tip>
        <para>
          You can verify if ECDSA keys are supported by listing its available
          elliptic curves with the <command>openssl ecparam
          -list_curves</command> command.
        </para>
      </tip>
<screen>&prompt.user;openssl ecparam -name prime256v1 -genkey -out <replaceable>server.key</replaceable></screen>
      <para>
        The speed of generating the key depends on the hardware, the selected
        encryption algorithm, and the length of the key.
      </para>
    </step>
    <step>
      <para>
        Move the generated private key to a safe location on the server and
        secure it by restricting its permissions and ownership so that only the
        &rootuser; can read it.
      </para>
<screen>&prompt.sudo;chown &rootuser;:&rootuser; <replaceable>server.key</replaceable>
&prompt.sudo;chmod 600 <replaceable>server.key</replaceable></screen>
    </step>
    <step performance="optional">
      <para>
        Verify the consistency of the private key.
      </para>
<screen>&prompt.sudo;openssl pkey -check -in <replaceable>server.key</replaceable>
Key is valid
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgUnW551Qru4+pbWqu
JRXQVFi45N1j+qmx7dEnr+8eox+hRANCAAR+rRLHBGjq2H2jOq09efVt99JB/R7h
QkDLjVMa9jemVH1g3YiVIEAHyCVjms2rC06lkU1S+z8WsRjh6A/ev8//
-----END PRIVATE KEY-----</screen>
    </step>
  </procedure>
  <itemizedlist>
    <title>Next steps</title>
    <listitem>
      <para>
        Create a certificate signing request (CSR) so that you preferred CA can
        sign and validate it. Find more details in
        <xref
          linkend="tls-creating-certificate-signing-request"/>.
      </para>
    </listitem>
  </itemizedlist>
</topic>
