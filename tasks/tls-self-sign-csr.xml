<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="tls-self-sign-csr"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Self-signing a CSR with a private CA</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <xi:include href="../snippets/tls-certificates-introduction.xml"/>
    </abstract>
  </info>
  <para>
    Establishing TLS encrypted communication requires that a certificate
    authority (CA) signs the certificate signing request (CSR). For testing or
    internal purposes, you can sign the CRS yourself creating a
    <emphasis>self-signed</emphasis> certificate.
  </para>
  <procedure>
    <itemizedlist>
      <title>REQUIREMENTS</title>
      <listitem>
        <para>
          You created a private TLS key as described in
          <xref linkend="tls-creating-private-key"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          You created a CSR file as described in
          <xref linkend="tls-creating-certificate-signing-request"/>.
        </para>
      </listitem>
    </itemizedlist>
    <step performance="optional">
      <para>
        Prepare an optional configuration file that specifies additional server
        and client extensions, for example:
      </para>
<screen>&prompt.user;cat <replaceable>example_ssl_ext.cnf</replaceable>
[ server-cert ]
keyUsage = digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ client-cert ]
keyUsage = digitalSignature
extendedKeyUsage = clientAuth
</screen>
    </step>
    <step>
      <para>
        Self-sign the CSR, optionally using the extension configuration file.
      </para>
<screen>&prompt.user;openssl x509 -req -days 3650 -in <replaceable>server.csr</replaceable> \
-out <replaceable>server.crt</replaceable> -signkey <replaceable>server.key</replaceable> \
-extfile <replaceable>example_ssl_ext.cnf</replaceable> -extensions server-cert</screen>
      <para>
        The certificate will be valid for 10 years, adjust the value to your
        needs. After this period, you must create a new CSR and have a CA sign
        the certificate.
      </para>
      <para>
        The <filename>server.crt</filename> file will be created that includes
        the signed certificate.
      </para>
    </step>
    <step performance="optional">
      <para>
        Verify that the data included in the resulting certificate match your
        requirements.
      </para>
<screen>&prompt.user;openssl x509 -text -noout -in <replaceable>server.crt</replaceable>
[...]
Issuer: C = CZ, ST = Some-State, L = Prague, O = Example organization, CN = www.&exampledomain2;, emailAddress = &exampleuserII;@&exampledomain2;
Validity
    Not Before: Apr 15 09:18:11 2024 GMT
    Not After : Apr 15 09:18:11 2034 GMT
Subject: C = CZ, ST = Some-State, L = Prague, O = Example organization, CN = www.&exampledomain2;, emailAddress = &exampleuserII;@&exampledomain2;
Subject Public Key Info:
    Public Key Algorithm: id-ecPublicKey[...]
X509v3 extensions:
        X509v3 Key Usage:
            Digital Signature, Key Encipherment
        X509v3 Extended Key Usage:
            TLS Web Server Authentication
[...]</screen>
    </step>
  </procedure>
  <itemizedlist>
    <title>Next steps</title>
    <listitem>
      <para>
        Install the certificate on the server that will use it for providing
        encrypted content.
      </para>
    </listitem>
    <listitem>
      <para>
        Optionally, install the certificate on clients that that will use it for
        decrypting server-encrypted communication.
      </para>
    </listitem>
  </itemizedlist>
</topic>
