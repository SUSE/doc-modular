<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<topic xml:id="tls-troubleshooting"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>TLS troubleshooting</title>
    <meta name="maintainer" content="tbazant@suse.com" its:translate="no"/>
    <abstract>
      <xi:include href="../snippets/tls-certificates-introduction.xml"/>
    </abstract>
  </info>
  <para>
    This topic describes how to examine TLS certificates.
  </para>
  <section xml:id="tls-troubleshooting-verify-certificates">
    <title>How do I examine a TLS certificate?</title>
    <para>
      To review a server certificate that is available locally as a file, use
      the following command:
    </para>
<screen>&prompt.user;openssl x509 -in <replaceable>server.crt</replaceable> -noout -text
Certificate:
  Data:
      Version: 3 (0x2)
      Serial Number:
          6a:43:f5:55:ef:03:ee:0e:23:c8:99:82:71:39:f2:22:1a:da:53:db
      Signature Algorithm: ecdsa-with-SHA256
      Issuer:<co xml:id="tls-troubleshooting-verify-certificates-issuer"/> C = CZ, ST = Some-State, L = Prague, O = Example organization, CN = www.example.org, emailAddress = wilber@example.org
      Validity<co xml:id="tls-troubleshooting-verify-certificates-validity"/>
          Not Before: Apr 15 09:30:31 2024 GMT
          Not After : May 15 09:30:31 2024 GMT
      Subject:<co xml:id="tls-troubleshooting-verify-certificates-subject"/> C = CZ, ST = Some-State, L = Prague, O = Example organization, CN = www.example.org, emailAddress = wilber@example.org
      Subject Public Key Info:
          Public Key Algorithm: id-ecPublicKey
              Public-Key: (256 bit)
              pub:
                  04:7e:ad:12:c7:04:68:ea:d8:7d:a3:3a:ad:3d:79:
[...]
              ASN1 OID: prime256v1
              NIST CURVE: P-256
      X509v3 extensions:
          X509v3 Subject Alternative Name:<co xml:id="tls-troubleshooting-verify-certificates-altname"/>
            DNS:*.&exampledomain2;, DNS:&exampledomain2;
          X509v3 Key Usage:<co
          xml:id="tls-troubleshooting-verify-certificates-keyusage"/>
              Digital Signature, Key Encipherment
          X509v3 Extended Key Usage:
              TLS Web Server Authentication
  Signature Algorithm: ecdsa-with-SHA256
       30:46:02:21:00:a8:4f:7d:16:f2:93:01:b9:3d:31:e3:c6:6c:
[...]</screen>
    <calloutlist>
      <callout arearefs="tls-troubleshooting-verify-certificates-issuer">
        <para>
          Describes who issued the certificate. It shows only the parent level
          issuer, no the top level issuer from the certificate chain.
        </para>
      </callout>
      <callout arearefs="tls-troubleshooting-verify-certificates-validity">
        <para>
          Shows the time period when the certificate is valid.
        </para>
      </callout>
      <callout arearefs="tls-troubleshooting-verify-certificates-subject">
        <para>
          Describes the server that uses the certificate. The most important
          attribute is <literal>CN</literal> (Common Name) as it contains the
          fully qualified domain name of the server that can use this
          certificate. <literal>CN</literal> can contain wildcards, for example,
          <literal>*.&exampledomain2;</literal>. In this case, the certificate
          can be used by multiple servers on the same domain
          <literal>&exampledomain2;</literal>.
        </para>
      </callout>
      <callout arearefs="tls-troubleshooting-verify-certificates-altname">
        <para>
          When used, it overrides the subject's <literal>CN</literal>
          specification. It can contain <literal>DNS:</literal> entries for
          domain names and <literal>IP:</literal> entries for IP addresses.
        </para>
      </callout>
      <callout arearefs="tls-troubleshooting-verify-certificates-keyusage">
        <para>
          Specifies purposes for which the certificate can be used.
        </para>
      </callout>
    </calloutlist>
  </section>
  <section xml:id="tls-troubleshooting-download-certificate">
    <title>How do I download server TLS certificate files?</title>
    <para>
      The following command downloads just the server certificate from the
      example server <replaceable>suse.com</replaceable>. Replace it with the
      domain name of the server you want to examine.
    </para>
<screen>&prompt.user;echo | openssl s_client -showcerts -connect suse.com:443 2>/dev/null \
| openssl x509 -out 1.pem</screen>
    <para>
      Majority of public servers use several subordinate CAs in the certificate
      chain. To download the whole certificate chain into individual files, use
      the following command:
    </para>
<screen>&prompt.user;echo | openssl s_client -showcerts -connect suse.com:443 2>/dev/null \
| awk -v RS="-----BEGIN CERTIFICATE-----" \
'NR>1{sub(/-----END CERTIFICATE-----.*/,"-----END CERTIFICATE-----"); \
print RS$0>NR-1".pem"}'</screen>
    <para>
      The command writes all certificate files named increasingly
      <filename>1.pem</filename>, <filename>2.pem</filename> and so on up to the
      last certificate in the chain.
    </para>
  </section>
  <section xml:id="tls-troubleshooting-verify-certificates-trust-chain">
    <title>How do I verify the whole TLS certificate chain?</title>
    <para>
      The client host normally has a collection of root CAs and verifies the
      server certificates against them. But the certificate that the server
      provides can be a subordinate CA. To trust the server's certificate, the
      client needs to verify its complete certificate chain. The server sends
      all certificates as part of its <literal>Server Hello</literal> message
      and you can download them as described in
      <xref linkend="tls-troubleshooting-download-certificate"/>.
    </para>
    <para>
      The <command>openssl</command> command uses the <option>-subject_hash
      </option> and <option>-issuer_hash</option> options to retrieve the
      subject and issuer hashes from a certificate, for example:
    </para>
<screen>&prompt.user;openssl x509 -in 1.pem -noout -issuer_hash
2401d14f</screen>
    <para>
      The client compares the issuer hash <literal>2401d14f</literal> with the
      issuer hashes of its collection of root CAs. In this case, no root CA has
      an issuer hash of <literal>2401d14f</literal>. As the client cannot trust
      the server yet, it has to verify the other certificates from the chain as
      well. Notice that the next certificate in the chain has the
      <option>-subject_hash</option> identical to the
      <option>-issuer_hash</option> from the server certificate.
    </para>
<screen>&prompt.user;openssl x509 -in 2.pem -noout -subject_hash
2401d14f</screen>
    <para>
      Display the issuer hash of this certificate.
    </para>
<screen>&prompt.user;openssl x509 -in 2.pem -noout -issuer_hash
ce5e74ef</screen>
    <para>
      Again, this issuer hash cannot be found among client's root CAs. Continue
      with checking the issuer and subject hashes of the next certificates in
      the chain until you reach the last one. The results are summarized in the
      following table:
    </para>
    <figure>
      <title>Subject and issuer hashes of a certificate chain</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="tls-cert-chain1.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="tls-cert-chain1.png" width="75%"/>
        </imageobject>
        <textobject role="description"><phrase>Subject and issuer hashes of a certificate chain</phrase>
        </textobject>
      </mediaobject>
    </figure>
    <para>
      The last issuer hash <literal>f387163d</literal> finally has a matching
      CA:
    </para>
<screen>&prompt.user;ls -l /etc/ssl/certs/f387163d*
lrwxrwxrwx 1 root root 24 Oct 4 09:55 /etc/ssl/certs/f387163d.0 -> Starfield_Class_2_CA.pem</screen>
    <para>
      If the discovered issuer certificate is valid, you can trust the server as
      much as you trust the root CAs in your client certificate store.
    </para>
<screen>&prompt.user;openssl x509 -in /etc/ssl/certs/Starfield_Class_2_CA.pem -noout -dates
notBefore=Jun 29 17:39:16 2004 GMT
notAfter=Jun 29 17:39:16 2034 GMT</screen>
    <para>
      To confirm that the certificate is a root CA, check its subject and issuer
      hashes. Because root CA certificates are self-signed, they have both
      hashes identical.
    </para>
<screen>&prompt.user;openssl x509 -in /etc/ssl/certs/Starfield_Class_2_CA.pem -noout -issuer_hash -subject_hash
f387163d
f387163d</screen>
    <para>
      The complete certificate chain then looks as follows:
    </para>
    <figure>
      <title>Subject and issuer hashes of a certificate chain</title>
      <mediaobject>
        <imageobject role="fo">
          <imagedata fileref="tls-cert-chain2.png" width="75%"/>
        </imageobject>
        <imageobject role="html">
          <imagedata fileref="tls-cert-chain2.png" width="75%"/>
        </imageobject>
        <textobject role="description"><phrase>Complete TLS certificate chain</phrase>
        </textobject>
      </mediaobject>
    </figure>
  </section>
</topic>
