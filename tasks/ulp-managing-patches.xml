<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="ulp-managing-patches"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Managing live patches using &ulpa;</title>
    <!-- can be changed via merge
      in the assembly -->
    <!-- add author's e-mail -->
    <meta name="maintainer" content="jsindelarova@suse.com" its:translate="no"/>
    <abstract>
      <!-- can be changed via merge in the assembly -->
      <para>
        This article introduces steps to apply a patch, revert a patch and view a
        particular patch.
      </para>
    </abstract>
  </info>
  <tip>
    <para>
      You can run the <command>ulp</command> command either as a normal user or
      a privileged user via the &sudo; mechanism. The difference is that
      running <command>ulp</command> via &sudo; lets you view information about
      processes or patch processes that are running by &rootuser;.
    </para>
  </tip>
  <section xml:id="sec-ulp-apply-livepatch">
    <title>Applying live patches</title>
    <para>
      Live patches are applied using the <command>ulp trigger</command>
      command, for example:
    </para>
<screen>&prompt.user;ulp trigger -p <replaceable>PID</replaceable> <replaceable>LIVEPATCH</replaceable>.so</screen>
    <para>
      Replace <literal>PID</literal> with the process ID of the running process
      that uses the library to be patched and <literal>LIVEPATCH.so</literal>
      with the actual live patch file. The command returns one of the following
      status messages:
    </para>
    <variablelist>
      <varlistentry>
        <term>SUCCESS</term>
        <listitem>
          <para>
            The live patching operation was successful.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>SKIPPED</term>
        <listitem>
          <para>
            The patch was skipped because it was not designed for any library
            loaded in the process.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ERROR</term>
        <listitem>
          <para>
            An error occurred, and you can retrieve more information by
            inspecting the <systemitem>libpulp</systemitem> internal message
            buffer. See <xref linkend="sec-ulp-internal-messages"/> for more
            information.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      It is also possible to apply multiple live patches by using wildcards,
      for example:
    </para>
<screen>&prompt.user;ulp trigger '*.so'</screen>
    <para>
      The command tries to apply every patch in the current folder to every
      process that has the <systemitem>libpulp</systemitem> library loaded. If
      the patch is not suitable for the process, it is automatically skipped.
      In the end, the tool shows how many patches it successfully applied to
      how many processes.
    </para>
  </section>
  <section xml:id="sec-ulp-revert-livepatch">
    <title>Reverting live patches</title>
    <para>
      You can use the <command>ulp trigger</command> command to revert live
      patches. There are two ways to revert live patches. You can revert a live
      patch by using the <option>--revert</option> switch and passing the live
      patch container:
    </para>
<screen>&prompt.user;ulp trigger -p <replaceable>PID</replaceable> --revert <replaceable>LIVEPATCH</replaceable>.so</screen>
    <para>
      Alternatively, it is possible to remove all patches associated with a
      particular library, for example:
    </para>
<screen>&prompt.user;ulp trigger -p <replaceable>PID</replaceable> --revert-all=<replaceable>LIBRARY</replaceable></screen>
    <para>
      In the example, <replaceable>LIBRARY</replaceable> refers to the actual
      library, such as <systemitem>libcrypto.so.1.1</systemitem>.
    </para>
    <para>
      The latter approach can be useful when the source code of the original
      live patch is not available. Or you want to remove a specific old patch
      and apply a new one while the target application is still running a
      secure code, for example:
    </para>
<screen>&prompt.user;ulp trigger -p <replaceable>PID</replaceable>  --revert-all=libcrypto.so.1.1 new_livepatch2.so</screen>
  </section>
  <section xml:id="sec-ulp-verify-patches">
    <title>View applied patches</title>
    <para>
      It is possible to verify which applications have live patches applied by
      running:
    </para>
<screen>&prompt.user;ulp patches</screen>
    <para>
      The output shows which libraries are live patchable and patches loaded in
      programs, as well as which bugs the patch addresses:
    </para>
<screen>PID: 10636, name: test
  Livepatchable libraries:
    in /lib64/libc.so.6:
      livepatch: libc_livepatch1.so
        bug labels: jsc#SLE-0000
    in /usr/lib64/libpulp.so.0:</screen>
    <para>
      It is also possible to see which functions are patched by the live patch:
    </para>
<screen>&prompt.user;ulp dump <replaceable>LIVEPATCH.so</replaceable></screen>
  </section>
  <section xml:id="sec-ulp-internal-messages">
    <title>View internal message queue</title>
    <para>
      Log messages from <systemitem>libpulp.so</systemitem> are stored in a
      buffer inside the library and are not displayed unless requested by the
      user. To show these messages, run:
    </para>
<screen>&prompt.user;ulp messages -p <replaceable>PID</replaceable></screen>
  </section>
</topic>
