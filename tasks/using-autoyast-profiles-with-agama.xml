<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="using-autoyast-profiles-with-agama"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Using Auto&yast; profiles with &agama;</title>
    <!-- can be changed via merge in the assembly -->
    <!--add author's email address-->
    <meta name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
    <abstract>
      <!-- can be changed via merge in the assembly -->
      <para>
        &agama; introduces a modern, declarative installation framework that diverges significantly
        from the legacy Auto&yast; system, even though both aim to automate &productname;
        deployments. While partial reuse of existing Auto&yast; profiles is possible, direct
        compatibility is limited due to schema differences, semantic mismatches, and architectural
        shifts. This topic outlines how to load Auto&yast; profiles in &agama;, identifies
        supported modules, and offers practical guidance for converting legacy profiles using
        recommended tools and conventions.
      </para>
    </abstract>
  </info>
  <section xml:id="benefits-using-autoyast-profiles-in-agama">
    <title>Benefits of using Auto&yast; profiles in &agama;</title>
    <para>
      Reusing existing Auto&yast; profiles in &agama; provides a pragmatic starting point for teams
      migrating to the new installer without discarding prior investments. Although direct
      compatibility is limited, leveraging Auto&yast; profiles accelerates transition efforts by
      retaining core configuration logic, organizational conventions, and validated deployment
      workflows.
    </para>
    <para>
      Using Auto&yast; profiles in &agama; has the following benefits:
    </para>
    <variablelist>
      <varlistentry>
        <term>Reduced duplication of effort</term>
        <listitem>
          <para>
            Existing infrastructure-as-code assets can inform &agama; profile structure, minimizing
            rework.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Faster onboarding</term>
        <listitem>
          <para>
            Administrators familiar with Auto&yast; can map known modules to &agama; fields
            incrementally.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Incremental migration</term>
        <listitem>
          <para>
            Supported Auto&yast; elements can be reused while unsupported ones are refactored or
            omitted over time.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Validation of system assumptions</term>
        <listitem>
          <para>
            Reviewing legacy profiles helps surface deprecated patterns and adapt them to &agama;’s
            declarative model.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="limitations-using-autoyast-profiles-in-agama">
    <title>Limitations of using Auto&yast; profiles in &agama;</title>
    <para>
      While reusing Auto&yast; profiles in &agama; may provide a head start during migration, it
      also introduces significant limitations. The fundamental differences in schema structure,
      execution model, and configuration philosophy mean that Auto&yast;-based profiles can
      constrain the effectiveness and clarity of &agama; workflows if carried over directly.
    </para>
    <para>
      Using Auto&yast; profiles in &agama; has the following limitations:
    </para>
    <variablelist>
      <varlistentry>
        <term>Procedural bias</term>
        <listitem>
          <para>
            Auto&yast; profiles often rely on execution order, embedded scripts, and imperative
            constructs, which have no counterpart in &agama;’s declarative design.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Semantic mismatch</term>
        <listitem>
          <para>
            Many Auto&yast; modules encapsulate behavior or assumptions not explicitly modeled in
            &agama;, leading to subtle incompatibilities or misconfigurations during reuse.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Reduced transparency</term>
        <listitem>
          <para>
            Profiles imported from Auto&yast; tend to obscure the declarative simplicity of
            &agama;, making troubleshooting and peer review harder.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Missed modernization opportunities</term>
        <listitem>
          <para>
            Clinging to legacy profiles may prevent users from fully adopting &agama;’s modular,
            readable, and cloud-native configuration style.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="loading-autoyast-profiles-with-agama">
    <title>Loading Auto&yast; profiles with &agama;</title>
    <para>
      &agama; supports loading Auto&yast; profiles as part of its transitional support for legacy
      automation systems. This allows administrators to reuse existing configuration assets while
      gradually migrating to the native &agama; profile format. Several loading mechanisms are
      available depending on the deployment context and profile structure.
    </para>
    <procedure xml:id="proc-loading-autoyast-agama">
      <title>Loading an Auto&yast; profile using &agama;</title>
      <para>
        Use the following steps to load an Auto&yast; profile in &agama;. Profiles can be supplied
        either through kernel boot parameters or imported using the &agama; CLI.
      </para>
      <step>
        <para>
          Select a method for providing the Auto&yast; profile to &agama;:
        </para>
        <stepalternatives>
          <step>
            <para>
              Load the profile using a kernel boot parameter. Add the <literal>inst.auto</literal>
              parameter to the kernel command line and specify the URL of the Auto&yast; profile:
            </para>
<screen>&prompt.sudo;<command>linux inst.auto=<replaceable>http://EXAMPLE.NET/AGAMA/SLES.xml</replaceable></command></screen>
            <para>
              This method is commonly used in PXE boot setups or custom ISO builds.
            </para>
          </step>
          <step>
            <para>
              Import the profile using the &agama; CLI. Run the following command to fetch and
              preprocess the Auto&yast; profile:
            </para>
<screen>&prompt.sudo;<command>agama profile import <replaceable>URL</replaceable></command></screen>
            <para>
              Supported formats include:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  &agama; profiles: <literal>.json</literal>, <literal>.jsonnet</literal>,
                  <literal>.sh</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  Auto&yast; profiles: <literal>.xml</literal>, <literal>.erb</literal>, and
                  directories such as <literal>rules/</literal> or <literal>classes/</literal>
                </para>
              </listitem>
            </itemizedlist>
            <para>
              For more information on supported URL types, refer to
              <link xlink:href="https://agama-project.github.io/docs/user/urls"></link>.
            </para>
            <para>
              When importing Auto&yast; content, the CLI automatically evaluates dynamic features
              such as:
            </para>
            <itemizedlist>
              <listitem>
                <para>
                  Rules and classes for conditional profile selection
                </para>
              </listitem>
              <listitem>
                <para>
                  Embedded Ruby (ERB) for template-based profile generation
                </para>
              </listitem>
              <listitem>
                <para>
                  Pre-installation scripts to dynamically modify profile content
                </para>
              </listitem>
            </itemizedlist>
          </step>
        </stepalternatives>
      </step>
      <step>
        <para>
          Display the loaded or imported profile, or pipe it to a JSON file:
        </para>
<screen>&prompt.sudo;<command>agama config show &gt; profile.json</command></screen>
      </step>
    </procedure>
  </section>
  <section xml:id="best-practices-convert-autoyast-profiles-to-agama-profiles">
    <title>Best practices for converting Auto&yast; profiles to &agama; profiles</title>
    <para>
      Converting Auto&yast; profiles to &agama; profiles involves transforming the original XML
      into &agama;'s JSON or Jsonnet format. This procedure outlines the recommended steps using
      the &agama; CLI.
    </para>
    <procedure xml:id="proc-convert-autoyast-to-agama">
      <title>Best practices for converting Auto&yast; profiles to &agama; profiles</title>
      <step>
        <para>
          Convert the Auto&yast; profile to a JSON file by piping the CLI output to a destination
          file:
        </para>
<screen>&prompt.sudo;<command>agama profile autoyast <replaceable>http://EXAMPLE.NET/AUTOYAST.xml</replaceable> > <replaceable>profile.json</replaceable></command></screen>
        <para>
          This command fetches and processes the Auto&yast; profile, then writes the resulting
          &agama;-compatible JSON to the specified file.
        </para>
      </step>
      <step>
        <para>
          Validate the converted profile:
        </para>
<screen>&prompt.sudo;<command>agama profile validate <replaceable>profile.json</replaceable></command></screen>
        <para>
          This ensures schema compliance and helps identify any unsupported or misconverted fields.
        </para>
      </step>
      <step>
        <para>
          Manually rework or remove unsupported sections, using &agama;'s schema documentation as a
          reference.
        </para>
      </step>
      <step>
        <para>
          If you require dynamic behavior, convert the profile to Jsonnet. You can then evaluate it
          to JSON:
        </para>
<screen>&prompt.sudo;<command>agama profile evaluate <replaceable>profile.jsonnet</replaceable> &gt; <replaceable>profile.json</replaceable></command></screen>
      </step>
      <step>
        <para>
          Test the final profile by loading it into an &agama; installation session:
        </para>
<screen>&prompt.sudo;<command>agama config load <replaceable>profile.json</replaceable></command></screen>
      </step>
      <step>
        <para>
          Make final edits to the loaded profile before starting installation:
        </para>
<screen>&prompt.sudo;<command>agama config edit</command></screen>
      </step>
    </procedure>
  </section>
</topic>
