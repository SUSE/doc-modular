<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<!DOCTYPE topic
[
  <!ENTITY % entities SYSTEM "../common/generic-entities.ent">
    %entities;
]>
<!-- refers to legacy doc: <add github link to legacy doc piece, if applicable> -->
<!-- point back to this document with a similar comment added to your legacy doc piece -->
<!-- refer to README.md for file and id naming conventions -->
<!-- metadata is dealt with on the assembly level -->
<topic xml:id="task-example"
 role="task" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.2"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:trans="http://docbook.org/ns/transclusion">
  <info>
    <title>Configuring &vmguest; CPU</title><!-- can be changed via merge
in the assembly -->
    <!-- add author's e-mail -->
    <meta name="maintainer" content="" its:translate="no"/>
    <abstract><!-- can be changed via merge in the assembly -->
      <para>
        
       </para>
    </abstract>
  </info>
  <para>
    To open the &vmguest; CPU configuration, proceed as follows:
  </para>
  <procedure>
    <step>
      <para>
        Click <guimenu>CPUs</guimenu>. The view includes detailed information about the processor
        configuration of the &vmguest;
      </para>
      <figure>
        <title>Processor view</title>
        <mediaobject>
         <imageobject role="fo">
          <imagedata fileref="libvirt_vmm_processor.png" width="70%"/>
         </imageobject>
         <imageobject role="html">
          <imagedata fileref="libvirt_vmm_processor.png" width="70%"/>
         </imageobject>
        </mediaobject>
       </figure>
       <para>
        The options are described in the following list.
       </para>
    </step>
  </procedure>
  <variablelist>
    <title>CPUs configuration</title>
    <varlistentry>
      <term><guimenu>Logical host
        CPUs</guimenu></term>
      <listitem>
        <para>
          Shows the number of online and usable CPUs on the &vmhost;.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><guimenu>vCPUs allocation</guimenu></term>
      <listitem>
        <para>
          Configures the number of
          virtual CPUs allocated to the &vmguest;.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><guimenu>Copy host CPU configuration</guimenu></term>
      <listitem>
        <para>
          When activated, the <guimenu>Copy host CPU configuration</guimenu> option
          uses the host CPU model for &vmguest;. You can see the details of the host
          CPU model in the output of the <command>virsh capabilities</command>
          command. When deactivated, the CPU model needs to be specified from the
          models available in the <guimenu>Model</guimenu> drop-down box.
        </para>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term><guimenu>Model</guimenu></term>
      <listitem>
        <para>
          You can select a CPU moel here:  
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <guimenu>host-model</guimenu> - this option generally provides a good trade-off between CPU features
              and ability to migrate the &vmguest;. &libvirt; does not model every aspect
              of each CPU, so the &vmguest; CPU will not match the &vmhost; CPU exactly.
              However, the ABI provided to the &vmguest; is reproducible, and during migration,
              the complete CPU model definition is transferred to the destination
              &vmhost;, ensuring that the migrated &vmguest; will see the exact same CPU model
              on the destination.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>host-passthrough</literal> - this model provides the &vmguest; with a
              CPU that is exactly the same as the &vmhost; CPU. This can be useful when
              the &vmguest; workload requires CPU features not available in &libvirt;'s
              simplified <literal>host-model</literal> CPU. The host-passthrough model is
              also required in some cases, for example, when running &vmguest;s with more
              than 4&nbsp;TB of memory. The <literal>host-passthrough</literal> model comes
              with the disadvantage of reduced migration capability. A &vmguest; with
              <literal>host-passthrough</literal> model CPU can only be migrated to a
              &vmhost; with identical hardware.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </varlistentry>
    <varlistentry>
      <term>Topology</term>
      <listitem>
        <para>
          You can changed the CPU topology configuration, after checking <guimenu>Manually set CPU
          topology</guimenu>. Then you can select the number of sockets, cores and threads that
          will be used by the &vmguest;.
        </para>
      </listitem>
    </varlistentry>
  </variablelist>
     
   <para>
    For more information on &libvirt;'s CPU model and topology options, see the
    <citetitle>CPU model and topology</citetitle> documentation at
    <link xlink:href="https://libvirt.org/formatdomain.html#cpu-model-and-topology"/>.
   </para>
   
</topic>
