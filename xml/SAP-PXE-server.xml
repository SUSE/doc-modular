<?xml version="1.0"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.2" xml:id="sles-pxe-server-setup" xml:lang="en">
  <info>
    <title xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude">Setting Up a PXE Boot Server on <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase></title>
    <revhistory xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="rh-sles-pxe-server-setup">
      <revision>
        <date>2025-11-04</date>
        <revdescription>
          <para>
              Initial version
            </para>
        </revdescription>
      </revision>
    </revhistory>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="architecture">
      <phrase>AMD64/Intel&#xA0;64</phrase>
      <phrase>AArch64</phrase>
    </meta>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="productname" its:translate="no">
      <productname version="16.0">
        <phrase>
          <phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase>
        </phrase>
      </productname>
    </meta>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="title" its:translate="yes">Setting Up a PXE Boot Server on <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase></meta>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="description" its:translate="yes">How to configure a PXE boot server using GRUB&#xA0;2, nginx and Agama installer images</meta>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="social-descr" its:translate="yes">Set up a PXE boot server with GRUB&#xA0;2 and Agama</meta>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="category" its:translate="no">
      <phrase>Deployment &amp; Upgrade</phrase>
    </meta>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="task" its:translate="no">
      <phrase>Configuration</phrase>
      <phrase>Installation</phrase>
    </meta>
    <meta xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" name="series" its:translate="no">Products &amp; Solutions</meta>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude">
      <dm:bugtracker>
        <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
        <dm:component>Documentation</dm:component>
        <dm:product>SUSE Linux Enterprise Server 16.0</dm:product>
        <dm:assignee>souvik.sarkar@suse.com</dm:assignee>
      </dm:bugtracker>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
    <abstract xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude">
      <variablelist>
        <varlistentry>
          <term>WHAT?</term>
          <listitem>
            <para>
                Set up a PXE boot server with support for UEFI Secure Boot and the Agama installer.
              </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>WHY?</term>
          <listitem>
            <para>
                Automate and streamline the installation of multiple <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase>
                <phrase><phrase os="sles4sap">16.0</phrase></phrase> systems over the network.
              </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>EFFORT</term>
          <listitem>
            <para>
                For a system or network administrator, it typically takes 30 to 45 minutes to read and
                understand this article.
              </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>GOAL</term>
          <listitem>
            <para>
                A functioning PXE server that can boot multiple architectures into the Agama
                installer.
              </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>REQUIREMENTS</term>
          <listitem>
            <itemizedlist>
              <listitem>
                <para>
                    A <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> system with administrative privileges
                  </para>
              </listitem>
              <listitem>
                <para>
                    Internet connection to fetch ISO images
                  </para>
              </listitem>
              <listitem>
                <para>
                    Static IP configuration for the PXE server
                  </para>
              </listitem>
            </itemizedlist>
          </listitem>
        </varlistentry>
      </variablelist>
    </abstract>
  </info>
  <section role="concept" xml:lang="en" version="5.2" xml:id="sles-pxe-server-introduction">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Overview of PXE booting with <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase></title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        PXE booting enables machines to boot over the network into an installation or runtime
        environment without local storage. This section explains how PXE works in <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase>
        <phrase><phrase os="sles4sap">16.0</phrase></phrase> Agama and live installer images with a focus on GRUB&#xA0;2.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-what-is">
      <title>What is PXE booting?</title>
      <para>
      PXE (Preboot Execution Environment) is a method that allows systems to retrieve bootloaders
      and OS installers from a network server using DHCP and TFTP or HTTP. It is widely used for
      provisioning machines without physical media or preinstalled operating systems.
    </para>
    </section>
    <section xml:id="sles-pxe-server-benefits">
      <title>Benefits of PXE booting</title>
      <para>
      PXE booting simplifies provisioning by removing the need for local installation media or
      manual setup. It enables:
    </para>
      <itemizedlist>
        <listitem>
          <para>
          Unattended installation of many systems over the network
        </para>
        </listitem>
        <listitem>
          <para>
          Centralized management of installer versions and boot configurations
        </para>
        </listitem>
        <listitem>
          <para>
          Support for diverse architectures and firmware types, including UEFI Secure Boot
        </para>
        </listitem>
        <listitem>
          <para>
          Dynamic selection of installers or installation parameters using GRUB&#xA0;2 menus
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-how-it-works">
      <title>How PXE booting works in <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase></title>
      <para>
      PXE booting in <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> uses GRUB&#xA0;2 as the bootloader and the Agama
      installer as the installation interface. Boot loaders and installer files are provided over
      the network using HTTP or TFTP, with GRUB&#xA0;2 fetching the kernel, initrd and live image. PXE
      clients can use a variety of firmware (including the most common ones such as BIOS or UEFI),
      bootloader executable or image formats, as required by their architectures such as AMD64/Intel&#xA0;64,
      AArch64, ppc64le and s390x. In addition, they must work in both IPv4 and IPv6 networks.
    </para>
      <para>
      The bootloader passes kernel parameters such as <literal>root=live:</literal> to load the
      squashfs-based root file system from a live ISO image, starting the Agama interface either
      locally or as a Web service for a remote Web UI.
    </para>
      <section xml:id="sles-pxe-server-backward-compatibility-with-sle-15">
        <title>Backward compatibility with <phrase><phrase os="sles4sap">SLES&#xA0;for&#xA0;SAP</phrase></phrase> 15.x</title>
        <para>
        The information in this article applies primarily to <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> 16.0 and later. It
        focuses on PXE booting workflows that integrate with the Agama installer and rely on live
        installation images. In the context and scope of this article, <phrase><phrase os="sles4sap">SLES&#xA0;for&#xA0;SAP</phrase></phrase> 16.0 and
        later versions differ from <phrase><phrase os="sles4sap">SLES&#xA0;for&#xA0;SAP</phrase></phrase> 15.x in the following ways:
      </para>
        <variablelist>
          <varlistentry>
            <term>Installer</term>
            <listitem>
              <para>
              Uses <literal>dracut</literal> and Agama instead of <literal>linuxrc</literal> and
              YaST.
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>DHCP server</term>
            <listitem>
              <para>
              Use of ISC DHCP is discontinued (EOL 2022). For a DHCP server, use either Kea or
              dnsmasq instead.
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Boot parameters</term>
            <listitem>
              <para>
              Uses <literal>root=live:</literal> parameter to load the agama installer image and
              the optional <literal>inst.install_url=</literal> for the non-default installation
              repository, instead of the <literal>install=</literal> parameter.
            </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
        The bootloader choice (GRUB&#xA0;2, pxelinux, etc.) remains flexible and is not
        version-dependent.
      </para>
      </section>
      <section xml:id="sles-pxe-server-different-possible-setups">
        <title>Different possible setups and steps</title>
        <para>
        This article consists of mandatory setup steps and optional or alternative configurations.
        Follow only the sections relevant to your deployment and skip any alternatives that do not
        apply to your deployment.
      </para>
        <variablelist>
          <varlistentry>
            <term>Mandatory</term>
            <listitem>
              <para>
              Tasks like installing components, preparing the installer image, configuring GRUB&#xA0;2,
              and validating the server must be completed in all setups.
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>File delivery method</term>
            <listitem>
              <para>
              An HTTP server (recommended with Agama) like <literal>nginx</literal> and/or
              a TFTP server like <literal>tftp</literal> or <literal>dnsmasq</literal>.
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>DHCP server</term>
            <listitem>
              <para>
              Choose either Kea or dnsmasq.
            </para>
              <note>
                <title>Limitations and features of your chosen method</title>
                <itemizedlist>
                  <listitem>
                    <para>
                    Use <emphasis role="strong">Kea</emphasis>&#x2014;the new DHCP server from
                    ISC&#x2014;as a modern replacement for ISC DHCP. For more information on Kea,
                    refer to <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.isc.org/kea/"/>. For the ISC DHCP EOL
                    notice, see <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.isc.org/dhcp/"/>.
                    
                    Kea is a DHCP server and requires separate TFTP server software.

                    The Kea DHCP server supports options for TFTP/PXE boot over IPv4 and IPv6
                    as well as for HTTP boot via IPv4. The HTTP boot via IPv6 requires, that the
                    DHCPv6 server can send the <literal>Vendor Class Option</literal> (see
                    <literal>RFC3315, Section 22.16</literal>), supposed to be used <quote>by a client
                    to identify the vendor,</quote> back to the client and is currently not supported.
                  </para>
                  </listitem>
                  <listitem>
                    <para><emphasis role="strong">dnsmasq</emphasis> as a combination of a DNS server,
                    a DHCP server, and a TFTP server. You can use it to serve the bootloader,
                    kernel, initrd (and other files) over TFTP. For more information on dnsmasq,
                    refer to <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://thekelleys.org.uk/dnsmasq/doc.html"/>.

                    The dnsmasq DHCP server supports options for TFTP/PXE boot over IPv4 and IPv6
                    as well as for HTTP boot via IPv4. The HTTP boot via IPv6 requires that the
                    DHCPv6 server can send the <literal>Vendor Class Option</literal> (see
                    <literal>RFC3315, Section 22.16</literal>), supposed to be used <quote>by a client
                    to identify the vendor,</quote> back to the client and is currently not supported.
                  </para>
                  </listitem>
                </itemizedlist>
              </note>
            </listitem>
          </varlistentry>
        </variablelist>
        <figure xml:id="sles-pxe-server-setup-workflow">
          <title>Sample PXE server setup workflow</title>
          <mediaobject>
            <imageobject role="html">
              <imagedata fileref="sles-pxe-server-setup-workflow.svg"/>
            </imageobject>
            <imageobject role="fo">
              <imagedata fileref="sles-pxe-server-setup-workflow.svg" width="85%"/>
            </imageobject>
            <textobject role="description">
              <phrase>Workflow diagram of setting up a PXE boot server</phrase>
            </textobject>
          </mediaobject>
        </figure>
      </section>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-prepare-network">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Preparing the network for PXE boot services</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This module describes the network infrastructure requirements for deploying PXE boot
        services on <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-network-configuration-introduction">
      <title>Introduction</title>
      <para>
      A PXE server comprises three servers: a DHCP server providing the address and boot file
      (bootloader) location and a TFTP and/or HTTP server to retrieve the files.
      In addition, there might be a DNS server, an NTP server and a router with IPv6
      support&#x2014;usually they are separate from the PXE server in a production network. A PXE
      server running <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> may also need a specific network interface setup,
      certain persistent rules added to the firewall, and some permissions in
      <systemitem>SELinux</systemitem>. This section illustrates a sample network with suitable IP
      ranges, and the necessary rules for firewall and SELinux.
    </para>
    </section>
    <section xml:id="sles-pxe-server-network-configuration">
      <title>Assumptions and sample network configuration</title>
      <para>
      In this article, we assume the following:
    </para>
      <itemizedlist>
        <listitem>
          <para>
          The PXE server is running on the <literal>eno1</literal> network interface with the
          following network configuration:
        </para>
          <table frame="all">
            <title>Sample PXE network configuration</title>
            <tgroup cols="4">
              <colspec colname="c1"/>
              <colspec colname="c2"/>
              <colspec colname="c3"/>
              <colspec colname="c4"/>
              <thead>
                <row>
                  <entry/>
                  <entry>IPv4</entry>
                  <entry>IPv6</entry>
                  <entry>DNS Name</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>PXE Network</entry>
                  <entry>192.168.1.0/24</entry>
                  <entry>2001:db8:0:1::/64</entry>
                  <entry>example.net</entry>
                </row>
                <row>
                  <entry>PXE Server</entry>
                  <entry>192.168.1.200</entry>
                  <entry>2001:db8:0:1::200</entry>
                  <entry>pxe.example.net</entry>
                </row>
                <row>
                  <entry>PXE Gateway</entry>
                  <entry>192.168.1.1</entry>
                  <entry>2001:db8:0:1::1</entry>
                  <entry/>
                </row>
                <row>
                  <entry>DNS Server</entry>
                  <entry>192.168.1.200</entry>
                  <entry>2001:db8:0:1::200</entry>
                  <entry/>
                </row>
                <row>
                  <entry>NTP Server</entry>
                  <entry>192.168.1.1</entry>
                  <entry>2001:db8:0:1::1</entry>
                  <entry/>
                </row>
              </tbody>
            </tgroup>
          </table>
        </listitem>
        <listitem>
          <para>
          By default, the router, NTP and DNS servers are external and running on another
          machine. This article provides some hints, but does not cover their complete
          configuration.
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-firewall-selinux">
      <title>Configure network interface, firewall and <systemitem>SELinux</systemitem> for PXE services</title>
      <para>
      Configure the network interface and firewall to allow network services required by the PXE
      server. Adjust <systemitem>SELinux</systemitem> settings to enable installation testing and
      define persistent local policies.
    </para>
      <procedure>
        <step>
          <para>
          Verify and assign the PXE network interface to the appropriate firewalld zone.
        </para>
          <substeps>
            <step>
              <para>
              Check the currently active zones and their assigned interfaces:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --get-active-zones</command>
              </screen>
            </step>
            <step>
              <para>
              If <literal>eno1</literal> is not assigned to the <literal>public</literal> zone,
              assign it:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --change-interface=eno1</command>
              </screen>
            </step>
            <step>
              <para>
              Make the interface assignment persistent across reboots:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-interface=eno1</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Configure the firewall for DNS service access.
        </para>
          <substeps>
            <step>
              <para>
              Allow DNS service for the current session:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --add-service=dns</command>
              </screen>
            </step>
            <step>
              <para>
              Make the change persistent:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-service=dns</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Configure the firewall for NTP service access.
        </para>
          <substeps>
            <step>
              <para>
              Allow NTP service for the current session:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --add-service=ntp</command>
              </screen>
            </step>
            <step>
              <para>
              Make the change persistent:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-service=ntp</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Configure the firewall for DHCP (IPv4) service access.
        </para>
          <substeps>
            <step>
              <para>
              Allow DHCP service for the current session:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --add-service=dhcp</command>
              </screen>
            </step>
            <step>
              <para>
              Make the change persistent:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-service=dhcp</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Configure the firewall for DHCPv6 service access.
        </para>
          <substeps>
            <step>
              <para>
              Allow DHCPv6 service for the current session:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --add-service=dhcpv6</command>
              </screen>
            </step>
            <step>
              <para>
              Make the change persistent:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-service=dhcpv6</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Configure the firewall for TFTP service access.
        </para>
          <substeps>
            <step>
              <para>
              Allow TFTP service for the current session:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --add-service=tftp</command>
              </screen>
            </step>
            <step>
              <para>
              Make the change persistent:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-service=tftp</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Configure the firewall for HTTP service access.
        </para>
          <substeps>
            <step>
              <para>
              Allow HTTP service for the current session:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --add-service=http</command>
              </screen>
            </step>
            <step>
              <para>
              Make the change persistent:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-service=http</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Configure the firewall for HTTPS service access.
        </para>
          <substeps>
            <step>
              <para>
              Allow HTTPS service for the current session:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --zone=public --add-service=https</command>
              </screen>
            </step>
            <step>
              <para>
              Make the change persistent:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>firewall-cmd --permanent --zone=public --add-service=https</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Temporarily disable <systemitem>SELinux</systemitem> for setup testing.
        </para>
          <substeps>
            <step>
              <para>
              Set <systemitem>SELinux</systemitem> to permissive mode:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>setenforce 0</command>
              </screen>
            </step>
            <step>
              <para>
              Check <systemitem>SELinux</systemitem> status:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>sestatus</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Generate and install local <systemitem>SELinux</systemitem> policy modules for
          PXE-related services.
        </para>
          <substeps>
            <step>
              <para>
              Create and install a module for <literal>nginx</literal>:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>if test `ausearch -c 'nginx' --raw | wc -l` -gt 0 ; then</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>  ausearch -c 'nginx' --raw | audit2allow -a -M local-nginx</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>  semodule -i local-nginx.pp</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>fi</command>
              </screen>
            </step>
            <step>
              <para>
              Create and install a module for <literal>dnsmasq</literal>:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>if test `ausearch -c 'dnsmasq' --raw | wc -l` -gt 0 ; then</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>  ausearch -c 'dnsmasq' --raw | audit2allow -a -M local-dnsmasq</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>  semodule -i local-dnsmasq.pp</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>fi</command>
              </screen>
            </step>
            <step>
              <para>
              Create and install a module for <literal>in.tftpd</literal>:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>if test `ausearch -c 'in.tftpd' --raw | wc -l` -gt 0 ; then</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>  ausearch -c 'in.tftpd' --raw | audit2allow -a -M local-tftpd</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>  semodule -i local-tftpd.pp</command>
              </screen>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>fi</command>
              </screen>
            </step>
          </substeps>
        </step>
        <step>
          <para>
          Reenable <systemitem>SELinux</systemitem> enforcement mode.
        </para>
          <substeps>
            <step>
              <para>
              Set <systemitem>SELinux</systemitem> to enforcing mode:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>setenforce 1</command>
              </screen>
            </step>
            <step>
              <para>
              Verify <systemitem>SELinux</systemitem> status:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>sestatus</command>
              </screen>
            </step>
          </substeps>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-firewall-selinux-summary">
      <title>Summary</title>
      <para>
      This procedure ensured that the PXE server's network interface, firewall, and
      <systemitem>SELinux</systemitem> policy were correctly configured for secure and functional
      operation.
    </para>
      <itemizedlist>
        <listitem>
          <para>
          Verified and assigned the PXE-serving interface (<filename>eno1</filename> in this example)
          to the <literal>public</literal> firewalld zone.
        </para>
        </listitem>
        <listitem>
          <para>
          Opened the required firewall services for PXE operation, including
          <literal>dns</literal>, <literal>ntp</literal>, <literal>dhcp</literal>,
          <literal>dhcpv6</literal>, <literal>tftp</literal>, <literal>http</literal>, and
          <literal>https</literal>.
        </para>
        </listitem>
        <listitem>
          <para>
          Temporarily set <systemitem>SELinux</systemitem> to <literal>permissive</literal> mode to
          facilitate service testing and log AVC denials.
        </para>
        </listitem>
        <listitem>
          <para>
          Used <command>ausearch</command> and <command>audit2allow</command> to generate and
          install custom SELinux policy modules for services such as
          <systemitem>nginx</systemitem>, <systemitem>dnsmasq</systemitem>, and
          <systemitem>in.tftpd</systemitem>.
        </para>
        </listitem>
        <listitem>
          <para>
          Restored <systemitem>SELinux</systemitem> to <literal>enforcing</literal> mode to secure
          the system for production use.
        </para>
        </listitem>
      </itemizedlist>
      <para>
      With these steps complete, the PXE server is securely configured and ready to serve client
      machines over the network using either IPv4 or IPv6.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-install-components">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Installing the required PXE server components</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to install the necessary packages to support PXE booting in
        <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>, including GRUB&#xA0;2, DHCP, TFTP and/or HTTP components.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-install-components-intro">
      <title>Introduction</title>
      <para>
      To configure a PXE boot server on <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>, you need to install several
      services and tools. Depending on your setup, you may need the following:
    </para>
      <itemizedlist>
        <listitem>
          <para>
          The <package>dnsmasq</package> package provides a combination of a DNS server, a TFTP server
          and a DHCP server (DHCPv4 and DHCPv6) with limited IPv6 router advertisement (RA)
          support. It offers the following:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              dnsmasq DHCP server: Supports conditional delivery of DHCP options depending on request
              and client architecture for:
            </para>
              <itemizedlist>
                <listitem>
                  <para>
                  PXE boot requests using DHCPv4 and DHCPv6
                </para>
                </listitem>
                <listitem>
                  <para>
                  HTTP boot requests using DHCPv4
                </para>
                  <note>
                    <title>Limitations of dnsmasq for HTTP boot over DHCPv6</title>
                    <para>
                    Currently, dnsmasq does not support sending the required <literal>vendor-class</literal>
                    DHCPv6 option.
                  </para>
                  </note>
                </listitem>
              </itemizedlist>
            </listitem>
            <listitem>
              <para>
              dnsmasq TFTP server: Delivers bootloader files, kernel and initrd over TFTP
              during PXE boot.
            </para>
            </listitem>
            <listitem>
              <para>
              dnsmasq DNS server: Provides recursive resolution of domain names and IP addresses
              for client firmware and <filename>/etc/resolv.conf</filename> in the Installer/OS.
            </para>
            </listitem>
            <listitem>
              <para>
              dnsmasq IPv6 RA: Supports sending IPv6 RA when the PXE server is also acting as a router
              (configurability limited to a <quote>common RA pattern</quote>).
            </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
          The <package>kea</package> package is a DHCP server and a successor of the ISC DHCP server.
          It supports conditional delivery of DHCP options depending on request and client architecture for:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              PXE boot requests using DHCPv4 and DHCPv6
            </para>
            </listitem>
            <listitem>
              <para>
              HTTP boot requests using DHCPv4
            </para>
              <note>
                <title>Limitations of Kea for HTTP Boot over DHCPv6</title>
                <para>
                Currently, Kea does not support sending the required <literal>vendor-class</literal>
                DHCPv6 option. For more information, see
                <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://kea.readthedocs.io/en/latest/arm/dhcp6-srv.html#id4"/>.
              </para>
              </note>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
          A TFTP server delivers the bootloader files, kernel and initrd over TFTP, while PXE boot
          with kea is provided by the <package>tftp</package> package and not required for HTTP Boot.
          If you are using <package>dnsmasq</package>, you do not need the <package>tftp</package>
          package.
        </para>
        </listitem>
        <listitem>
          <para>
          A Web server such as the <package>nginx</package> package to serve installer images over
          HTTP.
        </para>
          <note>
            <title>Necessity for HTTP servers</title>
            <para>
            An HTTP/HTTPS server like nginx is almost always required. Its use extends beyond just HTTP Boot.
            In particular, you may need it in the following scenarios:
          </para>
            <itemizedlist>
              <listitem>
                <para>
                It is a basic requirement for HTTP Boot.
              </para>
              </listitem>
              <listitem>
                <para>
                It is recommended for providing the <filename>squashfs.img</filename>. You can use
                <literal>root=live:tftp://.../squashfs.img</literal> in the boot command line.
              </para>
              </listitem>
              <listitem>
                <para>
                It is also recommended for providing RPMs to Agama in the
                <literal>inst.install_url=http://.../install/</literal> boot command-line parameter
                on a <filename>SLES-16.0-Full-*.inline.iso</filename>, along with installation
                profiles and other files for unattended installation.
              </para>
              </listitem>
            </itemizedlist>
          </note>
        </listitem>
        <listitem>
          <para>
          The GRUB&#xA0;2 bootloader packages provide network boot for supported architectures and
          methods. For example, the AMD64/Intel&#xA0;64 architecture offers two methods for network boot:
          BIOS and UEFI. Additionally, UEFI generally supports PXE (TFTP) and HTTP Boot. Other
          bootloaders, such as pxelinux, do not support UEFI and HTTP Boot.
        </para>
        </listitem>
        <listitem>
          <para>
          Optionally, a router advertisement daemon for IPv6, such as the <package>radvd</package>
          package. It is required on <phrase><phrase os="sles4sap">SLES&#xA0;for&#xA0;SAP</phrase></phrase> if it is also acting as a router for an
          installer network to perform the following:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              Configure routing on a network for PXE or HTTP Boot clients.
            </para>
            </listitem>
            <listitem>
              <para>
              Enable DHCPv6 use on a network for PXE or HTTP Boot clients.
            </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-install-components-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          A system running <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> with administrative privileges, registered
          to the SUSE Customer Center and configured with access to the appropriate online
          repositories using SUSEConnect.
        </para>
        </listitem>
        <listitem>
          <para>
          Enabled SLE modules: Server Applications Module, Legacy Module and Base System Module.
        </para>
        </listitem>
        <listitem>
          <para>
          Access to the SLE module repositories for network services and bootloaders.
        </para>
        </listitem>
        <listitem>
          <para>
          A working internet connection to fetch packages.
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-install-components-exec">
      <title>Installing the packages</title>
      <para>
      Use the following steps to install the core packages required for the PXE boot server.
    </para>
      <procedure>
        <title>Installing necessary packages for a PXE boot server</title>
        <step>
          <para>
          Install the GRUB&#xA0;2 boot loader and the nginx HTTP server as common requirements.
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>zypper install grub2 nginx</command>
          </screen>
        </step>
        <step>
          <para>
          Run any of the following commands to install the essential packages for your approach:
        </para>
          <stepalternatives>
            <step>
              <para><package>kea</package> for the DHCP server, <package>tftp</package> for the TFTP
              server
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>zypper install kea tftp</command>
              </screen>
            </step>
            <step>
              <para><package>dnsmasq</package> as the common provider for DHCP, DNS, and TFTP servers
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>zypper install dnsmasq</command>
              </screen>
            </step>
          </stepalternatives>
          <note>
            <title>Limitations of DHCP servers provided by Kea and dnsmasq</title>
            <para>
            HTTP boot over IPv6 is <emphasis>currently</emphasis> not supported by DHCP servers
            provided by the <package>kea</package> and <package>dnsmasq</package> packages. It 
            does not support sending a <literal>vendor-class</literal> option back to the
            HTTP client, as required by the UEFI specification.
          </para>
          </note>
        </step>
        <step>
          <para>
          Optionally, install additional architecture-specific GRUB&#xA0;2 targets if you plan to
          support other platforms.
        </para>
          <stepalternatives>
            <step>
              <para>
              For AMD64/Intel&#xA0;64 architecture:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>zypper install grub2-x86_64-efi grub2-i386-pc</command>
              </screen>
            </step>
            <step>
              <para>
              For AArch64 architecture:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>zypper install grub2-aarch64-efi</command>
              </screen>
            </step>
            <step>
              <para>
              For ppc64le architecture:
            </para>
              <screen>
                <prompt>&gt; </prompt>
                <command>sudo</command>
                <command>zypper install grub2-ppc64le-ieee1275</command>
              </screen>
            </step>
          </stepalternatives>
          <note>
            <title>How the PXE server delivers GRUB&#xA0;2 packages to clients that are different from the server machine's architecture</title>
            <para>
            The GRUB&#xA0;2 architecture-specific <package>noarch.rpm</package> packages are included in
            the <filename>noarch</filename> subdirectory of the installation media/repository,
            regardless of the architecture of the machine on which the PXE server is set up. That
            is, you can install <package>grub2-arm64-efi</package> and
            <package>grub2-powerpc-ieee1275</package> packages in a PXE server running on an
            AMD64/Intel&#xA0;64 machine, in order to support clients with other architectures.
          </para>
          </note>
        </step>
        <step>
          <para>
          Optionally, you may install the <package>shim</package> package if you need UEFI Secure
          Boot for AMD64/Intel&#xA0;64 or AArch64, but do not want to use the files from the installation media ISO.
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>zypper install shim</command>
          </screen>
        </step>
        <step>
          <para>
          Optionally, install the router advertisement daemon <package>radvd</package> if you want
          to use the PXE server as a router (not recommended for production networks).
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>zypper install radvd</command>
          </screen>
        </step>
        <step>
          <para>
          Install the <package>rsync</package> utility to conveniently copy or sync the ISO and
          directory tree.
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>zypper install rsync</command>
          </screen>
        </step>
        <step>
          <para>
          Ensure the services are installed but not yet started. Configuration will be covered in
          later sections.
        </para>
        </step>
      </procedure>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-netboot-directories-uefi-secure-boot">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Creating GRUB&#xA0;2 NetBoot directories for PXE server</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains creating GRUB&#xA0;2 NetBoot directories for PXE servers using
        <command>grub2-mknetdir</command>, which generates architecture-specific directories for
        AMD64/Intel&#xA0;64 (UEFI and BIOS), AArch64, and ppc64le systems. For UEFI Secure Boot support,
        administrators must copy signed EFI files from installation media or use the
        <package>shim</package> package to replace the default unsigned bootloader files.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-netboot-directories-uefi-secure-boot-introduction">
      <title>Introduction</title>
      <para>
      This section describes how to set up GRUB&#xA0;2 NetBoot directories for PXE server deployment
      across multiple architectures. The <command>grub2-mknetdir</command> command creates
      architecture-specific directories under <filename>/srv/tftpboot/boot/grub2/</filename> for
      different platforms. For example, AMD64/Intel&#xA0;64 systems generate both UEFI
      (<filename>x86_64-efi</filename>) and legacy BIOS (<filename>i386-pc</filename>) directories,
      while AArch64 and ppc64le systems create their respective UEFI directories
      (<filename>arm64-efi</filename> and <filename>powerpc-ieee1275</filename>).
    </para>
      <para>
      For UEFI Secure Boot support, which is not provided by the default unsigned
      <filename>core.efi</filename> files, administrators can either copy signed EFI files from
      installation media or install the <package>shim</package> package and manually copy the
      required bootloader files (<filename>shim.efi</filename>, <filename>grub.efi</filename>,
      <filename>MokManager.efi</filename>) to the appropriate architecture directories, ensuring
      proper symbolic link resolution to keep all files within the TFTP root directory.
    </para>
    </section>
    <section xml:id="sles-pxe-server-netboot-directories-uefi-secure-boot-requirements">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          Ensure that you have installed the following packages: <package>grub2</package>,
          <package>tftp</package>, and any other architecture-specific GRUB&#xA0;2 package such as
          <package>grub2-x86_64-efi</package> and <package>grub2-i386-pc</package>.
        </para>
        </listitem>
        <listitem>
          <para>
          Ensure that you have either the installation media (ISO) available for mounting, or the
          <package>shim</package> package installed on the system. You can download the
          installation media (ISO) for your target architecture from the SUSE Customer Center.
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-netboot-directories-uefi-secure-boot-executing">
      <title>Preparing NetBoot directories and UEFI Secure Boot</title>
      <para>
      This procedure creates the required GRUB&#xA0;2 directory structure for PXE network booting and
      optionally configures UEFI Secure Boot support across multiple architectures.
    </para>
      <procedure>
        <step>
          <para>
          Create a GRUB&#xA0;2 NetBoot directory structure.
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>grub2-mknetdir --net-directory=/srv/tftpboot
--subdir=/boot/grub2</command>
          </screen>
          <para>
          This creates architecture-specific directories:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              AMD64/Intel&#xA0;64: <filename>/srv/tftpboot/boot/grub2/x86_64-efi</filename> and
              <filename>/srv/tftpboot/boot/grub2/i386-pc </filename>
            </para>
            </listitem>
            <listitem>
              <para>
              AArch64: <filename>/srv/tftpboot/boot/grub2/arm64-efi</filename>
            </para>
            </listitem>
            <listitem>
              <para>
              ppc64le: <filename>/srv/tftpboot/boot/grub2/powerpc-ieee1275</filename>
            </para>
            </listitem>
          </itemizedlist>
          <warning>
            <para>
            Do not manually overwrite the <filename>grub.cfg</filename> file created by
            <command>grub2-mknetdir</command>.
          </para>
          </warning>
        </step>
        <step>
          <para>
          Copy other architecture-independent directories, such as <filename>fonts/</filename> and
          <filename>locale/</filename> that are available under the
          <filename>/srv/tftpboot/boot/grub2/</filename> directory to the TFTP server.
        </para>
        </step>
        <step>
          <para>
          You can use the
          <filename>/srv/tftpboot/boot/grub2/<replaceable>ARCH</replaceable>-efi/core.efi</filename>
          file installed by the <command>grub2-mknetdir</command> command for AMD64/Intel&#xA0;64 or AArch64
          architectures for UEFI PXE as well. However, they are <emphasis>not signed</emphasis> and
          do not support UEFI Secure Boot. To optionally enable UEFI Secure Boot for the supported
          AMD64/Intel&#xA0;64 and AArch64 architectures, perform any of the following steps:
        </para>
          <stepalternatives>
            <step>
              <para>
              Copy the necessary files from the installation media ISO:
            </para>
              <substeps>
                <step>
                  <para>
                  Mount the ISO image.
                </para>
                  <screen>
                    <prompt>&gt; </prompt>
                    <command>sudo</command>
                    <command>mount -o loop /PATH/TO/SLES.ISO /mnt</command>
                  </screen>
                </step>
                <step>
                  <para>
                  Copy EFI files.
                </para>
                  <screen>
                    <prompt>&gt; </prompt>
                    <command>sudo</command>
                    <command>cp -v /mnt/EFI/BOOT/*.efi
/srv/tftpboot/boot/grub2/<replaceable>ARCH</replaceable>-efi/</command>
                    <co xml:id="copy-efi-files"/>
                  </screen>
                  <calloutlist>
                    <callout arearefs="copy-efi-files">
                      <para>
                      Replace <filename><replaceable>ARCH</replaceable>-efi</filename> with
                      <filename>x86_64-efi</filename> or <filename>arm64-efi</filename>&#x2014;the
                      supported architectures for UEFI Secure Boot.
                    </para>
                    </callout>
                  </calloutlist>
                </step>
                <step>
                  <para>
                  Unmount the installation media ISO.
                </para>
                  <screen>
                    <prompt>&gt; </prompt>
                    <command>sudo</command>
                    <command>umount /mnt</command>
                  </screen>
                </step>
              </substeps>
            </step>
            <step>
              <para>
              Use the <package>shim</package> package if you do not want to use the files from the
              installation media ISO:
            </para>
              <substeps>
                <step>
                  <para>
                  If not already installed, install the <package>shim</package> package.
                </para>
                  <screen>
                    <prompt>&gt; </prompt>
                    <command>sudo</command>
                    <command>zypper install shim</command>
                  </screen>
                </step>
                <step>
                  <para>
                  Copy the signed bootloader files for the necessary architecture:
                </para>
                  <substeps>
                    <step>
                      <para>
                      Copy the <filename>shim.efi</filename> file.
                    </para>
                      <stepalternatives>
                        <step>
                          <para>
                          For AMD64/Intel&#xA0;64 architecture:
                        </para>
                          <screen>
                            <prompt>&gt; </prompt>
                            <command>sudo</command>
                            <command>cp -v -p -L /usr/share/efi/x86_64/shim.efi /srv/tftpboot/boot/grub2/x86_64-efi/bootx64.efi</command>
                          </screen>
                        </step>
                        <step>
                          <para>
                          For AArch64 architecture:
                        </para>
                          <screen>
                            <prompt>&gt; </prompt>
                            <command>sudo</command>
                            <command>cp -v -p -L /usr/share/efi/aarch64/shim.efi /srv/tftpboot/boot/grub2/arm64-efi/bootaa64.efi</command>
                          </screen>
                        </step>
                      </stepalternatives>
                    </step>
                    <step>
                      <para>
                      Copy the <filename>grub.efi</filename> file.
                    </para>
                      <stepalternatives>
                        <step>
                          <para>
                          For AMD64/Intel&#xA0;64 architecture:
                        </para>
                          <screen>
                            <prompt>&gt; </prompt>
                            <command>sudo</command>
                            <command>cp -v -p -L /usr/share/efi/x86_64/grub.efi /srv/tftpboot/boot/grub2/x86_64-efi/</command>
                          </screen>
                        </step>
                        <step>
                          <para>
                          For AArch64 architecture:
                        </para>
                          <screen>
                            <prompt>&gt; </prompt>
                            <command>sudo</command>
                            <command>cp -v -p -L /usr/share/efi/aarch64/grub.efi /srv/tftpboot/boot/grub2/arm64-efi/</command>
                          </screen>
                        </step>
                      </stepalternatives>
                    </step>
                    <step>
                      <para>
                      Copy the <filename>MokManager.efi</filename> file.
                    </para>
                      <stepalternatives>
                        <step>
                          <para>
                          For AMD64/Intel&#xA0;64 architecture:
                        </para>
                          <screen>
                            <prompt>&gt; </prompt>
                            <command>sudo</command>
                            <command>cp -v -p -L /usr/share/efi/x86_64/MokManager.efi /srv/tftpboot/boot/grub2/x86_64-efi/</command>
                          </screen>
                        </step>
                        <step>
                          <para>
                          For AArch64 architecture:
                        </para>
                          <screen>
                            <prompt>&gt; </prompt>
                            <command>sudo</command>
                            <command>cp -v -p -L /usr/share/efi/aarch64/MokManager.efi /srv/tftpboot/boot/grub2/arm64-efi/</command>
                          </screen>
                        </step>
                      </stepalternatives>
                    </step>
                  </substeps>
                  <note>
                    <para>
                    The <literal>-L</literal> flag resolves symbolic links to ensure files stay
                    within TFTP root.
                  </para>
                  </note>
                </step>
              </substeps>
            </step>
          </stepalternatives>
        </step>
      </procedure>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-prepare-installer">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Preparing the installer image content</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section describes how to extract and organize installer files from <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase>
        <phrase><phrase os="sles4sap">16.0</phrase></phrase> installation media for PXE boot environments. It covers both
        <literal>.install.iso</literal> images and RPM packages, with specific instructions for
        different architectures and installation types.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-prepare-installer-intro">
      <title>Introduction</title>
      <para><phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase><phrase><phrase os="sles4sap">16.0</phrase></phrase> provides installer files in multiple formats to support
      different PXE boot scenarios. The Agama installer requires three essential files: the
      kernel image (<filename>linux</filename>), the initial RAM disk
      (<filename>initrd</filename>), and the compressed root file system
      (<filename>squashfs.img</filename>). These files must be extracted from the installation
      media and organized in a directory structure accessible via TFTP and HTTP.
    </para>
      <para>
      This section covers preparation methods for both <literal>.install.iso</literal> images and
      RPM packages, ensuring compatibility with various architectures and installation types
      supported by <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>.
    </para>
    </section>
    <section xml:id="sles-pxe-server-prepare-installer-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para><phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase><phrase><phrase os="sles4sap">16.0</phrase></phrase> installation media, as available in SUSE Customer Center. Choose from:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              Online ISO: Installer-only for network installations
              (<filename>SLES-16.0-Online-<replaceable>ARCH</replaceable>-<replaceable>BUILD</replaceable>.install.iso</filename>)
            </para>
            </listitem>
            <listitem>
              <para>
              Full ISO: Installer with installation repository
              (<filename>SLES-16.0-Full-<replaceable>ARCH</replaceable>-<replaceable>BUILD</replaceable>.install.iso</filename>)
            </para>
            </listitem>
            <listitem>
              <para>
              RPM packages:
              <package>tftpboot-agama-installer-SUSE_SLE_16_PXE-<replaceable>ARCH</replaceable></package>
            </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>
          A temporary mount point, such as <filename>/mnt</filename>.
        </para>
        </listitem>
        <listitem>
          <para>
          Sufficient disk space under <filename>/srv/tftpboot</filename> and
          <filename>/srv/install</filename> for your chosen installation method.
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to create directories and copy files.
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-prepare-installer-iso">
      <title>Preparing installer files from ISO images</title>
      <para>
      ISO images provide a straightforward method for extracting installer files. The following
      procedures cover both Online and Full ISO types for different architectures.
    </para>
      <section xml:id="sles-pxe-server-prepare-installer-iso-online">
        <title>Using Online ISO images</title>
        <para>
        Online ISO images contain only the installer components, requiring network access
        to installation repositories during system installation. This corresponds with the
        <literal>SLES-16.0 Online Installation</literal> boot menu entry in GRUB.
       </para>
        <procedure xml:id="proc-prepare-online-iso-x86-aarch64">
          <title>Extracting files from Online ISO (x86_64 and aarch64)</title>
          <step>
            <para>
            Create the directory structure for installer files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mkdir -p /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
          </step>
          <step>
            <para>
            Mount the Online ISO image:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mount -oro,loop /srv/install/iso/SLES-16.0-Online-<replaceable>ARCH</replaceable>-<replaceable>BUILD</replaceable>.install.iso /mnt</command>
            </screen>
          </step>
          <step>
            <para>
            Copy the kernel and initrd files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/boot/<replaceable>ARCH</replaceable>/loader/linux  /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/boot/<replaceable>ARCH</replaceable>/loader/initrd /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
          </step>
          <step>
            <para>
            Copy the compressed root file system:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/LiveOS/squashfs.img /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
          </step>
          <step>
            <para>
            Unmount the ISO image:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>umount /mnt</command>
            </screen>
          </step>
        </procedure>
        <procedure xml:id="proc-prepare-online-iso-ppc64le">
          <title>Extracting files from Online ISO (ppc64le)</title>
          <step>
            <para>
            Create the directory structure:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mkdir -p /srv/tftpboot/boot/images/SLES-16.0/ppc64le/</command>
            </screen>
          </step>
          <step>
            <para>
            Mount the ISO image:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mount -oro,loop /srv/install/iso/SLES-16.0-Online-ppc64le-<replaceable>BUILD</replaceable>.install.iso /mnt</command>
            </screen>
          </step>
          <step>
            <para>
            Copy the kernel and initrd files (note the different path structure for ppc64le):
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/boot/ppc64le/linux /srv/tftpboot/boot/images/SLES-16.0/ppc64le/</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/boot/ppc64le/initrd /srv/tftpboot/boot/images/SLES-16.0/ppc64le/</command>
            </screen>
          </step>
          <step>
            <para>
            Copy the compressed root file system:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/LiveOS/squashfs.img /srv/tftpboot/boot/images/SLES-16.0/ppc64le/</command>
            </screen>
          </step>
          <step>
            <para>
            Unmount the ISO image:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>umount /mnt</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-prepare-installer-iso-full">
        <title>Using Full ISO images</title>
        <para>
        Full ISO images include both the installer and installation repositories, enabling local
        installations without external network dependencies.
        It corresponds with the <literal>SLES-16.0 Local Installation</literal> boot menu entry
        in grub with the additional
        <literal>inst.install_url=http://pxe.example.net/install/SLES-16.0/${arch}</literal>
        parameter.
      </para>
        <procedure xml:id="proc-prepare-full-iso">
          <title>Extracting files from Full ISO</title>
          <step>
            <para>
            Create directories for both installer files and the installation repository:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mkdir -p /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mkdir -p /srv/install/SLES-16.0</command>
            </screen>
          </step>
          <step>
            <para>
            Mount the Full ISO image:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mount -oro,loop /srv/install/iso/SLES-16.0-Full-<replaceable>ARCH</replaceable>-<replaceable>BUILD</replaceable>.install.iso /mnt</command>
            </screen>
          </step>
          <step>
            <para>
            Copy the kernel and initrd files (adjust paths for ppc64le as shown in previous
            procedures):
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/boot/<replaceable>ARCH</replaceable>/loader/linux  /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/boot/<replaceable>ARCH</replaceable>/loader/initrd /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
          </step>
          <step>
            <para>
            Copy the compressed root file system:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /mnt/LiveOS/squashfs.img /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
          </step>
          <step>
            <para>
            Copy the installation repository for local HTTP server access:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>rsync -avP /mnt/install/ /srv/install/SLES-16.0/<replaceable>ARCH</replaceable>/</command>
            </screen>
          </step>
          <step>
            <para>
            Unmount the ISO image:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>umount /mnt</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-prepare-installer-rpm">
      <title>Preparing installer files from RPM packages</title>
      <para>
      RPM packages provide an alternative method for obtaining Online Installer files.
    </para>
      <procedure xml:id="proc-prepare-rpm-packages">
        <title>Installing and using tftpboot RPM packages</title>
        <step>
          <para>
          Install the required packages:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>zypper in tftpboot-agama-installer-SUSE_SLE_16-<replaceable>ARCH</replaceable></command>
          </screen>
        </step>
        <step>
          <para>
          Copy the linux,initrd,squashfs.img into tftpboot:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>mkdir -p
/srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable></command>
          </screen>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>cd
/srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable></command>
          </screen>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>cp -v /usr/share/tftpboot-installation/agama-installer-SUSE_SLE_16/<replaceable>ARCH</replaceable>/loader/linux .</command>
          </screen>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>cp -v /usr/share/tftpboot-installation/agama-installer-SUSE_SLE_16/<replaceable>ARCH</replaceable>/loader/initrd .</command>
          </screen>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>cp -v /usr/share/tftpboot-installation/agama-installer-SUSE_SLE_16/<replaceable>ARCH</replaceable>/loader/squashfs.img .</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-prepare-installer-dir-structure">
      <title>Recommended directory structure</title>
      <para>
      Organize the extracted files according to the following directory layout to ensure consistency
      and ease of maintenance. This structure supports multiple architectures and installation
      types.
    </para>
      <example xml:id="ex-pxe-directory-layout">
        <title>Complete PXE server directory layout</title>
        <screen>/srv/tftpboot/
&#x251C;&#x2500;&#x2500; boot/
&#x2502;   &#x251C;&#x2500;&#x2500; grub2/
&#x2502;   &#x2502;   &#x251C;&#x2500;&#x2500; x86_64-efi/
&#x2502;   &#x2502;   &#x2502;   &#x251C;&#x2500;&#x2500; bootx64.efi
&#x2502;   &#x2502;   &#x2502;   &#x2514;&#x2500;&#x2500; grub.cfg
&#x2502;   &#x2502;   &#x251C;&#x2500;&#x2500; i386-pc/
&#x2502;   &#x2502;   &#x2502;   &#x2514;&#x2500;&#x2500; core.0
&#x2502;   &#x2502;   &#x251C;&#x2500;&#x2500; arm64-efi/
&#x2502;   &#x2502;   &#x2502;   &#x2514;&#x2500;&#x2500; bootaa64.efi
&#x2502;   &#x2502;   &#x2514;&#x2500;&#x2500; powerpc-ieee1275/
&#x2502;   &#x2502;       &#x2514;&#x2500;&#x2500; core.elf
&#x2502;   &#x2514;&#x2500;&#x2500; images/
&#x2502;       &#x2514;&#x2500;&#x2500; SLES-16.0/
&#x2502;           &#x251C;&#x2500;&#x2500; x86_64/
&#x2502;           &#x2502;   &#x251C;&#x2500;&#x2500; linux <co xml:id="co-kernel"/>
&#x2502;           &#x2502;   &#x251C;&#x2500;&#x2500; initrd <co xml:id="co-initrd"/>
&#x2502;           &#x2502;   &#x2514;&#x2500;&#x2500; squashfs.img <co xml:id="co-squashfs"/>
&#x2502;           &#x251C;&#x2500;&#x2500; aarch64/
&#x2502;           &#x2514;&#x2500;&#x2500; ppc64le/
/srv/install/
&#x2514;&#x2500;&#x2500; SLES-16.0/
    &#x251C;&#x2500;&#x2500; x86_64/ <co xml:id="co-install-repo"/>
    &#x251C;&#x2500;&#x2500; aarch64/
    &#x2514;&#x2500;&#x2500; ppc64le/</screen>
      </example>
      <calloutlist>
        <callout arearefs="co-kernel">
          <para>
          Kernel image extracted from installation media
        </para>
        </callout>
        <callout arearefs="co-initrd">
          <para>
          Initial RAM disk image
        </para>
        </callout>
        <callout arearefs="co-squashfs">
          <para>
          Compressed root file system for Agama installer
        </para>
        </callout>
        <callout arearefs="co-install-repo">
          <para>
          Installation repository from <filename>install</filename> directory from the Full ISO (optional)
        </para>
        </callout>
      </calloutlist>
    </section>
    <section xml:id="sles-pxe-server-prepare-installer-verify">
      <title>Verifying the installation</title>
      <para>
      After extracting and organizing the installer files, verify that all required components are
      present and accessible.
    </para>
      <procedure xml:id="proc-verify-installer-files">
        <title>Verification steps</title>
        <step>
          <para>
          Check that essential files are present:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>ls -la /srv/tftpboot/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/*</command>
          </screen>
        </step>
        <step>
          <para>
          Ensure proper file permissions:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>find /srv/tftpboot/boot/images/ -type d -exec chmod 0755 {} \;</command>
          </screen>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>find /srv/tftpboot/boot/images/ -type f -exec chmod 0644 {} \;</command>
          </screen>
        </step>
      </procedure>
      <important>
        <title>File accessibility</title>
        <para>
        Ensure that all extracted files are readable by the TFTP and HTTP services. The files will
        be accessed by PXE clients during the boot process, so proper permissions and service
        configuration are essential for successful deployments.
      </para>
      </important>
    </section>
    <section xml:id="sles-pxe-server-prepare-installer-next">
      <title>Next steps</title>
      <para>
      With the installer files properly prepared and organized, you can proceed to:
    </para>
      <itemizedlist>
        <listitem>
          <para>
          Configure GRUB&#xA0;2 for PXE boot with menu entries referencing these files
        </para>
        </listitem>
        <listitem>
          <para>
          Set up HTTP and TFTP services to serve the extracted content
        </para>
        </listitem>
        <listitem>
          <para>
          Configure DHCP to direct PXE clients to the appropriate bootloaders
        </para>
        </listitem>
      </itemizedlist>
      <para>
      The extracted files will be referenced in GRUB&#xA0;2 configuration using paths such as
      <literal>root=live:http://pxe.example.net/boot/images/SLES-16.0/<replaceable>ARCH</replaceable>/squashfs.img</literal>.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-configure-grub2">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring GRUB&#xA0;2 for PXE boot</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section describes how to configure the GRUB&#xA0;2 bootloader for PXE-based booting on
        <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>. It covers creating the network boot directory structure,
        setting up architecture-specific bootloaders, and implementing a flexible configuration
        system that supports multiple architectures and installation scenarios.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-configure-grub2-intro">
      <title>Introduction</title>
      <para>
      GRUB&#xA0;2 serves as the network bootloader for PXE clients, loading kernel and initrd files to
      start the Agama installer. This section demonstrates how to create a sophisticated GRUB&#xA0;2
      configuration that automatically detects client architecture, manages network interface
      selection, and provides a unified boot menu supporting multiple installation types and target
      architectures.
    </para>
      <para>
      The configuration approach uses a modular design with separate files for architecture
      detection, variable definitions, and boot menu entries. This enables support for
      machine-specific configurations and automated installation profiles while maintaining
      consistency across different hardware platforms.
    </para>
    </section>
    <section xml:id="sles-pxe-server-configure-grub2-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          Ensure that the GRUB&#xA0;2 network boot directory structure is in place, as described in the
          previous sections.
        </para>
        </listitem>
        <listitem>
          <para>
          Ensure that the installer files are properly organized as described in the previous
          sections.
        </para>
        </listitem>
        <listitem>
          <para>
          GRUB&#xA0;2 packages for all target architectures must be installed:
          <package>grub2-x86_64-efi</package>, <package>grub2-i386-pc</package>,
          <package>grub2-aarch64-efi</package>, and <package>grub2-ppc64le-ieee1275</package>
        </para>
        </listitem>
        <listitem>
          <para>
          The <package>shim</package> package for UEFI Secure Boot support (optional).
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative access to <filename>/srv/tftpboot</filename> or equivalent PXE root.
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-configure-grub2-main-config">
      <title>Creating the GRUB&#xA0;2 configuration</title>
      <para>
      The GRUB&#xA0;2 configuration file handles three main tasks: detecting the client's architecture, 
      managing network interfaces and loading other configuration files. This modular 
      approach provides flexibility for different deployment scenarios.
    </para>
      <procedure xml:id="proc-create-main-grub-config">
        <title>Setting up the main <filename>grub.cfg</filename> file</title>
        <step>
          <para>
          Create the main GRUB&#xA0;2 configuration file at
          <filename>/srv/tftpboot/boot/grub2/grub.cfg</filename>:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /srv/tftpboot/boot/grub2/grub.cfg &lt;&lt; 'EOF'</command>
# Architecture detection and mapping
if [ "$grub_cpu" == "i386" ]; then
  set arch='x86_64'
elif [ "$grub_cpu" == "x86_64" ]; then
  set arch='x86_64'
elif [ "$grub_cpu" == "arm64" ]; then
  set arch='aarch64'
elif [ "$grub_cpu" == "powerpc" ]; then
  set arch='ppc64le'
fi

if [ "X$arch" == "X" ]; then
  echo "ERROR: No architecture found for ${grub_cpu}"
  exit
else
  echo "Running on $arch CPU architecture"
fi
export arch


# Network interface configuration for PXE-selected NIC
# - dracut based images on SLE-16:
set ipcfg="ifname=pxe0:${net_default_mac} ip=pxe0:dhcp"
export ipcfg
# - linuxrc installer on SLE-15:
set ifcfg="ifcfg=${net_default_mac}=dhcp"
export ifcfg

# Define typical serial console kernel parameter
#set sconsole="console=tty0 console=ttyS0,115200n8"
#export sconsole

# Load machine-specific configuration if available
if [ -s "${config}/${net_default_mac}/grub.cfg" ]; then
  ## Source a host specific configuration of grub menu:
  source "${config}/${net_default_mac}/grub.cfg"
else
  ## Source default grub boot menu:
  source "${prefix}/menu.cfg"
fi
EOF
</screen>
        </step>
      </procedure>
      <variablelist>
        <title>Key configuration elements</title>
        <varlistentry>
          <term>Architecture detection</term>
          <listitem>
            <para>
            Maps GRUB&#xA0;2 CPU types to distribution architectures, enabling unified menu entries that
            work across different hardware platforms
          </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Network interface management</term>
          <listitem>
            <para>
            Defines an <varname>${ipcfg}</varname> variable using the grub2 variable
            <varname>${net_default_mac}</varname> to activate dhcp only on the PXE boot interface
            named <literal>pxe0</literal>, avoiding network probing issues on multi-interface systems.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Utility definitions</term>
          <listitem>
            <para>
            Defines a typical <varname>${sconsole}</varname> variable with serial console parameters.
          </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Machine-specific configuration</term>
          <listitem>
            <para>
            Loads optional per-machine configuration files based on MAC address, enabling
            customized per-machine boot parameters and automated installation profiles
          </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <section xml:id="sles-pxe-server-configure-grub2-menu">
      <title>Creating the unified boot menu</title>
      <para>
      The boot menu uses variables from the main configuration to provide architecture-agnostic
      menu entries that automatically adapt to different hardware platforms and installation types.
    </para>
      <procedure xml:id="proc-create-grub-menu">
        <title>Setting up the menu.cfg file</title>
        <step>
          <para>
          Create the unified boot menu at <filename>/srv/tftpboot/boot/grub2/menu.cfg</filename>:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /srv/tftpboot/boot/grub2/menu.cfg &lt;&lt; 'EOF'</command>
menuentry 'SLES-16.0 Online Installation' {
  linux  /boot/images/SLES-16.0/${arch}/linux showopts root=live:http://pxe.example.net/boot/images/SLES-16.0/${arch}/squashfs.img ${ipcfg} ${sconsole} ${autoinstall}
  initrd /boot/images/SLES-16.0/${arch}/initrd
}

menuentry 'SLES-16.0 Local Installation' {
  linux  /boot/images/SLES-16.0/${arch}/linux showopts root=live:http://pxe.example.net/boot/images/SLES-16.0/${arch}/squashfs.img inst.install_url=http://pxe.example.net/install/SLES-16.0/${arch} ${ipcfg} ${sconsole} ${autoinstall}
  initrd /boot/images/SLES-16.0/${arch}/initrd
}
EOF
</screen>
        </step>
      </procedure>
      <note>
        <title>Menu entry flexibility</title>
        <para>
        The menu entries use variables that are automatically populated based on the client
        architecture and configuration. The <varname>${arch}</varname> variable ensures the
        correct files are loaded.
       </para>
        <para>
        The optional <varname>${ipcfg}</varname> variable causes only the PXE-selected
        network interface to be set up.
       </para>
        <para>
        The optional <varname>${sconsole}</varname> variable enables a serial console in the
        installer system.
       </para>
      </note>
    </section>
    <section xml:id="sles-pxe-server-configure-grub2-machine-specific">
      <title>Machine-specific configurations</title>
      <para>
      For advanced deployments, you can create machine-specific configuration files that override
      default settings or provide automated installation parameters.
    </para>
      <procedure xml:id="proc-machine-specific-config">
        <title>Creating machine-specific configuration</title>
        <step>
          <para>
          Create a directory for machine-specific configurations:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>mkdir -p /srv/tftpboot/boot/config</command>
          </screen>
        </step>
        <step>
          <para>
          For a machine with a MAC address <literal>aa:bb:cc:dd:ee:ff</literal>, create a specific
          configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>mkdir -p /srv/tftpboot/boot/config/aa:bb:cc:dd:ee:ff</command>
          </screen>
        </step>
        <step>
          <para>
          Create the machine-specific <filename>grub.cfg</filename>:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /srv/tftpboot/boot/config/aa:bb:cc:dd:ee:ff/grub.cfg &lt;&lt; 'EOF'</command>
# Machine-specific configuration for aa:bb:cc:dd:ee:ff
set default='SLES-16.0 Full Installation'

# Activate the menu-entry after 5sec timeout
set timeout=5

# Use know predictable network interface name
set ipcfg="ip=eno1:dhcp"

# Set the autoinstall variable for this machine
set autoinstall="inst.auto=http://pxe.example.net/install/profiles/aa:bb:cc:dd:ee:ff/sles16.json"
export autoinstall

# Load the default menu
source "/boot/grub2/menu.cfg"
EOF
</screen>
          <para>
          Alternatively, provide own menu entry in the host-specific <filename>grub.cfg</filename>
          (e.g. generated for a specific boot attempt):
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /srv/tftpboot/boot/config/aa:bb:cc:dd:ee:ff/grub.cfg &lt;&lt; 'EOF'</command>
set default='SLES-16.0 Auto-Installation'
set timeout=5

menuentry 'SLES-16.0 Auto-Installation' {
  linux  /boot/images/SLES-16.0/${arch}/linux showopts root=live:http://pxe.example.net/boot/images/SLES-16.0/${arch}/squashfs.img inst.install_url=http://pxe.example.net/install/SLES-16.0/${arch} inst.auto=http://pxe.example.net/install/profiles/${net_default_mac}/sles16.json ip=eno1:dhcp
  initrd /boot/images/SLES-16.0/${arch}/initrd
}
EOF
</screen>
        </step>
      </procedure>
      <example xml:id="ex-machine-specific-parameters">
        <title>Common machine-specific parameters</title>
        <variablelist>
          <varlistentry>
            <term>
              <varname>default</varname>
            </term>
            <listitem>
              <para>
              Specifies which menu entry to boot automatically
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>timeout</varname>
            </term>
            <listitem>
              <para>
              Sets the boot timeout in seconds
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>ipcfg</varname>
            </term>
            <listitem>
              <para>
              Overrides network interface configuration for specific hardware
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <varname>autoinstall</varname>
            </term>
            <listitem>
              <para>
              Provides machine-specific automated installation profile URLs
            </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </example>
    </section>
    <section xml:id="sles-pxe-server-configure-grub2-verify">
      <title>Verifying GRUB&#xA0;2 configuration</title>
      <para>
      After creating the configuration files, verify that the setup is correct, and all required
      files are in place.
    </para>
      <procedure xml:id="proc-verify-grub-config">
        <title>Verification steps</title>
        <step>
          <para>
          Check the GRUB&#xA0;2 directory structure:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>find /srv/tftpboot/boot/grub2 -type f -name "*.cfg" -o -name "*.efi" -o -name "core.*"</command>
          </screen>
        </step>
        <step>
          <para>
          Verify the configuration file syntax by testing with GRUB&#xA0;2 tools:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>grub2-script-check /srv/tftpboot/boot/grub2/grub.cfg</command>
          </screen>
          <screen>
            <prompt>&gt; </prompt>
            <command>grub2-script-check /srv/tftpboot/boot/grub2/menu.cfg</command>
          </screen>
        </step>
        <step>
          <para>
          Ensure proper file permissions:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>chmod -R 644 /srv/tftpboot/boot/grub2/*.cfg</command>
          </screen>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>find /srv/tftpboot/boot/grub2 -type d -exec chmod 0755 {} \;</command>
          </screen>
        </step>
      </procedure>
      <important>
        <title>Configuration testing</title>
        <para>
        Test the GRUB&#xA0;2 configuration with actual PXE clients to ensure proper architecture
        detection and menu functionality. The <varname>${net_default_mac}</varname> variable is
        only available during actual network boot scenarios.
      </para>
      </important>
    </section>
    <section xml:id="sles-pxe-server-configure-grub2-troubleshooting">
      <title>Troubleshooting GRUB&#xA0;2 configuration</title>
      <para>
      Common issues and their solutions when working with GRUB&#xA0;2 PXE configurations. Each problem
      includes diagnostic steps and specific commands to resolve the issue.
    </para>
      <section xml:id="sles-pxe-server-grub2-troubleshoot-arch">
        <title>Architecture detection fails</title>
        <para>
        When GRUB&#xA0;2 fails to detect the correct architecture, clients may boot with incorrect
        binaries or fail to load altogether.
      </para>
        <procedure xml:id="proc-debug-arch-detection">
          <title>Debugging architecture detection</title>
          <step>
            <para>
            Add debug output to the GRUB&#xA0;2 configuration to see detected values:
          </para>
            <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt;&gt; /srv/tftpboot/boot/grub2/grub.cfg &lt;&lt; 'EOF'</command>
# Debug architecture detection
echo "Detected grub_cpu: ${grub_cpu}"
echo "Mapped arch: ${arch}"
sleep 3
EOF</screen>
          </step>
          <step>
            <para>
            Test the configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grub2-script-check /srv/tftpboot/boot/grub2/grub.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            If architecture mapping is incomplete, extend the detection logic:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i '/elif \[ "$grub_cpu" == "powerpc" \]/a\\nelif [ "$grub_cpu" == "riscv64" ]; then\n  set arch='\''riscv64'\''\\' /srv/tftpboot/boot/grub2/grub.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Verify the architecture-specific directories exist:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/tftpboot/boot/grub2/</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-grub2-troubleshoot-network">
        <title>Network interface not found</title>
        <para>
        Some firmware implementations may not set the <varname>${net_default_mac}</varname>
        variable correctly, causing network configuration failures.
      </para>
        <procedure xml:id="proc-debug-network-interface">
          <title>Diagnosing network interface issues</title>
          <step>
            <para>
            Add debug output to check network variables:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i '/set ipcfg=/i\\necho "Default MAC: ${net_default_mac}"\necho "Network variables set"\nsleep 2' /srv/tftpboot/boot/grub2/grub.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Create a fallback network configuration:
          </para>
            <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt;&gt; /srv/tftpboot/boot/grub2/grub.cfg &lt;&lt; 'EOF'</command>

# Fallback network configuration if net_default_mac is empty
if [ "X${net_default_mac}" == "X" ]; then
  set ipcfg="ip=dhcp"
  set ifcfg="ifcfg=*=dhcp"
  echo "WARNING: Using fallback network configuration"
  sleep 2
fi
EOF
</screen>
          </step>
          <step>
            <para>
            Test network configuration with a specific interface:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>echo 'set ipcfg="ip=eno1:dhcp"' &gt; /srv/tftpboot/boot/config/test-network.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Verify network interface names on the target system:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip link show</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-grub2-troubleshoot-file-paths">
        <title>File paths not found</title>
        <para>
        Incorrect file paths prevent GRUB&#xA0;2 from loading kernel and initrd files, causing boot
        failures.
      </para>
        <procedure xml:id="proc-debug-file-paths">
          <title>Verifying file path accessibility</title>
          <step>
            <para>
            Check if the installer files exist in the expected locations:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>find /srv/tftpboot/boot/images -name "linux" -o -name "initrd" -o -name "squashfs.img"</command>
            </screen>
          </step>
          <step>
            <para>
            Verify TFTP access to boot files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tftp localhost -c get /boot/grub2/grub.cfg /tmp/test-grub.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Test HTTP access to installer files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>curl -I http://localhost/boot/images/SLES-16.0/x86_64/linux</command>
            </screen>
          </step>
          <step>
            <para>
            Check file permissions and ownership:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/tftpboot/boot/images/SLES-16.0/*/</command>
            </screen>
          </step>
          <step>
            <para>
            Fix permissions if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>chmod -R 644 /srv/tftpboot/boot/images/</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>find /srv/tftpboot/boot/images/ -type d -exec chmod 755 {} \;</command>
            </screen>
          </step>
          <step>
            <para>
            Verify symbolic links are not broken:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>find /srv/tftpboot/boot/images/ -type l -exec ls -la {} \;</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-grub2-troubleshoot-efi">
        <title>EFI boot failures</title>
        <para>
        EFI and Secure Boot issues can prevent proper bootloader initialization or cause
        authentication failures.
      </para>
        <procedure xml:id="proc-debug-efi-boot">
          <title>Diagnosing EFI boot problems</title>
          <step>
            <para>
            Verify Secure Boot files are present:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/tftpboot/boot/grub2/x86_64-efi/*.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Check that shim (bootx64.efi or shim.efi), grub.efi and MokManager.efi files are properly copied:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>file /srv/tftpboot/boot/grub2/x86_64-efi/bootx64.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Verify EFI file integrity:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sha256sum /srv/tftpboot/boot/grub2/x86_64-efi/*.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Test if files are accessible via TFTP:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tftp localhost -c get /boot/grub2/x86_64-efi/bootx64.efi /tmp/test-shim.efi</command>
            </screen>
          </step>
          <step>
            <para>
            For aarch64 systems, verify ARM64 EFI files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/tftpboot/boot/grub2/arm64-efi/*.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Check that the DHCP configuration provides the correct bootloader paths:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -n "bootx64.efi\|shim.efi\|bootaa64.efi"
/etc/dnsmasq.d/dhcp.conf /etc/kea/kea-dhcp?.conf /etc/dhcpd?.conf</command>
            </screen>
          </step>
          <step>
            <para>
            If files are missing, recopy from the ISO mounted to /mnt or from the shim package files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp -v /mnt/EFI/BOOT/*.efi /srv/tftpboot/boot/grub2/x86_64-efi/</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp -pL /usr/share/efi/x86_64/*.efi /srv/tftpboot/boot/grub2/x86_64-efi/</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-grub2-troubleshoot-menu">
        <title>Menu entries not loading</title>
        <para>
        When GRUB&#xA0;2 loads but menu entries fail or display errors, the issue is often related to
        variable expansion or file references.
      </para>
        <procedure xml:id="proc-debug-menu-entries">
          <title>Debugging menu entry problems</title>
          <step>
            <para>
            Test menu configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grub2-script-check /srv/tftpboot/boot/grub2/menu.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Add debug output to menu entries:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i '/linux_kernel.*{images}/i\\necho "Loading: ${images}/SLES-16.0/${arch}/linux"\necho "Architecture: ${arch}"' /srv/tftpboot/boot/grub2/menu.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Verify variable expansion works correctly:
          </para>
            <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /srv/tftpboot/boot/grub2/debug-menu.cfg &lt;&lt; 'EOF'</command>
menuentry 'Debug Variables' {
  echo "arch = ${arch}"
  echo "images = ${images}"
  echo "ipcfg = ${ipcfg}"
  sleep 5
}
EOF
</screen>
          </step>
          <step>
            <para>
            Test with a simplified menu entry:
          </para>
            <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /srv/tftpboot/boot/grub2/simple-menu.cfg &lt;&lt; 'EOF'</command>
menuentry 'Simple Test' {
  linux /boot/images/SLES-16.0/x86_64/linux
  initrd /boot/images/SLES-16.0/x86_64/initrd
}
EOF
</screen>
          </step>
          <step>
            <para>
            Load the test menu temporarily:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i 's|source "${prefix}/menu.cfg"|source "${prefix}/simple-menu.cfg"|' /srv/tftpboot/boot/grub2/grub.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Restore the original menu after testing:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i 's|source "${prefix}/simple-menu.cfg"|source "${prefix}/menu.cfg"|' /srv/tftpboot/boot/grub2/grub.cfg</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-grub2-troubleshoot-logging">
        <title>Enabling detailed logging</title>
        <para>
        For persistent issues, enable comprehensive logging to capture detailed information about
        the boot process.
      </para>
        <procedure xml:id="proc-enable-grub-logging">
          <title>Setting up GRUB&#xA0;2 debug logging</title>
          <step>
            <para>
            Create a debug version of the main configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>cp /srv/tftpboot/boot/grub2/grub.cfg /srv/tftpboot/boot/grub2/grub.cfg.backup</command>
            </screen>
          </step>
          <step>
            <para>
            Add comprehensive debug output:
          </para>
            <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /srv/tftpboot/boot/grub2/debug.cfg &lt;&lt; 'EOF'</command>
# Debug configuration for GRUB troubleshooting
set debug=all
set pager=1

echo "=== GRUB Debug Information ==="
echo "grub_cpu: ${grub_cpu}"
echo "grub_platform: ${grub_platform}"
echo "net_default_mac: ${net_default_mac}"
echo "net_default_server: ${net_default_server}"
echo "============================="
sleep 5
EOF
</screen>
          </step>
          <step>
            <para>
            Include debug configuration in main file:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i '1i\source "${prefix}/debug.cfg"' /srv/tftpboot/boot/grub2/grub.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor TFTP logs during boot attempts:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo journalctl -f -u tftp.socket</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor DHCP logs for PXE requests:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo journalctl -f -u dhcpd</command>
            </screen>
          </step>
          <step>
            <para>
            Disable debug mode after troubleshooting:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i '/source "${prefix}\/debug.cfg"/d' /srv/tftpboot/boot/grub2/grub.cfg</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-configure-grub2-next-steps">
      <title>Next steps</title>
      <para>
      With GRUB&#xA0;2 properly configured, you can proceed to:
    </para>
      <itemizedlist>
        <listitem>
          <para>
          Configure HTTP and TFTP services to serve the boot files and installer content
        </para>
        </listitem>
        <listitem>
          <para>
          Set up DHCP services to direct PXE clients to the appropriate bootloaders
        </para>
        </listitem>
        <listitem>
          <para>
          Test the complete PXE boot process on target hardware
        </para>
        </listitem>
      </itemizedlist>
      <para>
      The flexible GRUB&#xA0;2 configuration system provides a foundation for sophisticated PXE
      deployment scenarios, supporting multiple architectures and installation types through a
      unified interface.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-configure-tftp">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring TFTP for PXE booting</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to configure TFTP services to serve GRUB&#xA0;2 bootloaders and PXE
        boot content for <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> installations. It covers the traditional
        <systemitem>in.tftpd</systemitem> server and the integrated TFTP functionality provided by
        <systemitem>dnsmasq</systemitem>.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-configure-tftp-intro">
      <title>Introduction</title>
      <para>
      TFTP serves bootloader files to PXE clients during the network boot process. <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase>
      <phrase><phrase os="sles4sap">16.0</phrase></phrase> supports two TFTP server implementations: the traditional
      <systemitem>in.tftpd</systemitem> server from the <package>tftp</package> package, and the
      integrated TFTP functionality within <systemitem>dnsmasq</systemitem>.
    </para>
    </section>
    <section xml:id="sles-pxe-server-configure-tftp-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          Either the <package>tftp</package> package or the <package>dnsmasq</package> package
          installed
        </para>
        </listitem>
        <listitem>
          <para>
          PXE boot files organized under <filename>/srv/tftpboot</filename>
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to configure services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-configure-tftp-intftpd">
      <title>Configuring in.tftpd server</title>
      <para>
      The <systemitem>in.tftpd</systemitem> server uses the configuration file
      <filename>/etc/sysconfig/tftp</filename> to define the TFTP root directory and server
      options.
    </para>
      <procedure xml:id="proc-configure-intftpd">
        <title>Setting up in.tftpd TFTP server</title>
        <step>
          <para>
          Optionally, enable verbose logging by setting TFTP options:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>sed -i 's/^TFTP_OPTIONS=.*/TFTP_OPTIONS="-v"/' /etc/sysconfig/tftp</command>
          </screen>
          <para>
          The <option>-v</option> option enables verbose logging to see the file names fetched via
          TFTP.
        </para>
        </step>
        <step>
          <para>
          Enable and start the TFTP service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now tftp.service</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-tftp-dnsmasq">
      <title>Configuring dnsmasq TFTP server</title>
      <para><systemitem>dnsmasq</systemitem> provides a built-in TFTP server that can be enabled and
      configured to use the <filename>/srv/tftpboot</filename> directory.
    </para>
      <procedure xml:id="proc-configure-dnsmasq-tftp">
        <title>Setting up dnsmasq TFTP functionality</title>
        <step>
          <para>
          Create the TFTP configuration file:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/dnsmasq.d/tftp.conf &lt;&lt; 'EOF'</command>
enable-tftp
tftp-root=/srv/tftpboot
EOF
</screen>
        </step>
        <step>
          <para>
          Enable and start the dnsmasq service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now dnsmasq</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-tftp-verify">
      <title>Verifying TFTP configuration</title>
      <para>
      Test the TFTP server functionality to ensure it can serve files to PXE clients.
    </para>
      <procedure xml:id="proc-verify-tftp">
        <title>Testing TFTP server functionality</title>
        <step>
          <para>
          Create a test file:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>echo "test file" | sudo tee /srv/tftpboot/test.txt</command>
          </screen>
        </step>
        <step>
          <para>
          Retrieve the test file via TFTP:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>tftp localhost -c get test.txt /tmp/tftp-test.txt</command>
          </screen>
        </step>
        <step>
          <para>
          Verify the file was retrieved successfully:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>cat /tmp/tftp-test.txt</command>
          </screen>
        </step>
        <step>
          <para>
          Clean up test files:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>rm /srv/tftpboot/test.txt /tmp/tftp-test.txt</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-tftp-troubleshooting">
      <title>Troubleshooting TFTP configuration</title>
      <para>
      Common issues when configuring TFTP services for PXE boot environments.
    </para>
      <section xml:id="sles-pxe-server-tftp-troubleshoot-service-conflicts">
        <title>Service conflicts on port 69</title>
        <para>
        Both <systemitem>in.tftpd</systemitem> and <systemitem>dnsmasq</systemitem> use UDP port 69
        for TFTP services and cannot run simultaneously.
      </para>
        <procedure xml:id="proc-resolve-tftp-conflicts">
          <title>Resolving TFTP service conflicts</title>
          <step>
            <para>
            Check which services are running:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status tftp.service dnsmasq</command>
            </screen>
          </step>
          <step>
            <para>
            Check what is using port 69:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -ulnp | grep :69</command>
            </screen>
          </step>
          <step>
            <para>
            Stop the conflicting service (example for dnsmasq):
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl stop dnsmasq</command>
            </screen>
          </step>
          <step>
            <para>
            Start your preferred TFTP service:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl start tftp.service</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-tftp-troubleshoot-directory">
        <title>TFTP directory issues</title>
        <para>
        Problems accessing the TFTP root directory can prevent file serving.
      </para>
        <procedure xml:id="proc-debug-tftp-directory">
          <title>Verifying TFTP directory configuration</title>
          <step>
            <para>
            Verify the TFTP directory setting for in.tftpd:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep TFTP_DIRECTORY /etc/sysconfig/tftp</command>
            </screen>
          </step>
          <step>
            <para>
            Verify the TFTP directory setting for dnsmasq:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep tftp-root /etc/dnsmasq.d/tftp.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Check if the directory exists:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/tftpboot/</command>
            </screen>
          </step>
          <step>
            <para>
            Create the directory if missing:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mkdir -p /srv/tftpboot</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-tftp-troubleshoot-verbose">
        <title>Enabling TFTP logging</title>
        <para>
        Verbose logging helps identify file access issues with TFTP transfers.
      </para>
        <procedure xml:id="proc-enable-tftp-verbose">
          <title>Enabling verbose TFTP logging</title>
          <step>
            <para>
            Check the current TFTP options:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep TFTP_OPTIONS /etc/sysconfig/tftp</command>
            </screen>
          </step>
          <step>
            <para>
            Enable verbose logging:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i 's/^TFTP_OPTIONS=.*/TFTP_OPTIONS="-v"/' /etc/sysconfig/tftp</command>
            </screen>
          </step>
          <step>
            <para>
            Restart the TFTP service:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart tftp.service</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor TFTP logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u tftp.service -f</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-configure-tftp-next-steps">
      <title>Next steps</title>
      <para>
      With TFTP configured, you can proceed to configure HTTP services for serving installer files
      and DHCP services for directing PXE clients to the appropriate bootloaders.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-configure-nginx">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring nginx for HTTP delivery</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to configure nginx to serve PXE boot content over HTTP, allowing
        clients to load installer files like kernel, initrd, and squashfs images from a central
        location. HTTP delivery provides better performance than TFTP for large files and is
        required for <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> Agama installations.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-configure-nginx-intro">
      <title>Introduction</title>
      <para>
      nginx serves as the HTTP server for PXE boot environments, providing access to installer
      files through Web-based delivery. The HTTP server exposes the TFTP boot directory and
      installation repositories, enabling PXE clients to download kernel images, initrd files, and
      the Agama installer components over HTTP rather than the slower TFTP protocol.
    </para>
    </section>
    <section xml:id="sles-pxe-server-configure-nginx-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          The <package>nginx</package> package installed
        </para>
        </listitem>
        <listitem>
          <para>
          PXE boot files organized under <filename>/srv/tftpboot/boot</filename>
        </para>
        </listitem>
        <listitem>
          <para>
          Installation repositories available under <filename>/srv/install</filename>
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to modify nginx configuration
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-configure-nginx-setup">
      <title>Configuring nginx for PXE boot</title>
      <para>
      The nginx configuration defines location aliases that expose the TFTP boot directory and
      installation repositories through HTTP URLs.
    </para>
      <procedure xml:id="proc-configure-nginx">
        <title>Setting up nginx HTTP server</title>
        <step>
          <para>
          Edit the nginx configuration file:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>vim /etc/nginx/nginx.conf</command>
          </screen>
        </step>
        <step>
          <para>
          Configure the HTTP server block in the <literal>http</literal> section:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/nginx/nginx.conf &lt;&lt; 'EOF'</command>
http {

    include             mime.types;
    default_type        application/octet-stream;

    charset             utf-8;
    sendfile            on;
    keepalive_timeout   65;

    server {
        listen          80  default_server;
        listen     [::]:80  default_server;

        location / {
            root   /srv/www/htdocs/;
            index  index.html index.htm;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /srv/www/htdocs/;
        }

        # Expose TFTP boot directory for HTTP boot
        location /boot {
            alias      /srv/tftpboot/boot;
            autoindex  on;
        }

        # Expose installation repositories and profiles
        location /install {
            alias      /srv/install;
            autoindex  on;
        }
    }
}

events {
    worker_connections  1024;
}
EOF
</screen>
        </step>
        <step>
          <para>
          Test the nginx configuration syntax:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>nginx -t</command>
          </screen>
        </step>
        <step>
          <para>
          Enable and start the nginx service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now nginx.service</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-nginx-verify">
      <title>Verifying nginx configuration</title>
      <para>
      Test the HTTP server functionality to ensure it can serve PXE boot files and installation
      content to clients.
    </para>
      <procedure xml:id="proc-verify-nginx">
        <title>Testing nginx HTTP server</title>
        <step>
          <para>
          Test HTTP access to boot files:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>curl -I http://localhost/boot/</command>
          </screen>
        </step>
        <step>
          <para>
          Test access to the installation directory:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>curl -I http://localhost/install/</command>
          </screen>
        </step>
        <step>
          <para>
          Verify a specific installer file is accessible:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>curl -I http://localhost/boot/images/SLES-16.0/x86_64/liveiso/LiveOS/squashfs.img</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-nginx-troubleshooting">
      <title>Troubleshooting nginx configuration</title>
      <para>
      Common issues when configuring nginx for PXE boot HTTP delivery.
    </para>
      <section xml:id="sles-pxe-server-nginx-troubleshoot-config">
        <title>Configuration syntax errors</title>
        <para>
        Incorrect nginx configuration syntax prevents the service from starting or reloading
        properly.
      </para>
        <procedure xml:id="proc-debug-nginx-config">
          <title>Resolving nginx configuration issues</title>
          <step>
            <para>
            Test the configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>nginx -t</command>
            </screen>
          </step>
          <step>
            <para>
            Check nginx service status if startup fails:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status nginx.service</command>
            </screen>
          </step>
          <step>
            <para>
            View detailed error logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u nginx.service -f</command>
            </screen>
          </step>
          <step>
            <para>
            Check nginx error log file:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tail -f /var/log/nginx/error.log</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-nginx-troubleshoot-permissions">
        <title>File access and permission issues</title>
        <para>
        nginx may fail to serve files due to incorrect permissions or missing directories.
      </para>
        <procedure xml:id="proc-debug-nginx-permissions">
          <title>Resolving file access problems</title>
          <step>
            <para>
            Check if the boot directory exists and is accessible:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/tftpboot/boot/</command>
            </screen>
          </step>
          <step>
            <para>
            Check if the install directory exists:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/install/</command>
            </screen>
          </step>
          <step>
            <para>
            Verify nginx can read the directories:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo -u nginx ls /srv/tftpboot/boot/</command>
            </screen>
          </step>
          <step>
            <para>
            Create missing directories if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mkdir -p /srv/install</command>
            </screen>
          </step>
          <step>
            <para>
            Set appropriate permissions:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>chmod -R 755 /srv/tftpboot/boot /srv/install</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-nginx-troubleshoot-port">
        <title>Port binding conflicts</title>
        <para>
        nginx may fail to start if another service is using port 80.
      </para>
        <procedure xml:id="proc-debug-nginx-port">
          <title>Resolving port conflicts</title>
          <step>
            <para>
            Check what is using port 80:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -tlnp | grep :80</command>
            </screen>
          </step>
          <step>
            <para>
            Stop conflicting services if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl stop apache2</command>
            </screen>
          </step>
          <step>
            <para>
            Start nginx service:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl start nginx.service</command>
            </screen>
          </step>
          <step>
            <para>
            Verify nginx is listening on port 80:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -tlnp | grep :80</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-configure-nginx-next-steps">
      <title>Next steps</title>
      <para>
      With nginx configured for HTTP delivery, you can proceed to configure DHCP services for
      directing PXE clients to the appropriate bootloaders and HTTP resources.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-configure-dns">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring a DNS server using dnsmasq</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to configure DNS services using dnsmasq to provide host name
        resolution for PXE clients accessing <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> installation resources.
        DNS configuration enables clients to use host names instead of IP addresses in boot URLs and
        DHCP configurations.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-configure-dns-intro">
      <title>Introduction</title>
      <para>
      DNS services enable PXE clients to resolve host names in boot URLs and installation sources.
      While full DNS server configuration is beyond the scope of this document, this section
      provides a basic DNS configuration using dnsmasq that allows clients to resolve the PXE
      server host name (<replaceable>PXE.EXAMPLE.NET</replaceable>) to its IP addresses.
    </para>
      <para>
      Without DNS configuration, boot URLs must use IP addresses directly, such as
      <literal>http://192.168.1.200/</literal> or <literal>http://[2001:db8:0:1::200]/</literal>.
      Some BIOS/UEFI firmware implementations do not support host names in DHCP TFTP URLs and
      require IP addresses like <literal>tftp://[2001:db8:0:1::200]/</literal>.
    </para>
    </section>
    <section xml:id="sles-pxe-server-configure-dns-requirements">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          The <package>dnsmasq</package> package installed
        </para>
        </listitem>
        <listitem>
          <para>
          Static IP addresses configured for the PXE server
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to configure DNS services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-configure-dns-setup">
      <title>Configuring dnsmasq DNS services</title>
      <para>
      The dnsmasq DNS configuration provides local host name resolution and uses upstream
      name servers for external queries.
    </para>
      <procedure xml:id="proc-configure-dnsmasq-dns">
        <title>Setting up dnsmasq DNS server</title>
        <step>
          <para>
          Create the DNS configuration file for dnsmasq:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/dnsmasq.d/dns.conf &lt;&lt; 'EOF'</command>
# DNS configuration file for dnsmasq

# Log DNS queries
log-queries

# DNS cache behavior
cache-size=10000
local-ttl=60
neg-ttl=10

# Never forward A or AAAA queries for plain names to upstream name servers
domain-needed

# Add local domain to simple names in /etc/hosts and DHCP
expand-hosts

# Specifies DNS domain and networks including local forward and reverse declarations
domain=<replaceable>EXAMPLE.NET</replaceable>,192.168.1.0/24,local
domain=<replaceable>EXAMPLE.NET</replaceable>,2001:db8:0:1::/64,local
EOF
</screen>
        </step>
        <step>
          <para>
          Add host name entries to the system hosts file:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt;&gt; /etc/hosts &lt;&lt; 'EOF'</command>
192.168.1.200 <replaceable>PXE.EXAMPLE.NET</replaceable>
2001:db8:0:1::200 <replaceable>PXE.EXAMPLE.NET</replaceable>
EOF
</screen>
        </step>
        <step>
          <para>
          Test the dnsmasq configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>dnsmasq --test</command>
          </screen>
        </step>
        <step>
          <para>
          Enable and start the dnsmasq service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now dnsmasq</command>
          </screen>
        </step>
      </procedure>
      <note>
        <title>DNS forwarding behavior</title>
        <para>
        By default, dnsmasq uses the name servers in <filename>/etc/resolv.conf</filename> as
        forwarders and provides records from <filename>/etc/hosts</filename>. This allows the PXE
        server to resolve external host names while providing local resolution for PXE-related
        services.
      </para>
      </note>
    </section>
    <section xml:id="sles-pxe-server-configure-dns-verify">
      <title>Verifying DNS configuration</title>
      <para>
      Test the DNS server functionality to ensure host name resolution works for PXE clients.
    </para>
      <procedure xml:id="proc-verify-dns">
        <title>Testing DNS server functionality</title>
        <step>
          <para>
          Test IPv4 host name resolution:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>nslookup <replaceable>PXE.EXAMPLE.NET</replaceable> localhost</command>
          </screen>
        </step>
        <step>
          <para>
          Test IPv6 host name resolution:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>nslookup <replaceable>PXE.EXAMPLE.NET</replaceable> localhost | grep 2001:db8</command>
          </screen>
        </step>
        <step>
          <para>
          Test reverse DNS lookup for IPv4:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>nslookup 192.168.1.200 localhost</command>
          </screen>
        </step>
        <step>
          <para>
          Verify external DNS forwarding still works:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>nslookup google.com localhost</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-dns-troubleshooting">
      <title>Troubleshooting DNS configuration</title>
      <para>
      Common issues when configuring dnsmasq for DNS services in PXE environments.
    </para>
      <section xml:id="sles-pxe-server-dns-troubleshoot-config">
        <title>Configuration and service issues</title>
        <para>
        dnsmasq may fail to start due to configuration errors or port conflicts.
      </para>
        <procedure xml:id="proc-debug-dns-config">
          <title>Resolving DNS configuration problems</title>
          <step>
            <para>
            Test the dnsmasq configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>dnsmasq --test</command>
            </screen>
          </step>
          <step>
            <para>
            Check dnsmasq service status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status dnsmasq</command>
            </screen>
          </step>
          <step>
            <para>
            Check what is using DNS port 53:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -ulnp | grep :53</command>
            </screen>
          </step>
          <step>
            <para>
            View dnsmasq logs for errors:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dnsmasq -f</command>
            </screen>
          </step>
          <step>
            <para>
            Stop conflicting DNS services if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl stop systemd-resolved</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dns-troubleshoot-resolution">
        <title>Host name resolution failures</title>
        <para>
        DNS queries may fail due to incorrect configuration or missing host name entries.
      </para>
        <procedure xml:id="proc-debug-dns-resolution">
          <title>Diagnosing DNS resolution issues</title>
          <step>
            <para>
            Check if host name entries exist in hosts file:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep <replaceable>PXE.EXAMPLE.NET</replaceable> /etc/hosts</command>
            </screen>
          </step>
          <step>
            <para>
            Verify domain configuration in dnsmasq:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep domain= /etc/dnsmasq.d/dns.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test DNS query with verbose output:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>dig @localhost <replaceable>PXE.EXAMPLE.NET</replaceable></command>
            </screen>
          </step>
          <step>
            <para>
            Monitor dnsmasq query logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dnsmasq | grep "query"</command>
            </screen>
          </step>
          <step>
            <para>
            Restart dnsmasq to reload the configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart dnsmasq</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dns-troubleshoot-forwarding">
        <title>DNS forwarding problems</title>
        <para>
        External DNS queries may fail if the upstream name server configuration is incorrect.
      </para>
        <procedure xml:id="proc-debug-dns-forwarding">
          <title>Troubleshooting DNS forwarding issues</title>
          <step>
            <para>
            Check the upstream name server configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>cat /etc/resolv.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test direct query to the upstream name server:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>nslookup google.com 8.8.8.8</command>
            </screen>
          </step>
          <step>
            <para>
            Check dnsmasq forwarding configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -E "server=|no-resolv" /etc/dnsmasq.d/dns.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Add a specific upstream name server if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>echo "server=8.8.8.8" &gt;&gt; /etc/dnsmasq.d/dns.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Restart dnsmasq service:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart dnsmasq</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-configure-dns-next-steps">
      <title>Next steps</title>
      <para>
      With DNS services configured, PXE clients can now resolve host names in boot URLs and
      installation sources. You can proceed to configure DHCP services that reference the DNS
      server for client configuration.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-configure-ntp">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring an NTP server using <systemitem>chrony</systemitem></title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to configure NTP services using <systemitem>chrony</systemitem>
        to provide accurate time synchronization for PXE clients during <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase>
        <phrase><phrase os="sles4sap">16.0</phrase></phrase> installations. Proper time synchronization is essential for certificate
        validation and system logging during network-based installations.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-configure-ntp-intro">
      <title>Introduction</title>
      <para>
      NTP services ensure accurate time synchronization across network infrastructure. For PXE boot
      environments, synchronized time is crucial for certificate validation during HTTPS
      connections, proper log timestamps, and coordinated system operations. This section provides
      basic NTP server configuration using <systemitem>chrony</systemitem>.
    </para>
    </section>
    <section xml:id="sles-pxe-server-configure-ntp-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          The <package>chrony</package> package installed
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>zypper install chrony</command>
          </screen>
        </listitem>
        <listitem>
          <para>
          Network connectivity to upstream NTP servers
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to configure NTP services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-configure-ntp-setup">
      <title>Configuring <systemitem>chrony</systemitem> NTP service</title>
      <para>
      The <systemitem>chrony</systemitem> service provides NTP functionality with automatic time
      synchronization to upstream servers and local time-serving capabilities for network clients.
    </para>
      <procedure xml:id="proc-configure-chrony">
        <title>Setting up <systemitem>chrony</systemitem> NTP server</title>
        <step>
          <para>
          Enable and start the <systemitem>chrony</systemitem> service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now chronyd.service</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-ntp-verify">
      <title>Verifying NTP configuration</title>
      <para>
      Test the NTP service functionality to ensure time synchronization works correctly.
    </para>
      <procedure xml:id="proc-verify-ntp">
        <title>Testing NTP server functionality</title>
        <step>
          <para>
          Check <systemitem>chrony</systemitem> service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status chronyd.service</command>
          </screen>
        </step>
        <step>
          <para>
          View the current time synchronization status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>chronyc tracking</command>
          </screen>
        </step>
        <step>
          <para>
          List configured NTP sources:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>chronyc sources</command>
          </screen>
        </step>
        <step>
          <para>
          Check NTP server statistics:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>chronyc sourcestats</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-configure-ntp-troubleshooting">
      <title>Troubleshooting NTP configuration</title>
      <para>
      Common issues when configuring <systemitem>chrony</systemitem> for NTP services in PXE
      environments.
    </para>
      <section xml:id="sles-pxe-server-ntp-troubleshoot-service">
        <title>Service startup issues</title>
        <para><systemitem>chrony</systemitem> service may fail to start due to configuration errors or
        network connectivity problems.
      </para>
        <procedure xml:id="proc-debug-ntp-service">
          <title>Resolving NTP service problems</title>
          <step>
            <para>
            Check <systemitem>chrony</systemitem> service status and logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status chronyd.service</command>
            </screen>
          </step>
          <step>
            <para>
            View detailed service logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u chronyd.service -f</command>
            </screen>
          </step>
          <step>
            <para>
            Test <systemitem>chrony</systemitem> configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>chronyd -Q</command>
            </screen>
          </step>
          <step>
            <para>
            Restart the service if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart chronyd.service</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-ntp-troubleshoot-sync">
        <title>Time synchronization failures</title>
        <para>
        Time synchronization may fail due to network issues or incorrect server configuration.
      </para>
        <procedure xml:id="proc-debug-ntp-sync">
          <title>Diagnosing time synchronization issues</title>
          <step>
            <para>
            Check the current synchronization status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>chronyc tracking</command>
            </screen>
          </step>
          <step>
            <para>
            View NTP source connectivity:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>chronyc sources -v</command>
            </screen>
          </step>
          <step>
            <para>
            Force immediate synchronization:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>chronyc makestep</command>
            </screen>
          </step>
          <step>
            <para>
            Check system time against hardware clock:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>timedatectl status</command>
            </screen>
          </step>
          <step>
            <para>
            Verify network connectivity to NTP servers:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>chronyc activity</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-ntp-troubleshoot-firewall">
        <title>Firewall and network issues</title>
        <para>
        NTP traffic may be blocked by firewall rules, preventing time synchronization.
      </para>
        <procedure xml:id="proc-debug-ntp-firewall">
          <title>Resolving NTP network connectivity</title>
          <step>
            <para>
            Check if NTP port is open in firewall:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>firewall-cmd --list-services | grep ntp</command>
            </screen>
          </step>
          <step>
            <para>
            Add NTP service to firewall if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>firewall-cmd --permanent --add-service=ntp</command>
            </screen>
          </step>
          <step>
            <para>
            Reload firewall configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>firewall-cmd --reload</command>
            </screen>
          </step>
          <step>
            <para>
            Test NTP connectivity manually:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ntpdate -q pool.ntp.org</command>
            </screen>
          </step>
          <step>
            <para>
            Check <systemitem>chrony</systemitem> port usage:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -ulnp | grep :123</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-configure-ntp-next-steps">
      <title>Next steps</title>
      <para>
      With NTP services configured, the PXE server and clients will maintain accurate time
      synchronization. This ensures proper certificate validation and coordinated system operations
      during network-based installations.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-ipv6-router">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring IPv6 router advertisement</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section describes how to configure IPv6 router advertisement functionality to provide
        adequate router advertisements for PXE clients. IPv6 RA enables IPv6 routing configuration
        and stateful DHCPv6 address automatic configuration for <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>
        installations.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-ipv6-router-intro">
      <title>Introduction</title>
      <para>
      IPv6 router advertisement (RA) provides essential network configuration information to PXE
      clients, including IPv6 routing and DHCPv6 address automatic configuration settings. This
      section assumes that an IPv6 router is configured to provide adequate router advertisements
      to configure IPv6 routing to the network and default route, and enable stateful DHCPv6
      address automatic configuration using <literal>AdvManagedFlag on</literal>.
    </para>
    </section>
    <section xml:id="sles-pxe-server-ipv6-router-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          The <package>radvd</package> package installed
        </para>
        </listitem>
        <listitem>
          <para>
          IPv6 network configuration on the server interface
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to configure router advertisement services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-ipv6-router-setup">
      <title>Configuring <systemitem>radvd</systemitem> for IPv6 router advertisement</title>
      <para>
      The <systemitem>radvd</systemitem> service provides IPv6 router advertisement functionality
      using configuration defined in <filename>/etc/radvd.conf</filename>.
    </para>
      <procedure xml:id="proc-configure-radvd">
        <title>Setting up <systemitem>radvd</systemitem> IPv6 router advertisement</title>
        <step>
          <para>
          Configure the <systemitem>radvd</systemitem> service:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/radvd.conf &lt;&lt; 'EOF'</command>
interface eno1
{
    # radvd options
    IgnoreIfMissing on;                 # Do not fail and exit when interface is missed
    AdvSendAdvert on;                   # Sending RAs on the interface is not disabled

    # Configuration settings

    AdvManagedFlag on;                  # Request IPv6 address and dns options via DHCPv6
    AdvOtherConfigFlag off;             # Request only dns info via DHCPv6, IP via SLAAC

    AdvDefaultLifetime 1800;            # Add default route via this router for 1800sec

    prefix 2001:db8:0:1::/64            # Add direct route for this local network/prefix
    {
        AdvAutonomous           off;    # Assign IPv6 address via SLAAC
        AdvValidLifetime        7200;
        AdvPreferredLifetime    3600;
    };
};
EOF
</screen>
        </step>
        <step>
          <para>
          Enable and start the <systemitem>radvd</systemitem> service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now radvd</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-ipv6-router-verify">
      <title>Verifying IPv6 router advertisement</title>
      <para>
      Test the IPv6 RA functionality to ensure proper configuration and operation.
    </para>
      <procedure xml:id="proc-verify-radvd">
        <title>Testing IPv6 router advertisement</title>
        <step>
          <para>
          Check <systemitem>radvd</systemitem> service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status radvd</command>
          </screen>
        </step>
        <step>
          <para>
          Review and verify IPv6 RA settings using <command>ravdump</command>
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>radvdump</command>
          </screen>
          <para>
          The <command>radvdump</command> utility displays IPv6 RA settings sent by the IPv6 router
          every few minutes.
        </para>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-ipv6-router-forwarding">
      <title>Configuring IP forwarding for router functionality</title>
      <para>
      If the PXE server also acts as a router, IP forwarding must be enabled to allow the system to
      function in a router role.
    </para>
      <procedure xml:id="proc-enable-ip-forwarding">
        <title>Enabling IP forwarding on the PXE server</title>
        <step>
          <para>
          Create the network configuration file:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/sysctl.d/90-network.conf &lt;&lt; 'EOF'</command>
# This machine is a router
net.ipv4.conf.all.forwarding = 1
net.ipv6.conf.all.forwarding = 1

# Accept host autoconf on router uplink
net.ipv6.conf.uplink.accept_ra = 2
EOF
</screen>
        </step>
        <step>
          <para>
          Apply the network configuration settings:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>sysctl -p /etc/sysctl.d/90-network.conf</command>
          </screen>
        </step>
      </procedure>
      <note>
        <title>Router configuration considerations</title>
        <para>
        A router does not process IPv6 RAs for host automatic configuration by default. To accept
        IPv6 RA on a router uplink interface, the <literal>accept_ra = 2</literal> sysctl setting
        is required. Consult the Network Configuration section in the Administration Guide for
        further details on router configuration, including firewall adjustments and other required
        steps.
      </para>
      </note>
    </section>
    <section xml:id="sles-pxe-server-ipv6-router-troubleshooting">
      <title>Troubleshooting IPv6 router advertisement</title>
      <para>
      Common issues when configuring IPv6 router advertisement for PXE environments.
    </para>
      <section xml:id="sles-pxe-server-ipv6-troubleshoot-service">
        <title><systemitem>radvd</systemitem> service issues</title>
        <para>
        The <systemitem>radvd</systemitem> service may fail to start due to configuration errors or
        interface problems.
      </para>
        <procedure xml:id="proc-debug-radvd-service">
          <title>Resolving <systemitem>radvd</systemitem> service problems</title>
          <step>
            <para>
            Check <systemitem>radvd</systemitem> service status and logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status radvd</command>
            </screen>
          </step>
          <step>
            <para>
            View detailed service logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u radvd -f</command>
            </screen>
          </step>
          <step>
            <para>
            Test <systemitem>radvd</systemitem> configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>radvd -C /etc/radvd.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Check if the specified interface exists:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip link show eno1</command>
            </screen>
          </step>
          <step>
            <para>
            Restart the service after fixing configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart radvd</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-ipv6-troubleshoot-forwarding">
        <title>IP forwarding configuration issues</title>
        <para>
        Incorrect IP forwarding settings can prevent proper router functionality.
      </para>
        <procedure xml:id="proc-debug-ip-forwarding">
          <title>Diagnosing IP forwarding problems</title>
          <step>
            <para>
            Check current IP forwarding status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sysctl net.ipv4.conf.all.forwarding</command>
            </screen>
          </step>
          <step>
            <para>
            Check IPv6 forwarding status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sysctl net.ipv6.conf.all.forwarding</command>
            </screen>
          </step>
          <step>
            <para>
            Verify sysctl configuration file:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>cat /etc/sysctl.d/90-network.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Apply configuration if values are incorrect:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sysctl -p /etc/sysctl.d/90-network.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Check accept_ra setting on uplink interface:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sysctl net.ipv6.conf.uplink.accept_ra</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-ipv6-troubleshoot-ra">
        <title>Router advertisement reception issues</title>
        <para>
        Clients may not receive or process IPv6 router advertisements correctly.
      </para>
        <procedure xml:id="proc-debug-ra-reception">
          <title>Troubleshooting RA reception problems</title>
          <step>
            <para>
            Monitor router advertisements using <command>ravdump</command>:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>radvdump -d</command>
            </screen>
          </step>
          <step>
            <para>
            Check IPv6 interface configuration on clients:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip -6 addr show</command>
            </screen>
          </step>
          <step>
            <para>
            Verify IPv6 routing table on clients:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip -6 route show</command>
            </screen>
          </step>
          <step>
            <para>
            Test IPv6 connectivity to the router:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ping6 2001:db8:0:1::1</command>
            </screen>
          </step>
          <step>
            <para>
            Check firewall rules for ICMPv6:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>firewall-cmd --list-protocols | grep ipv6-icmp</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-ipv6-router-next-steps">
      <title>Next steps</title>
      <para>
      With IPv6 router advertisement configured, PXE clients can receive a proper IPv6 network
      configuration. This enables DHCPv6 functionality and IPv6 connectivity for network-based
      installations.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-dhcp-dnsmasq">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring a DHCP server using dnsmasq</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to configure DHCP services using dnsmasq to provide
        network configuration and PXE boot information for <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>
        installations. The dnsmasq DHCP server uses tag-based configuration to support
        both IPv4 and IPv6 PXE clients with UEFI and BIOS boot capabilities.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-dhcp-dnsmasq-intro">
      <title>Introduction</title>
      <para>
      The dnsmasq DHCP server provides network configuration and boot file information
      to PXE clients using a tag-based system to match client types and provide
      appropriate bootloaders. This configuration supports both PXEClient and HTTPClient
      matches that work for DHCPv4 and DHCPv6, enabling boot via UEFI and BIOS systems
      across multiple architectures.
    </para>
      <important>
        <title>HTTPClient limitations in dnsmasq</title>
        <para>
        dnsmasq version 2.90 and earlier does not support sending the vendor-class
        option6:16 back to DHCPv6 clients for HTTPClient configurations. For full
        HTTPClient support, consider using Kea or ISC DHCP servers.
      </para>
      </important>
    </section>
    <section xml:id="sles-pxe-server-dhcp-dnsmasq-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          The <package>dnsmasq</package> package installed
        </para>
        </listitem>
        <listitem>
          <para>
          PXE boot files properly organized under <filename>/srv/tftpboot</filename>
        </para>
        </listitem>
        <listitem>
          <para>
          Network interface configured for DHCP service
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to configure DHCP services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-dhcp-dnsmasq-setup">
      <title>Configuring dnsmasq DHCP services</title>
      <para>
      The dnsmasq DHCP configuration includes client type matching, network ranges,
      and boot file assignments for both IPv4 and IPv6 networks.
    </para>
      <procedure xml:id="proc-configure-dnsmasq-dhcp">
        <title>Setting up dnsmasq DHCP server</title>
        <step>
          <para>
          Create the DHCP configuration file for dnsmasq:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/dnsmasq.d/dhcp.conf &lt;&lt; 'EOF'</command>
# DHCP configuration file for dnsmasq

# Log DHCP processing
log-dhcp

# This is the only DHCP server, don't ignore unknown clients/send NAK
dhcp-authoritative

# Disable re-use of the DHCPv4 servername and filename fields as extra
# option space, which may confuse old or broken clients
dhcp-no-override

# IPv4 PXE/HTTP boot client matches (no enterprise number)
# Match client type in PXEClient:Arch and map to a tag
dhcp-vendorclass=set:tftp_bios_x86_pc,PXEClient:Arch:00000
dhcp-vendorclass=set:tftp_uefi_x86_64,PXEClient:Arch:00007
dhcp-vendorclass=set:tftp_ieee_ppc_64,PXEClient:Arch:0000e
dhcp-vendorclass=set:tftp_uefi_arm_64,PXEClient:Arch:00011
# Match client type in HTTPClient:Arch and map to a tag
dhcp-vendorclass=set:http_uefi_x86_64,HTTPClient:Arch:00016
dhcp-vendorclass=set:http_uefi_arm_64,HTTPClient:Arch:00019

# IPv6 PXE/HTTP boot client matches (enterprise:343 intel)
# Match client type in PXEClient:Arch and map to a tag
dhcp-vendorclass=set:tftp_bios_x86_pc,enterprise:343,PXEClient:Arch:00000
dhcp-vendorclass=set:tftp_uefi_x86_64,enterprise:343,PXEClient:Arch:00007
dhcp-vendorclass=set:tftp_ieee_ppc_64,enterprise:343,PXEClient:Arch:0000e
dhcp-vendorclass=set:tftp_uefi_arm_64,enterprise:343,PXEClient:Arch:00011
# Match client type in HTTPClient:Arch and map to a tag
dhcp-vendorclass=set:http_uefi_x86_64,enterprise:343,HTTPClient:Arch:00016
dhcp-vendorclass=set:http_uefi_arm_64,enterprise:343,HTTPClient:Arch:00019
EOF
</screen>
        </step>
        <step>
          <para>
          Configure IPv4 DHCP range and options:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt;&gt; /etc/dnsmasq.d/dhcp.conf &lt;&lt; 'EOF'</command>

# IPv4 range and options
dhcp-range=set:net0v4,192.168.1.100,192.168.1.199,255.255.255.0,1h
dhcp-option=tag:net0v4,option:domain-search,example.net
dhcp-option=tag:net0v4,option:dns-server,192.168.1.200
dhcp-option=tag:net0v4,option:ntp-server,192.168.1.1
dhcp-option=tag:net0v4,option:router,192.168.1.1
EOF
</screen>
        </step>
        <step>
          <para>
          Configure IPv4 PXE boot options:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt;&gt; /etc/dnsmasq.d/dhcp.conf &lt;&lt; 'EOF'</command>

# IPv4 PXEClient boot
dhcp-boot=tag:net0v4,tag:tftp_bios_x86_pc,/boot/grub2/i386-pc/core.0,192.168.1.200
dhcp-boot=tag:net0v4,tag:tftp_uefi_x86_64,/boot/grub2/x86_64-efi/bootx64.efi,192.168.1.200
dhcp-boot=tag:net0v4,tag:tftp_ieee_ppc_64,/boot/grub2/powerpc-ieee1275/core.elf,192.168.1.200
dhcp-boot=tag:net0v4,tag:tftp_uefi_arm_64,/boot/grub2/arm64-efi/bootaa64.efi,192.168.1.200

# IPv4 HTTPClient boot
dhcp-option-force=tag:net0v4,tag:http_uefi_x86_64,option:vendor-class,HTTPClient
dhcp-boot=tag:net0v4,tag:http_uefi_x86_64,http://192.168.1.200/boot/grub2/x86_64-efi/bootx64.efi
dhcp-option-force=tag:net0v4,tag:http_uefi_arm_64,option:vendor-class,HTTPClient
dhcp-boot=tag:net0v4,tag:http_uefi_arm_64,http://192.168.1.200/boot/grub2/arm64-efi/bootaa64.efi
EOF
</screen>
        </step>
        <step>
          <para>
          Configure IPv6 DHCP range and options:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt;&gt; /etc/dnsmasq.d/dhcp.conf &lt;&lt; 'EOF'</command>

# IPv6 range and options
dhcp-range=set:net0v6,2001:db8:0:1:d::,2001:db8:0:1:d::ffff,64,1h
dhcp-option=tag:net0v6,option6:domain-search,example.net
dhcp-option=tag:net0v6,option6:dns-server,[2001:db8:0:1::200]
dhcp-option=tag:net0v6,option6:sntp-server,[2001:db8:0:1::1]
EOF
</screen>
        </step>
        <step>
          <para>
          Configure IPv6 PXE boot options:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt;&gt; /etc/dnsmasq.d/dhcp.conf &lt;&lt; 'EOF'</command>

# IPv6 PXEClient boot
dhcp-option=tag:net0v6,tag:tftp_bios_x86_pc,option6:bootfile-url,tftp://[2001:db8:0:1::200]/boot/grub2/i386-pc/core.0
dhcp-option=tag:net0v6,tag:tftp_uefi_x86_64,option6:bootfile-url,tftp://[2001:db8:0:1::200]/boot/grub2/x86_64-efi/bootx64.efi
dhcp-option=tag:net0v6,tag:tftp_ieee_ppc_64,option6:bootfile-url,tftp://[2001:db8:0:1::200]/boot/grub2/powerpc-ieee1275/core.elf
dhcp-option=tag:net0v6,tag:tftp_uefi_arm_64,option6:bootfile-url,tftp://[2001:db8:0:1::200]/boot/grub2/arm64-efi/bootaa64.efi

# IPv6 HTTPClient boot
# Note: dnsmasq &lt;= 2.90 does not support sending vendor-class option6:16 back to client
EOF
</screen>
        </step>
        <step>
          <para>
          Test the dnsmasq configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>dnsmasq --test</command>
          </screen>
        </step>
        <step>
          <para>
          Enable and start the dnsmasq service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now dnsmasq</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-dnsmasq-verify">
      <title>Verifying DHCP configuration</title>
      <para>
      Test the DHCP server functionality to ensure proper network configuration
      and boot file delivery to PXE clients.
    </para>
      <procedure xml:id="proc-verify-dhcp-dnsmasq">
        <title>Testing dnsmasq DHCP server</title>
        <step>
          <para>
          Check dnsmasq service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status dnsmasq</command>
          </screen>
        </step>
        <step>
          <para>
          Verify DHCP port binding:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>ss -ulnp | grep :67</command>
          </screen>
        </step>
        <step>
          <para>
          Monitor DHCP lease assignments:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>journalctl -u dnsmasq -f</command>
          </screen>
        </step>
        <step>
          <para>
          Check active DHCP leases:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>cat /var/lib/dhcp/dhcpd.leases</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-dnsmasq-troubleshooting">
      <title>Troubleshooting dnsmasq DHCP configuration</title>
      <para>
      Common issues when configuring dnsmasq for DHCP services in PXE environments.
    </para>
      <section xml:id="sles-pxe-server-dhcp-dnsmasq-troubleshoot-service">
        <title>Service startup and configuration issues</title>
        <para>
        dnsmasq may fail to start due to configuration errors or port conflicts
        with other DHCP services.
      </para>
        <procedure xml:id="proc-debug-dnsmasq-dhcp-service">
          <title>Resolving dnsmasq DHCP service problems</title>
          <step>
            <para>
            Test dnsmasq configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>dnsmasq --test</command>
            </screen>
          </step>
          <step>
            <para>
            Check for DHCP port conflicts:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -ulnp | grep :67</command>
            </screen>
          </step>
          <step>
            <para>
            Stop conflicting DHCP services:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl stop dhcpd</command>
            </screen>
          </step>
          <step>
            <para>
            View detailed service logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dnsmasq -f</command>
            </screen>
          </step>
          <step>
            <para>
            Restart dnsmasq after resolving conflicts:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart dnsmasq</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-dnsmasq-troubleshoot-leases">
        <title>DHCP lease assignment problems</title>
        <para>
        Clients may fail to receive IP addresses due to range configuration
        or network connectivity issues.
      </para>
        <procedure xml:id="proc-debug-dhcp-leases">
          <title>Diagnosing DHCP lease issues</title>
          <step>
            <para>
            Check DHCP range configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep dhcp-range /etc/dnsmasq.d/dhcp.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor DHCP requests in real-time:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dnsmasq -f | grep DHCP</command>
            </screen>
          </step>
          <step>
            <para>
            Check network interface status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip addr show</command>
            </screen>
          </step>
          <step>
            <para>
            Verify DHCP authoritative setting:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep dhcp-authoritative /etc/dnsmasq.d/dhcp.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test DHCP response with dhcping:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>dhcping -s 192.168.1.200</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-dnsmasq-troubleshoot-pxe">
        <title>PXE boot file delivery issues</title>
        <para>
        PXE clients may receive IP addresses but fail to boot due to incorrect
        boot file configuration or client type matching problems.
      </para>
        <procedure xml:id="proc-debug-pxe-boot">
          <title>Troubleshooting PXE boot configuration</title>
          <step>
            <para>
            Check client vendor class matching:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep dhcp-vendorclass /etc/dnsmasq.d/dhcp.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Verify boot file paths:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep dhcp-boot /etc/dnsmasq.d/dhcp.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test TFTP access to boot files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tftp 192.168.1.200 -c get /boot/grub2/x86_64-efi/bootx64.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor PXE-specific DHCP logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dnsmasq | grep -E "PXE|HTTP"</command>
            </screen>
          </step>
          <step>
            <para>
            Check tag assignment in logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dnsmasq | grep "tags:"</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-dnsmasq-troubleshoot-ipv6">
        <title>IPv6 DHCP configuration issues</title>
        <para>
        IPv6 DHCP clients require proper router advertisement configuration
        and may have different addressing requirements than IPv4.
      </para>
        <procedure xml:id="proc-debug-ipv6-dhcp">
          <title>Resolving IPv6 DHCP problems</title>
          <step>
            <para>
            Verify IPv6 DHCP range configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep "2001:db8" /etc/dnsmasq.d/dhcp.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Check IPv6 router advertisement status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status radvd</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor DHCPv6 requests:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dnsmasq | grep "DHCPv6"</command>
            </screen>
          </step>
          <step>
            <para>
            Test IPv6 connectivity:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ping6 2001:db8:0:1::200</command>
            </screen>
          </step>
          <step>
            <para>
            Check IPv6 option configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep option6 /etc/dnsmasq.d/dhcp.conf</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-dhcp-dnsmasq-next-steps">
      <title>Next steps</title>
      <para>
      With dnsmasq DHCP services configured, PXE clients can receive network
      configuration and boot file information for both IPv4 and IPv6 environments.
      The tag-based system provides flexible boot file assignment based on client
      architecture and boot method requirements.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-dhcp-kea">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring a DHCP server using Kea</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to configure DHCP services using Kea to provide network
        configuration and PXE boot information for <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> installations. Kea
        is a modern DHCP server that supports both IPv4 and IPv6 with client class matching for PXE
        and HTTP boot scenarios.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-dhcp-kea-intro">
      <title>Introduction</title>
      <para>
      Kea is the modern DHCP server developed by ISC as the successor to the legacy ISC DHCP
      server. It provides robust support for both DHCPv4 and DHCPv6 with client classification
      capabilities that enable proper boot file delivery based on client architecture and boot
      method. Kea uses JSON-based configuration files and supports advanced features like vendor
      class identification for HTTP boot.
    </para>
    </section>
    <section xml:id="sles-pxe-server-dhcp-kea-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          Kea DHCP packages installed: <package>kea-dhcp4</package> and
          <package>kea-dhcp6</package>
        </para>
        </listitem>
        <listitem>
          <para>
          PXE boot files properly organized under <filename>/srv/tftpboot</filename>
        </para>
        </listitem>
        <listitem>
          <para>
          Network interface configured for DHCP service
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to configure DHCP services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-dhcp-kea-dhcpv4">
      <title>Configuring the Kea DHCPv4 server</title>
      <para>
      The Kea DHCPv4 configuration uses client classes to match PXE and HTTP client types and
      provide appropriate boot files for different architectures.
    </para>
      <procedure xml:id="proc-configure-kea-dhcpv4">
        <title>Setting up Kea DHCPv4 server</title>
        <step>
          <para>
          Configure the Kea DHCPv4 server:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/kea/kea-dhcp4.conf &lt;&lt; 'EOF'</command>
{
  "Dhcp4": {
    "interfaces-config": {
      "interfaces": [
        "eno1"
      ]
    },
    "control-socket": {
      "socket-type": "unix",
      "socket-name": "/tmp/kea4-ctrl-socket"
    },
    "lease-database": {
      "type": "memfile",
      "persist": true,
      "name": "/var/lib/kea/dhcp4.leases",
      "lfc-interval": 3600
    },
    "expired-leases-processing": {
      "reclaim-timer-wait-time": 10,
      "flush-reclaimed-timer-wait-time": 25,
      "hold-reclaimed-time": 3600,
      "max-reclaim-leases": 100,
      "max-reclaim-time": 250,
      "unwarned-reclaim-cycles": 5
    },
    "renew-timer": 1800,
    "rebind-timer": 3150,
    "valid-lifetime": 3600,
    "option-data": [],
    "client-classes": [
      {
        "name": "pxeclients#00000",
        "test": "substring(option[60].hex,0,20) == 'PXEClient:Arch:00000'",
        "next-server": "192.168.1.200",
        "boot-file-name": "/boot/grub2/i386-pc/core.0"
      },
      {
        "name": "pxeclients#00007",
        "test": "substring(option[60].hex,0,20) == 'PXEClient:Arch:00007'",
        "next-server": "192.168.1.200",
        "boot-file-name": "/boot/grub2/x86_64-efi/bootx64.efi"
      },
      {
        "name": "pxeclients#0000e",
        "test": "substring(option[60].hex,0,20) == 'PXEClient:Arch:0000e'",
        "next-server": "192.168.1.200",
        "boot-file-name": "/boot/grub2/powerpc-ieee1275/core.elf"
      },
      {
        "name": "pxeclients#00011",
        "test": "substring(option[60].hex,0,20) == 'PXEClient:Arch:00011'",
        "next-server": "192.168.1.200",
        "boot-file-name": "/boot/grub2/arm64-efi/bootaa64.efi"
      },
      {
        "name": "httpclients#00016",
        "test": "substring(option[60].hex,0,21) == 'HTTPClient:Arch:00016'",
        "boot-file-name": "http://192.168.1.200/boot/grub2/x86_64-efi/bootx64.efi",
        "option-data": [
          {
            "name": "vendor-class-identifier",
            "data": "HTTPClient"
          }
        ]
      },
      {
        "name": "httpclients#00019",
        "test": "substring(option[60].hex,0,21) == 'HTTPClient:Arch:00019'",
        "boot-file-name": "http://192.168.1.200/boot/grub2/arm64-efi/bootaa64.efi",
        "option-data": [
          {
            "name": "vendor-class-identifier",
            "data": "HTTPClient"
          }
        ]
      }
    ],
    "subnet4": [
      {
        "id": 1,
        "subnet": "192.168.1.0/24",
        "pools": [
          {
            "pool": "192.168.1.100 - 192.168.1.199"
          }
        ],
        "option-data": [
          {
            "name": "routers",
            "data": "192.168.1.1"
          },
          {
            "name": "ntp-servers",
            "data": "192.168.1.1"
          },
          {
            "name": "domain-name-servers",
            "data": "192.168.1.200"
          },
          {
            "name": "domain-search",
            "data": "example.net"
          }
        ],
        "reservations": []
      }
    ],
    "loggers": [
      {
        "name": "kea-dhcp4",
        "output-options": [
          {
            "output": "/var/log/kea/dhcp4.log"
          }
        ],
        "severity": "INFO",
        "debuglevel": 0
      }
    ]
  }
}
EOF
</screen>
        </step>
        <step>
          <para>
          Create the Kea log directory:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>mkdir -p /var/log/kea</command>
          </screen>
        </step>
        <step>
          <para>
          Test the Kea DHCPv4 configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>kea-dhcp4 -t /etc/kea/kea-dhcp4.conf</command>
          </screen>
        </step>
        <step>
          <para>
          Enable and start the Kea DHCPv4 service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now kea-dhcp4</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-kea-dhcpv6">
      <title>Configuring Kea DHCPv6 server</title>
      <para>
      The Kea DHCPv6 configuration provides IPv6 address assignment and boot file information using
      vendor class matching for different client architectures.
    </para>
      <procedure xml:id="proc-configure-kea-dhcpv6">
        <title>Setting up Kea DHCPv6 server</title>
        <step>
          <para>
          Configure the Kea DHCPv6 server:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/kea/kea-dhcp6.conf &lt;&lt; 'EOF'</command>
{
  "Dhcp6": {
    "interfaces-config": {
      "interfaces": [
        "eno1"
      ]
    },
    "control-socket": {
      "socket-type": "unix",
      "socket-name": "/tmp/kea6-ctrl-socket"
    },
    "lease-database": {
      "type": "memfile",
      "persist": true,
      "name": "/var/lib/kea/dhcp6.leases",
      "lfc-interval": 3600
    },
    "expired-leases-processing": {
      "reclaim-timer-wait-time": 10,
      "flush-reclaimed-timer-wait-time": 25,
      "hold-reclaimed-time": 3600,
      "max-reclaim-leases": 100,
      "max-reclaim-time": 250,
      "unwarned-reclaim-cycles": 5
    },
    "renew-timer": 1800,
    "rebind-timer": 2880,
    "preferred-lifetime": 3600,
    "valid-lifetime": 7200,
    "option-data": [],
    "option-def": [],
    "client-classes": [
      {
        "name": "pxeclients#00000",
        "test": "substring(option[16].hex,6,20) == 'PXEClient:Arch:00000'",
        "option-data": [
          {
            "name": "bootfile-url",
            "data": "tftp://[2001:db8:0:1::200]/boot/grub2/i386-pc/core.0"
          }
        ]
      },
      {
        "name": "pxeclients#00007",
        "test": "substring(option[16].hex,6,20) == 'PXEClient:Arch:00007'",
        "option-data": [
          {
            "name": "bootfile-url",
            "data": "tftp://[2001:db8:0:1::200]/boot/grub2/x86_64-efi/bootx64.efi"
          }
        ]
      },
      {
        "name": "pxeclients#0000e",
        "test": "substring(option[16].hex,6,20) == 'PXEClient:Arch:0000e'",
        "option-data": [
          {
            "name": "bootfile-url",
            "data": "tftp://[2001:db8:0:1::200]/boot/grub2/powerpc-ieee1275/core.elf"
          }
        ]
      },
      {
        "name": "pxeclients#00011",
        "test": "substring(option[16].hex,6,20) == 'PXEClient:Arch:00011'",
        "option-data": [
          {
            "name": "bootfile-url",
            "data": "tftp://[2001:db8:0:1::200]/boot/grub2/arm64-efi/bootaa64.efi"
          }
        ]
      }
    ],
    "subnet6": [
      {
        "id": 1,
        "subnet": "2001:db8:0:1::/64",
        "interface": "eno1",
        "pools": [
          {
            "pool": "2001:db8:0:1:d::/112"
          }
        ],
        "option-data": [
          {
            "name": "sntp-servers",
            "data": "2001:db8:0:1::1"
          },
          {
            "name": "dns-servers",
            "data": "2001:db8:0:1::200"
          },
          {
            "name": "domain-search",
            "data": "example.net"
          }
        ],
        "reservations": []
      }
    ],
    "loggers": [
      {
        "name": "kea-dhcp6",
        "output-options": [
          {
            "output": "/var/log/kea/dhcp6.log"
          }
        ],
        "severity": "INFO",
        "debuglevel": 0
      }
    ]
  }
}
EOF
</screen>
        </step>
        <step>
          <para>
          Test the Kea DHCPv6 configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>kea-dhcp6 -t /etc/kea/kea-dhcp6.conf</command>
          </screen>
        </step>
        <step>
          <para>
          Enable and start the Kea DHCPv6 service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now kea-dhcp6</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-kea-verify">
      <title>Verifying Kea DHCP configuration</title>
      <para>
      Test the Kea DHCP server functionality to ensure proper network configuration and boot file
      delivery to PXE clients.
    </para>
      <procedure xml:id="proc-verify-dhcp-kea">
        <title>Testing Kea DHCP servers</title>
        <step>
          <para>
          Check Kea DHCPv4 service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status kea-dhcp4</command>
          </screen>
        </step>
        <step>
          <para>
          Check Kea DHCPv6 service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status kea-dhcp6</command>
          </screen>
        </step>
        <step>
          <para>
          Verify DHCP port binding:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>ss -ulnp | grep -E ":67|:547"</command>
          </screen>
        </step>
        <step>
          <para>
          Monitor DHCPv4 logs:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>tail -f /var/log/kea/dhcp4.log</command>
          </screen>
        </step>
        <step>
          <para>
          Monitor DHCPv6 logs:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>tail -f /var/log/kea/dhcp6.log</command>
          </screen>
        </step>
        <step>
          <para>
          Check active DHCP leases:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>cat /var/lib/kea/dhcp4.leases</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-kea-troubleshooting">
      <title>Troubleshooting Kea DHCP configuration</title>
      <para>
      Common issues when configuring Kea DHCP servers for PXE boot environments.
    </para>
      <section xml:id="sles-pxe-server-dhcp-kea-troubleshoot-config">
        <title>Configuration and service issues</title>
        <para>
        Kea services may fail to start due to JSON configuration errors or network interface
        problems.
      </para>
        <procedure xml:id="proc-debug-kea-config">
          <title>Resolving Kea configuration problems</title>
          <step>
            <para>
            Test DHCPv4 configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>kea-dhcp4 -t /etc/kea/kea-dhcp4.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test DHCPv6 configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>kea-dhcp6 -t /etc/kea/kea-dhcp6.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Check for JSON syntax errors:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>python3 -m json.tool /etc/kea/kea-dhcp4.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Verify network interface configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip addr show eno1</command>
            </screen>
          </step>
          <step>
            <para>
            Check Kea service logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u kea-dhcp4 -f</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-kea-troubleshoot-leases">
        <title>DHCP lease assignment problems</title>
        <para>
        Clients may fail to receive IP addresses due to subnet configuration or pool exhaustion
        issues.
      </para>
        <procedure xml:id="proc-debug-kea-leases">
          <title>Diagnosing Kea lease issues</title>
          <step>
            <para>
            Check subnet and pool configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -A 10 "subnet4\|pools" /etc/kea/kea-dhcp4.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor lease assignments in real-time:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tail -f /var/log/kea/dhcp4.log | grep -E "ALLOC|DISCOVER"</command>
            </screen>
          </step>
          <step>
            <para>
            Check lease database for conflicts:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>cat /var/lib/kea/dhcp4.leases | tail -20</command>
            </screen>
          </step>
          <step>
            <para>
            Verify interface binding:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep interfaces /etc/kea/kea-dhcp4.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Clear lease database if needed:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl stop kea-dhcp4</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>mv /var/lib/kea/dhcp4.leases /var/lib/kea/dhcp4.leases.backup</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl start kea-dhcp4</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-kea-troubleshoot-pxe">
        <title>PXE client class matching issues</title>
        <para>
        PXE clients may receive IP addresses but fail to get correct boot files due to client class
        configuration problems.
      </para>
        <procedure xml:id="proc-debug-kea-pxe">
          <title>Troubleshooting Kea client classification</title>
          <step>
            <para>
            Check client class definitions:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -A 5 "client-classes" /etc/kea/kea-dhcp4.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor client class matching in logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tail -f /var/log/kea/dhcp4.log | grep -i class</command>
            </screen>
          </step>
          <step>
            <para>
            Verify vendor class identifier patterns:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep "PXEClient\|HTTPClient" /etc/kea/kea-dhcp4.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test boot file accessibility:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>curl -I http://192.168.1.200/boot/grub2/x86_64-efi/bootx64.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Enable debug logging for detailed client analysis:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i 's/"debuglevel": 0/"debuglevel": 99/' /etc/kea/kea-dhcp4.conf</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart kea-dhcp4</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-kea-troubleshoot-ipv6">
        <title>DHCPv6 specific issues</title>
        <para>
        IPv6 DHCP clients require proper router advertisement configuration and have different
        vendor class option handling than IPv4.
      </para>
        <procedure xml:id="proc-debug-kea-ipv6">
          <title>Resolving Kea DHCPv6 problems</title>
          <step>
            <para>
            Check DHCPv6 subnet configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -A 10 "subnet6" /etc/kea/kea-dhcp6.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Verify IPv6 router advertisement status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status radvd</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor DHCPv6 vendor class matching:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tail -f /var/log/kea/dhcp6.log | grep "option\[16\]"</command>
            </screen>
          </step>
          <step>
            <para>
            Check IPv6 bootfile-url option format:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep "bootfile-url" /etc/kea/kea-dhcp6.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test IPv6 connectivity to boot server:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ping6 2001:db8:0:1::200</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-dhcp-kea-next-steps">
      <title>Next steps</title>
      <para>
      With Kea DHCP services configured, PXE clients can receive comprehensive network
      configuration and boot file information for both IPv4 and IPv6 environments. The client
      classification system provides precise boot file assignment based on client architecture and
      supports both traditional PXE and modern HTTP boot methods.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-dhcp-isc">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Configuring a DHCP server using ISC DHCP</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section explains how to configure the ISC DHCP server to provide network configuration
        and PXE boot information for <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> 15 installations. The ISC dhcp-server package
        is not available on <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> anymore.
        ISC DHCP uses class and subclass matching to support PXE and HTTP boot scenarios across
        different client architectures.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-dhcp-isc-intro">
      <title>Introduction</title>
      <para>
      ISC DHCP is the traditional DHCP server that provides network configuration and boot file
      information to PXE clients using a class and subclass system. While ISC has declared this
      server end-of-life as of 2022, it remains widely used in existing deployments and provides
      robust support for PXE and HTTP boot scenarios with vendor class identification.
    </para>
      <important>
        <title>ISC DHCP end-of-life status</title>
        <para>
        ISC DHCP has been declared end-of-life by ISC in 2022. For new deployments, consider using
        Kea or dnsmasq instead. This configuration is provided for compatibility with existing ISC
        DHCP installations.
      </para>
      </important>
    </section>
    <section xml:id="sles-pxe-server-dhcp-isc-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          ISC DHCP packages installed: <package>dhcp-server</package>
        </para>
        </listitem>
        <listitem>
          <para>
          PXE boot files properly organized under <filename>/srv/tftpboot</filename>
        </para>
        </listitem>
        <listitem>
          <para>
          Network interface configured for DHCP service
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative privileges to configure DHCP services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-dhcp-isc-dhcpv4">
      <title>Configuring the ISC DHCPv4 server</title>
      <para>
      The ISC DHCPv4 configuration uses class and subclass declarations to match PXE and HTTP
      client types and provide appropriate boot files for different architectures.
    </para>
      <procedure xml:id="proc-configure-isc-dhcpv4">
        <title>Setting up ISC DHCPv4 server</title>
        <step>
          <para>
          Configure the ISC DHCPv4 server:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/dhcpd.conf &lt;&lt; 'EOF'</command>
# /etc/dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#
# *** PLEASE CONFIGURE IT FIRST ***
#
# Don't forget to set the DHCPD_INTERFACE in the
# /etc/sysconfig/dhcpd file.
#

# if you want to use dynamical DNS updates, you should first read
# read /usr/share/doc/packages/dhcp-server/DDNS-howto.txt
#
ddns-updates off;

# Use this to enable / disable dynamic dns updates globally.
ddns-update-style none;

# default lease time
default-lease-time              3600;
max-lease-time                  7200;

##
## PXE / HTTP boot option declarations
##
class "pxeclients" {
        # PXEClient:Arch:00000:UNDI:002001
        match substring (option vendor-class-identifier, 0, 20);
}
class "httpclients" {
        # HTTPClient:Arch:00016:UNDI:003001
        match substring (option vendor-class-identifier, 0, 21);
}

##
## PXE / HTTP boot subclass request matches
##
subclass "pxeclients"   "PXEClient:Arch:00000" {
        next-server     192.168.1.200;
        filename        "/boot/grub2/i386-pc/core.0";
}
subclass "pxeclients"   "PXEClient:Arch:00007" {
        next-server     192.168.1.200;
        filename        "/boot/grub2/x86_64-efi/bootx64.efi";
}
subclass "pxeclients"   "PXEClient:Arch:0000e" {
        next-server     192.168.1.200;
        filename        "/boot/grub2/powerpc-ieee1275/core.elf";
}
subclass "pxeclients"   "PXEClient:Arch:00011" {
        next-server     192.168.1.200;
        filename        "/boot/grub2/arm64-efi/bootaa64.efi";
}

subclass "httpclients"  "HTTPClient:Arch:00016" {
        option vendor-class-identifier "HTTPClient";
        filename        "http://192.168.1.200/boot/grub2/x86_64-efi/bootx64.efi";
}
subclass "httpclients"  "HTTPClient:Arch:00019" {
        option vendor-class-identifier "HTTPClient";
        filename        "http://192.168.1.200/boot/grub2/arm64-efi/bootaa64.efi";
}

##
## Subnet declaration for the pxe network
##
subnet 192.168.1.0 netmask 255.255.255.0 {
        authoritative;

        range  dynamic-bootp            192.168.1.100 192.168.1.199;

        option subnet-mask              255.255.255.0;

        option routers                  192.168.1.1;
        option ntp-servers              192.168.1.1;
        option domain-name-servers      192.168.1.200;
        option domain-name              "example.net";
        option domain-search            "example.net";
}
EOF
</screen>
        </step>
        <step>
          <para>
          Configure the DHCP interface in sysconfig:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>echo 'DHCPD_INTERFACE="eno1"' &gt; /etc/sysconfig/dhcpd</command>
          </screen>
        </step>
        <step>
          <para>
          Test the DHCPv4 configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>dhcpd -t -cf /etc/dhcpd.conf</command>
          </screen>
        </step>
        <step>
          <para>
          Enable and start the ISC DHCPv4 service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now dhcpd</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-isc-dhcpv6">
      <title>Configuring the ISC DHCPv6 server</title>
      <para>
      The ISC DHCPv6 configuration provides IPv6 address assignment and boot file information using
      vendor class matching with proper DHCPv6 option handling.
    </para>
      <procedure xml:id="proc-configure-isc-dhcpv6">
        <title>Setting up ISC DHCPv6 server</title>
        <step>
          <para>
          Configure the ISC DHCPv6 server:
        </para>
          <screen><prompt>&gt; </prompt><command>sudo</command><command>cat &gt; /etc/dhcpd6.conf &lt;&lt; 'EOF'</command>
# /etc/dhcpd6.conf
#
# Sample DHCPv6 configuration file for ISC dhcpd
#
# *** PLEASE CONFIGURE IT FIRST ***
#
# Don't forget to set the DHCPD6_INTERFACE in the
# /etc/sysconfig/dhcpd file.
#

# if you want to use dynamical DNS updates, you should first
# read /usr/share/doc/packages/dhcp-server/DDNS-howto.txt
ddns-updates off;

# Use this to enable / disable dynamic dns updates globally.
ddns-update-style none;

# IPv6 address valid lifetime
#  (at the end the address is no longer usable by the client)
#  (set to 30 days, the usual IPv6 default)
default-lease-time 7200;

# IPv6 address preferred lifetime
#  (at the end the address is deprecated, i.e., the client should use
#   other addresses for new connections)
#  (set to 7 days, the	usual IPv6 default)
preferred-lifetime 3600;

##
## PXE / HTTP boot option declarations
##

# The dhcp6 option 16 is in fact an:
#   { uint32 enterprise-number, array of { uint16 len, string tag} vendor-class-data }
# this declaration is using the whole option data as string for substring match:
option dhcp6.vendor-class-as-string code 16 = string;

# this declaration is using the enterprise-number with 1st tag length and string:
option dhcp6.vendor-class-en-len-tag code 16 = {integer 32, integer 16, string};

class "pxeclients" {
        # PXEClient:Arch:00000:UNDI:002001
        # note: +6 to skip the enterprise-number+len until the PXEClient string
        match substring (option dhcp6.vendor-class-as-string, 6, 20);
}
class "httpclients" {
        # HTTPClient:Arch:00016:UNDI:003001
        # note: +6 to skip the enterprise-number+len until the HTTPClient string
        match substring (option dhcp6.vendor-class-as-string, 6, 21);
}

##
## PXE / HTTP boot subclass request matches
##
subclass "pxeclients"   "PXEClient:Arch:00000" {
        option dhcp6.bootfile-url "tftp://[2001:db8:0:1::200]/boot/grub2/i386-pc/core.0";
}
subclass "pxeclients"   "PXEClient:Arch:00007" {
        option dhcp6.bootfile-url "tftp://[2001:db8:0:1::200]/boot/grub2/x86_64-efi/bootx64.efi";
}
subclass "pxeclients"   "PXEClient:Arch:0000e" {
        option dhcp6.bootfile-url "tftp://[2001:db8:0:1::200]/boot/grub2/powerpc-ieee1275/core.elf";
}
subclass "pxeclients"   "PXEClient:Arch:00011" {
        option dhcp6.bootfile-url "tftp://[2001:db8:0:1::200]/boot/grub2/arm64-efi/bootaa64.efi";
}

subclass "httpclients"  "HTTPClient:Arch:00016" {
        option dhcp6.vendor-class-en-len-tag 343 10 "HTTPClient";
        option dhcp6.bootfile-url "http://[2001:db8:0:1::200]/boot/grub2/x86_64-efi/bootx64.efi";
}
subclass "httpclients"  "HTTPClient:Arch:00019" {
        option dhcp6.vendor-class-en-len-tag 343 10 "HTTPClient";
        option dhcp6.bootfile-url "http://[2001:db8:0:1::200]/boot/grub2/arm64-efi/bootaa64.efi";
}

##
## Subnet declaration for the pxe network
##
subnet6 2001:db8:0:1::/64 {
       authoritative;

       range6  2001:db8:0:1:d:: 2001:db8:0:1:d::ffff;

       option dhcp6.sntp-servers       2001:db8:0:1::1;
       option dhcp6.name-servers       2001:db8:0:1::200;
       option dhcp6.domain-search      "example.net";
}
EOF
</screen>
        </step>
        <step>
          <para>
          Configure the DHCPv6 interface in sysconfig:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>echo 'DHCPD6_INTERFACE="eno1"' &gt;&gt; /etc/sysconfig/dhcpd</command>
          </screen>
        </step>
        <step>
          <para>
          Test the DHCPv6 configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>dhcpd -6 -t -cf /etc/dhcpd6.conf</command>
          </screen>
        </step>
        <step>
          <para>
          Enable and start the ISC DHCPv6 service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>sudo</command>
            <command>systemctl enable --now dhcpd6</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-isc-verify">
      <title>Verifying the ISC DHCP configuration</title>
      <para>
      Test the ISC DHCP server functionality to ensure proper network configuration and boot file
      delivery to PXE clients.
    </para>
      <procedure xml:id="proc-verify-dhcp-isc">
        <title>Testing ISC DHCP servers</title>
        <step>
          <para>
          Check ISC DHCPv4 service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status dhcpd</command>
          </screen>
        </step>
        <step>
          <para>
          Check ISC DHCPv6 service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status dhcpd6</command>
          </screen>
        </step>
        <step>
          <para>
          Verify DHCP port binding:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>ss -ulnp | grep -E ":67|:547"</command>
          </screen>
        </step>
        <step>
          <para>
          Monitor DHCP logs:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>journalctl -u dhcpd -f</command>
          </screen>
        </step>
        <step>
          <para>
          Check active DHCP leases:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>cat /var/lib/dhcp/dhcpd.leases</command>
          </screen>
        </step>
        <step>
          <para>
          Monitor DHCPv6 activity:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>journalctl -u dhcpd6 -f</command>
          </screen>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-dhcp-isc-troubleshooting">
      <title>Troubleshooting ISC DHCP configuration</title>
      <para>
      Common issues when configuring ISC DHCP servers for PXE boot environments.
    </para>
      <section xml:id="sles-pxe-server-dhcp-isc-troubleshoot-config">
        <title>Configuration and service issues</title>
        <para>
        ISC DHCP services may fail to start due to configuration syntax errors or interface binding
        problems.
      </para>
        <procedure xml:id="proc-debug-isc-config">
          <title>Resolving ISC DHCP configuration problems</title>
          <step>
            <para>
            Test DHCPv4 configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>dhcpd -t -cf /etc/dhcpd.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Test DHCPv6 configuration syntax:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>dhcpd -6 -t -cf /etc/dhcpd6.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Check interface configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>cat /etc/sysconfig/dhcpd</command>
            </screen>
          </step>
          <step>
            <para>
            Verify network interface status:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip addr show eno1</command>
            </screen>
          </step>
          <step>
            <para>
            Check for port conflicts:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -ulnp | grep :67</command>
            </screen>
          </step>
          <step>
            <para>
            View detailed service logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dhcpd -xe</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-isc-troubleshoot-leases">
        <title>DHCP lease assignment problems</title>
        <para>
        Clients may fail to receive IP addresses due to subnet configuration or authorization
        issues.
      </para>
        <procedure xml:id="proc-debug-isc-leases">
          <title>Diagnosing ISC DHCP lease issues</title>
          <step>
            <para>
            Check subnet and range configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -A 10 "subnet\|range" /etc/dhcpd.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Verify authoritative setting:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep authoritative /etc/dhcpd.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor lease assignments in real time:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tail -f /var/log/messages | grep dhcpd</command>
            </screen>
          </step>
          <step>
            <para>
            Check lease database for errors:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tail -20 /var/lib/dhcp/dhcpd.leases</command>
            </screen>
          </step>
          <step>
            <para>
            Test DHCP response manually:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>dhcping -s 192.168.1.200 -h aa:bb:cc:dd:ee:ff</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-isc-troubleshoot-classes">
        <title>Class and subclass matching issues</title>
        <para>
        PXE clients may receive IP addresses but fail to get correct boot files due to class
        matching configuration problems.
      </para>
        <procedure xml:id="proc-debug-isc-classes">
          <title>Troubleshooting ISC DHCP class matching</title>
          <step>
            <para>
            Check class definitions:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -A 3 "class.*clients" /etc/dhcpd.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Verify subclass entries:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -A 5 "subclass" /etc/dhcpd.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor vendor class identification:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tail -f /var/log/messages | grep -E "PXEClient|HTTPClient"</command>
            </screen>
          </step>
          <step>
            <para>
            Test boot file accessibility:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tftp 192.168.1.200 -c get /boot/grub2/x86_64-efi/bootx64.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Enable detailed logging:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>sed -i '1i\log-facility local7;' /etc/dhcpd.conf</command>
            </screen>
            <screen>
              <prompt>&gt; </prompt>
              <command>sudo</command>
              <command>systemctl restart dhcpd</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-dhcp-isc-troubleshoot-ipv6">
        <title>DHCPv6 vendor class option issues</title>
        <para>
        IPv6 DHCP clients have complex vendor class option handling that may require specific
        configuration for proper PXE boot support.
      </para>
        <procedure xml:id="proc-debug-isc-ipv6">
          <title>Resolving ISC DHCPv6 problems</title>
          <step>
            <para>
            Check DHCPv6 option definitions:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -A 3 "option dhcp6" /etc/dhcpd6.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Verify vendor class string parsing:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep "substring.*6.*20\|21" /etc/dhcpd6.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor DHCPv6 vendor class matching:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dhcpd6 | grep -i vendor</command>
            </screen>
          </step>
          <step>
            <para>
            Check IPv6 bootfile-url format:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep "bootfile-url" /etc/dhcpd6.conf</command>
            </screen>
          </step>
          <step>
            <para>
            Verify router advertisement dependency:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>systemctl status radvd</command>
            </screen>
          </step>
          <step>
            <para>
            Test IPv6 connectivity:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ping6 2001:db8:0:1::200</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-dhcp-isc-next-steps">
      <title>Next steps</title>
      <para>
      With ISC DHCP services configured, PXE clients can receive network configuration and boot
      file information using the traditional class and subclass system. While ISC DHCP is
      end-of-life, this configuration provides compatibility for existing deployments that require
      PXE and HTTP boot functionality across multiple client architectures.
    </para>
    </section>
  </section>
  <section role="task" xml:lang="en" version="5.2" xml:id="sles-pxe-server-validate">
    <info>
      <title xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">Validating PXE server setup</title>
      <meta xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion" name="maintainer" content="souvik.sarkar@suse.com" its:translate="no"/>
      <abstract xmlns:its="http://www.w3.org/2005/11/its" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:trans="http://docbook.org/ns/transclusion">
        <para>
        This section describes how to validate and test the complete PXE server setup to ensure all
        components are working correctly for <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> network installations.
        It covers service verification, network connectivity testing, and end-to-end PXE boot
        validation.
      </para>
      </abstract>
    </info>
    <section xml:id="sles-pxe-server-validate-intro">
      <title>Introduction</title>
      <para>
      After configuring all PXE server components, including TFTP, HTTP, DNS, DHCP, and GRUB&#xA0;2
      bootloader services, it is essential to validate that the complete system functions
      correctly. This validation ensures that PXE clients can successfully boot into the Agama
      installer and perform network-based installations of <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase>.
    </para>
    </section>
    <section xml:id="sles-pxe-server-validate-reqs">
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>
          All PXE server components configured and running
        </para>
        </listitem>
        <listitem>
          <para>
          Test client systems capable of PXE booting
        </para>
        </listitem>
        <listitem>
          <para>
          Network connectivity between the PXE server and clients
        </para>
        </listitem>
        <listitem>
          <para>
          Administrative access to monitor server services
        </para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sles-pxe-server-validate-services">
      <title>Validating PXE server services</title>
      <para>
      Verify that all essential PXE server services are running and properly configured before
      testing with PXE clients.
    </para>
      <procedure xml:id="proc-validate-services">
        <title>Checking PXE server service status</title>
        <step>
          <para>
          Verify TFTP service status:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status tftp.socket</command>
          </screen>
          <para>
          Expected result: Service should be active and listening on port 69.
        </para>
        </step>
        <step>
          <para>
          Check nginx HTTP service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status nginx</command>
          </screen>
          <para>
          Expected result: Service should be active and listening on port 80.
        </para>
        </step>
        <step>
          <para>
          Verify DNS service (if using dnsmasq):
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status dnsmasq</command>
          </screen>
          <para>
          Expected result: Service should be active and listening on port 53.
        </para>
        </step>
        <step>
          <para>
          Check DHCP service status (choose appropriate service):
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status dhcpd</command>
          </screen>
          <para>
          For dnsmasq DHCP:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status dnsmasq</command>
          </screen>
          <para>
          For Kea DHCP:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status kea-dhcp4 kea-dhcp6</command>
          </screen>
          <para>
          Expected result: DHCP service should be active and listening on appropriate ports.
        </para>
        </step>
        <step>
          <para>
          Verify IPv6 router advertisement (if configured):
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status radvd</command>
          </screen>
          <para>
          Expected result: Service should be active for IPv6 environments.
        </para>
        </step>
        <step>
          <para>
          Check NTP service:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>systemctl status chronyd</command>
          </screen>
          <para>
          Expected result: Service should be active and synchronized.
        </para>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-validate-network">
      <title>Testing network connectivity and file access</title>
      <para>
      Validate that PXE clients can access boot files and installation content over the network
      using both TFTP and HTTP protocols.
    </para>
      <procedure xml:id="proc-validate-network">
        <title>Testing network file access</title>
        <step>
          <para>
          Test TFTP access to bootloader files:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>tftp localhost -c get /boot/grub2/x86_64-efi/bootx64.efi /tmp/test-bootx64.efi</command>
          </screen>
          <para>
          Verify the file was retrieved:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>file /tmp/test-bootx64.efi</command>
          </screen>
          <para>
          Clean up test file:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>rm /tmp/test-bootx64.efi</command>
          </screen>
        </step>
        <step>
          <para>
          Test HTTP access to GRUB&#xA0;2 configuration:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>curl -I http://localhost/boot/grub2/grub.cfg</command>
          </screen>
          <para>
          Expected result: HTTP 200 OK response.
        </para>
        </step>
        <step>
          <para>
          Verify HTTP access to installer files:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>curl -I http://localhost/boot/images/SLES-16.0/x86_64/liveiso/LiveOS/squashfs.img</command>
          </screen>
          <para>
          Expected result: HTTP 200 OK response with appropriate content length.
        </para>
        </step>
        <step>
          <para>
          Test DNS resolution (if local DNS configured):
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>nslookup pxe.example.net localhost</command>
          </screen>
          <para>
          Expected result: Proper A and AAAA record resolution.
        </para>
        </step>
        <step>
          <para>
          Verify directory browsing for autoindex locations:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>curl http://localhost/boot/</command>
          </screen>
          <para>
          Expected result: Directory listing showing boot files.
        </para>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-validate-dhcp">
      <title>Validating DHCP functionality</title>
      <para>
      Test DHCP server responses and verify that proper boot information is provided to different
      client types.
    </para>
      <procedure xml:id="proc-validate-dhcp">
        <title>Testing DHCP server responses</title>
        <step>
          <para>
          Check DHCP port binding:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>ss -ulnp | grep -E ":67|:547"</command>
          </screen>
          <para>
          Expected result: DHCP services listening on ports 67 (IPv4) and 547 (IPv6).
        </para>
        </step>
        <step>
          <para>
          Monitor DHCP requests in real-time:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>journalctl -u dhcpd -f</command>
          </screen>
          <para>
          Or for dnsmasq:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>journalctl -u dnsmasq -f</command>
          </screen>
          <para>
          Leave this running to observe DHCP activity during testing.
        </para>
        </step>
        <step>
          <para>
          Test DHCP response using dhcping (if available):
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>dhcping -s 192.168.1.200</command>
          </screen>
          <para>
          Expected result: Successful DHCP response from server.
        </para>
        </step>
        <step>
          <para>
          Check active DHCP leases:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>cat /var/lib/dhcp/dhcpd.leases</command>
          </screen>
          <para>
          Or for Kea:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>cat /var/lib/kea/dhcp4.leases</command>
          </screen>
          <para>
          Expected result: Lease entries for test clients.
        </para>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-validate-pxe-boot">
      <title>End-to-end PXE boot testing</title>
      <para>
      Perform complete PXE boot tests with actual client systems to validate the entire boot
      process from DHCP to Agama installer startup.
    </para>
      <procedure xml:id="proc-validate-pxe-boot">
        <title>Testing complete PXE boot process</title>
        <step>
          <para>
          Prepare a test client system:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              Configure BIOS/UEFI to enable network boot
            </para>
            </listitem>
            <listitem>
              <para>
              Set network boot as first boot priority
            </para>
            </listitem>
            <listitem>
              <para>
              Connect the client to the same network as PXE server
            </para>
            </listitem>
          </itemizedlist>
        </step>
        <step>
          <para>
          Monitor PXE server logs during client boot:
        </para>
          <screen>
            <prompt>&gt; </prompt>
            <command>journalctl -f | grep -E "dhcp|tftp|nginx"</command>
          </screen>
        </step>
        <step>
          <para>
          Boot the test client and observe the following sequence:
        </para>
          <orderedlist>
            <listitem>
              <para>
              Client should receive IP address via DHCP
            </para>
            </listitem>
            <listitem>
              <para>
              Client should download bootloader via TFTP
            </para>
            </listitem>
            <listitem>
              <para>
              GRUB&#xA0;2 menu should appear with installation options
            </para>
            </listitem>
            <listitem>
              <para>
              Kernel and initrd should load via HTTP
            </para>
            </listitem>
            <listitem>
              <para>
              Agama installer should start successfully
            </para>
            </listitem>
          </orderedlist>
        </step>
        <step>
          <para>
          Verify client architecture detection by testing different client types:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              Legacy BIOS x86_64 systems (should get core.0)
            </para>
            </listitem>
            <listitem>
              <para>
              UEFI x86_64 systems (should get bootx64.efi)
            </para>
            </listitem>
            <listitem>
              <para>
              UEFI aarch64 systems (should get bootaa64.efi)
            </para>
            </listitem>
          </itemizedlist>
        </step>
        <step>
          <para>
          Test IPv6 PXE boot (if IPv6 configured):
        </para>
          <itemizedlist>
            <listitem>
              <para>
              Enable IPv6-only network configuration on test client
            </para>
            </listitem>
            <listitem>
              <para>
              Verify DHCPv6 address assignment
            </para>
            </listitem>
            <listitem>
              <para>
              Confirm IPv6 bootfile-url delivery
            </para>
            </listitem>
          </itemizedlist>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-validate-installation">
      <title>Validating Agama installer functionality</title>
      <para>
      Verify that the Agama installer starts correctly and can access installation sources for
      completing <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> installations.
    </para>
      <procedure xml:id="proc-validate-agama">
        <title>Testing Agama installer startup</title>
        <step>
          <para>
          Verify Agama Web interface accessibility:
        </para>
          <para>
          During client boot, note the IP address assigned and access:
        </para>
          <screen>http://<replaceable>CLIENT_IP_ADDRESS</replaceable></screen>
          <para>
          Expected result: Agama Web interface should load successfully.
        </para>
        </step>
        <step>
          <para>
          Check Agama installer logs on the client:
        </para>
          <para>
          Switch to the console (Alt+F2) and run:
        </para>
          <screen>
            <prompt role="root"># </prompt>
            <command>journalctl -u agama-web-server -f</command>
          </screen>
          <para>
          Expected result: No critical errors in Agama startup.
        </para>
        </step>
        <step>
          <para>
          Verify installation source accessibility:
        </para>
          <para>
          For Full ISO installations, check repository access:
        </para>
          <screen>
            <prompt role="root"># </prompt>
            <command>curl -I http://192.168.1.200/install/SLES-16.0/x86_64/</command>
          </screen>
          <para>
          Expected result: HTTP 200 OK response with directory listing.
        </para>
        </step>
        <step>
          <para>
          Test package installation capability:
        </para>
          <para>
          In Agama interface, verify that:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              The system can detect available disks
            </para>
            </listitem>
            <listitem>
              <para>
              Network configuration is preserved
            </para>
            </listitem>
            <listitem>
              <para>
              Package repository is accessible
            </para>
            </listitem>
            <listitem>
              <para>
              Installation can proceed to completion
            </para>
            </listitem>
          </itemizedlist>
        </step>
      </procedure>
    </section>
    <section xml:id="sles-pxe-server-validate-troubleshooting">
      <title>Troubleshooting validation failures</title>
      <para>
      Common issues during PXE server validation and their resolution steps.
    </para>
      <section xml:id="sles-pxe-server-validate-troubleshoot-dhcp">
        <title>DHCP assignment failures</title>
        <para>
        Clients fail to receive IP addresses during PXE boot.
      </para>
        <procedure xml:id="proc-troubleshoot-dhcp-validation">
          <title>Resolving DHCP validation issues</title>
          <step>
            <para>
            Check DHCP service conflicts:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ss -ulnp | grep :67</command>
            </screen>
          </step>
          <step>
            <para>
            Verify network interface is up:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ip addr show eno1</command>
            </screen>
          </step>
          <step>
            <para>
            Check DHCP range availability:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>nmap -sn 192.168.1.100-199</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor DHCP logs for errors:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u dhcpd | tail -50</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-validate-troubleshoot-boot">
        <title>Boot file delivery failures</title>
        <para>
        Clients receive IP addresses but fail to download boot files.
      </para>
        <procedure xml:id="proc-troubleshoot-boot-validation">
          <title>Resolving boot file issues</title>
          <step>
            <para>
            Verify TFTP service accessibility:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>tftp 192.168.1.200 -c get /boot/grub2/x86_64-efi/bootx64.efi</command>
            </screen>
          </step>
          <step>
            <para>
            Check file permissions:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>ls -la /srv/tftpboot/boot/grub2/x86_64-efi/</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor TFTP access logs:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -u tftp.socket -f</command>
            </screen>
          </step>
          <step>
            <para>
            Verify client architecture detection:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep -E "PXEClient|HTTPClient" /var/log/messages</command>
            </screen>
          </step>
        </procedure>
      </section>
      <section xml:id="sles-pxe-server-validate-troubleshoot-installer">
        <title>Agama installer startup failures</title>
        <para>
        Boot files load successfully but Agama installer fails to start.
      </para>
        <procedure xml:id="proc-troubleshoot-installer-validation">
          <title>Resolving Agama startup issues</title>
          <step>
            <para>
            Check HTTP access to installer files:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>curl -I http://192.168.1.200/boot/images/SLES-16.0/x86_64/liveiso/LiveOS/squashfs.img</command>
            </screen>
          </step>
          <step>
            <para>
            Verify kernel parameter syntax in GRUB&#xA0;2 configuration:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>grep "root=live:" /srv/tftpboot/boot/grub2/menu.cfg</command>
            </screen>
          </step>
          <step>
            <para>
            Monitor client boot process:
          </para>
            <screen>
              <prompt>&gt; </prompt>
              <command>journalctl -f | grep -E "kernel|initrd|agama"</command>
            </screen>
          </step>
          <step>
            <para>
            Check network configuration persistence:
          </para>
            <screen>
              <prompt role="root"># </prompt>
              <command>ip addr show</command>
            </screen>
          </step>
        </procedure>
      </section>
    </section>
    <section xml:id="sles-pxe-server-validate-checklist">
      <title>PXE server validation checklist</title>
      <para>
      Use this checklist to systematically verify all aspects of your PXE server configuration.
    </para>
      <table xml:id="table-pxe-validation-checklist">
        <title>PXE Server Validation Checklist</title>
        <tgroup cols="3">
          <colspec colnum="1" colname="col1" colwidth="30*"/>
          <colspec colnum="2" colname="col2" colwidth="50*"/>
          <colspec colnum="3" colname="col3" colwidth="20*"/>
          <thead>
            <row>
              <entry>Component</entry>
              <entry>Validation Step</entry>
              <entry>Status</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>TFTP Service</entry>
              <entry>Service active, port 69 listening, files accessible</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>HTTP Service</entry>
              <entry>nginx active, port 80 listening, installer files accessible</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>DNS Service</entry>
              <entry>Host name resolution working, port 53 listening</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>DHCP Service</entry>
              <entry>IP assignment working, boot options delivered</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>GRUB&#xA0;2 Configuration</entry>
              <entry>Menu loads, architecture detection working</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>IPv6 Support</entry>
              <entry>Router advertisement active, DHCPv6 functioning</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>PXE Boot</entry>
              <entry>Client boots successfully, receives correct bootloader</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>Agama Installer</entry>
              <entry>Installer starts; Web interface accessible</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>Installation Source</entry>
              <entry>Repository accessible, packages installable</entry>
              <entry>&#x2610;</entry>
            </row>
            <row>
              <entry>Network Persistence</entry>
              <entry>Network configuration maintained during installation</entry>
              <entry>&#x2610;</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="sles-pxe-server-validate-conclusion">
      <title>Validation conclusion</title>
      <para>
      A properly validated PXE server should demonstrate successful end-to-end functionality from
      client network boot through Agama installer startup. All services should operate without
      errors, and clients should be able to complete <phrase><phrase os="sles4sap">SUSE Linux Enterprise Server for SAP applications</phrase></phrase> <phrase><phrase os="sles4sap">16.0</phrase></phrase> installations
      over the network. Regular validation testing ensures the continued reliability of the PXE
      infrastructure for automated deployments.
    </para>
    </section>
  </section>
  <section version="5.2" xml:id="legal-disclaimer">
    <info>
      <title xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">Legal Notice</title>
    </info>
    <para> Copyright&#xA9; 2006&#x2013;<?dbtimestamp format="Y"?>
 SUSE LLC and contributors.
  All rights reserved. </para>
    <para>
    Permission is granted to copy, distribute and/or modify this document under the terms of the
    GNU Free Documentation License, Version 1.2 or (at your option) version 1.3; with the Invariant
    Section being this copyright notice and license. A copy of the license version 1.2 is included
    in the section entitled <quote>GNU Free Documentation License</quote>.
  </para>
    <para>
    For SUSE trademarks, see <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.suse.com/company/legal/"/>. All other
    third-party trademarks are the property of their respective owners. Trademark symbols (&#xAE;, &#x2122;
    etc.) denote trademarks of SUSE and its affiliates. Asterisks (*) denote third-party
    trademarks.
  </para>
    <para>
    All information found in this book has been compiled with utmost attention to detail. However,
    this does not guarantee complete accuracy.  Neither SUSE LLC, its affiliates, the authors, nor
    the translators shall be held liable for possible errors or the consequences thereof.
  </para>
  </section>
  <appendix xmlns:its="http://www.w3.org/2005/11/its" version="5.2" role="legal" its:translate="no" xml:id="doc-gfdl-license">
    <info>
      <title xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">GNU Free Documentation License</title>
    </info>
    <para>
  Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc. 51 Franklin St,
  Fifth Floor, Boston, MA 02110-1301 USA. Everyone is permitted to copy and
  distribute verbatim copies of this license document, but changing it is not
  allowed.
 </para>
    <bridgehead renderas="sect4">
    0. PREAMBLE
  </bridgehead>
    <para>
  The purpose of this License is to make a manual, textbook, or other
  functional and useful document "free" in the sense of freedom: to assure
  everyone the effective freedom to copy and redistribute it, with or without
  modifying it, either commercially or non-commercially. Secondarily, this
  License preserves for the author and publisher a way to get credit for their
  work, while not being considered responsible for modifications made by
  others.
 </para>
    <para>
  This License is a kind of "copyleft", which means that derivative works of
  the document must themselves be free in the same sense. It complements the
  GNU General Public License, which is a copyleft license designed for free
  software.
 </para>
    <para>
  We have designed this License to use it for manuals for free software,
  because free software needs free documentation: a free program should come
  with manuals providing the same freedoms that the software does. But this
  License is not limited to software manuals; it can be used for any textual
  work, regardless of subject matter or whether it is published as a printed
  book. We recommend this License principally for works whose purpose is
  instruction or reference.
 </para>
    <bridgehead renderas="sect4">
    1. APPLICABILITY AND DEFINITIONS
  </bridgehead>
    <para>
  This License applies to any manual or other work, in any medium, that
  contains a notice placed by the copyright holder saying it can be distributed
  under the terms of this License. Such a notice grants a world-wide,
  royalty-free license, unlimited in duration, to use that work under the
  conditions stated herein. The "Document", below, refers to any such manual or
  work. Any member of the public is a licensee, and is addressed as "you". You
  accept the license if you copy, modify or distribute the work in a way
  requiring permission under copyright law.
 </para>
    <para>
  A "Modified Version" of the Document means any work containing the Document
  or a portion of it, either copied verbatim, or with modifications and/or
  translated into another language.
 </para>
    <para>
  A "Secondary Section" is a named appendix or a front-matter section of the
  Document that deals exclusively with the relationship of the publishers or
  authors of the Document to the Document's overall subject (or to related
  matters) and contains nothing that could fall directly within that overall
  subject. (Thus, if the Document is in part a textbook of mathematics, a
  Secondary Section may not explain any mathematics.) The relationship could be
  a matter of historical connection with the subject or with related matters,
  or of legal, commercial, philosophical, ethical or political position
  regarding them.
 </para>
    <para>
  The "Invariant Sections" are certain Secondary Sections whose titles are
  designated, as being those of Invariant Sections, in the notice that says
  that the Document is released under this License. If a section does not fit
  the above definition of Secondary then it is not allowed to be designated as
  Invariant. The Document may contain zero Invariant Sections. If the Document
  does not identify any Invariant Sections then there are none.
 </para>
    <para>
  The "Cover Texts" are certain short passages of text that are listed, as
  Front-Cover Texts or Back-Cover Texts, in the notice that says that the
  Document is released under this License. A Front-Cover Text may be at most 5
  words, and a Back-Cover Text may be at most 25 words.
 </para>
    <para>
  A "Transparent" copy of the Document means a machine-readable copy,
  represented in a format whose specification is available to the general
  public, that is suitable for revising the document straightforwardly with
  generic text editors or (for images composed of pixels) generic paint
  programs or (for drawings) some widely available drawing editor, and that is
  suitable for input to text formatters or for automatic translation to a
  variety of formats suitable for input to text formatters. A copy made in an
  otherwise Transparent file format whose markup, or absence of markup, has
  been arranged to thwart or discourage subsequent modification by readers is
  not Transparent. An image format is not Transparent if used for any
  substantial amount of text. A copy that is not "Transparent" is called
  "Opaque".
 </para>
    <para>
  Examples of suitable formats for Transparent copies include plain ASCII
  without markup, Texinfo input format, LaTeX input format, SGML or XML using a
  publicly available DTD, and standard-conforming simple HTML, PostScript or
  PDF designed for human modification. Examples of transparent image formats
  include PNG, XCF and JPG. Opaque formats include proprietary formats that can
  be read and edited only by proprietary word processors, SGML or XML for which
  the DTD and/or processing tools are not generally available, and the
  machine-generated HTML, PostScript or PDF produced by some word processors
  for output purposes only.
 </para>
    <para>
  The "Title Page" means, for a printed book, the title page itself, plus such
  following pages as are needed to hold, legibly, the material this License
  requires to appear in the title page. For works in formats which do not have
  any title page as such, "Title Page" means the text near the most prominent
  appearance of the work's title, preceding the beginning of the body of the
  text.
 </para>
    <para>
  A section "Entitled XYZ" means a named subunit of the Document whose title
  either is precisely XYZ or contains XYZ in parentheses following text that
  translates XYZ in another language. (Here XYZ stands for a specific section
  name mentioned below, such as "Acknowledgements", "Dedications",
  "Endorsements", or "History".) To "Preserve the Title" of such a section when
  you modify the Document means that it remains a section "Entitled XYZ"
  according to this definition.
 </para>
    <para>
  The Document may include Warranty Disclaimers next to the notice which states
  that this License applies to the Document. These Warranty Disclaimers are
  considered to be included by reference in this License, but only as regards
  disclaiming warranties: any other implication that these Warranty Disclaimers
  may have is void and has no effect on the meaning of this License.
 </para>
    <bridgehead renderas="sect4">
    2. VERBATIM COPYING
  </bridgehead>
    <para>
  You may copy and distribute the Document in any medium, either commercially
  or non-commercially, provided that this License, the copyright notices, and
  the license notice saying this License applies to the Document are reproduced
  in all copies, and that you add no other conditions whatsoever to those of
  this License. You may not use technical measures to obstruct or control the
  reading or further copying of the copies you make or distribute. However, you
  may accept compensation in exchange for copies. If you distribute a large
  enough number of copies you must also follow the conditions in section 3.
 </para>
    <para>
  You may also lend copies, under the same conditions stated above, and you may
  publicly display copies.
 </para>
    <bridgehead renderas="sect4">
    3. COPYING IN QUANTITY
  </bridgehead>
    <para>
  If you publish printed copies (or copies in media that commonly have printed
  covers) of the Document, numbering more than 100, and the Document's license
  notice requires Cover Texts, you must enclose the copies in covers that
  carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the
  front cover, and Back-Cover Texts on the back cover. Both covers must also
  clearly and legibly identify you as the publisher of these copies. The front
  cover must present the full title with all words of the title equally
  prominent and visible. You may add other material on the covers in addition.
  Copying with changes limited to the covers, as long as they preserve the
  title of the Document and satisfy these conditions, can be treated as
  verbatim copying in other respects.
 </para>
    <para>
  If the required texts for either cover are too voluminous to fit legibly, you
  should put the first ones listed (as many as fit reasonably) on the actual
  cover, and continue the rest onto adjacent pages.
 </para>
    <para>
  If you publish or distribute Opaque copies of the Document numbering more
  than 100, you must either include a machine-readable Transparent copy along
  with each Opaque copy, or state in or with each Opaque copy a
  computer-network location from which the general network-using public has
  access to download using public-standard network protocols a complete
  Transparent copy of the Document, free of added material. If you use the
  latter option, you must take reasonably prudent steps, when you begin
  distribution of Opaque copies in quantity, to ensure that this Transparent
  copy will remain thus accessible at the stated location until at least one
  year after the last time you distribute an Opaque copy (directly or through
  your agents or retailers) of that edition to the public.
 </para>
    <para>
  It is requested, but not required, that you contact the authors of the
  Document well before redistributing any large number of copies, to give them
  a chance to provide you with an updated version of the Document.
 </para>
    <bridgehead renderas="sect4">
    4. MODIFICATIONS
  </bridgehead>
    <para>
  You may copy and distribute a Modified Version of the Document under the
  conditions of sections 2 and 3 above, provided that you release the Modified
  Version under precisely this License, with the Modified Version filling the
  role of the Document, thus licensing distribution and modification of the
  Modified Version to whoever possesses a copy of it. In addition, you must do
  these things in the Modified Version:
 </para>
    <orderedlist numeration="upperalpha" spacing="normal">
      <listitem>
        <para>
    Use in the Title Page (and on the covers, if any) a title distinct from
    that of the Document, and from those of previous versions (which should, if
    there were any, be listed in the History section of the Document). You may
    use the same title as a previous version if the original publisher of that
    version gives permission.
   </para>
      </listitem>
      <listitem>
        <para>
    List on the Title Page, as authors, one or more persons or entities
    responsible for authorship of the modifications in the Modified Version,
    together with at least five of the principal authors of the Document (all
    of its principal authors, if it has fewer than five), unless they release
    you from this requirement.
   </para>
      </listitem>
      <listitem>
        <para>
    State on the Title page the name of the publisher of the Modified Version,
    as the publisher.
   </para>
      </listitem>
      <listitem>
        <para>
    Preserve all the copyright notices of the Document.
   </para>
      </listitem>
      <listitem>
        <para>
    Add an appropriate copyright notice for your modifications adjacent to the
    other copyright notices.
   </para>
      </listitem>
      <listitem>
        <para>
    Include, immediately after the copyright notices, a license notice giving
    the public permission to use the Modified Version under the terms of this
    License, in the form shown in the Addendum below.
   </para>
      </listitem>
      <listitem>
        <para>
    Preserve in that license notice the full lists of Invariant Sections and
    required Cover Texts given in the Document's license notice.
   </para>
      </listitem>
      <listitem>
        <para>
    Include an unaltered copy of this License.
   </para>
      </listitem>
      <listitem>
        <para>
    Preserve the section Entitled "History", Preserve its Title, and add to it
    an item stating at least the title, year, new authors, and publisher of the
    Modified Version as given on the Title Page. If there is no section
    Entitled "History" in the Document, create one stating the title, year,
    authors, and publisher of the Document as given on its Title Page, then add
    an item describing the Modified Version as stated in the previous sentence.
   </para>
      </listitem>
      <listitem>
        <para>
    Preserve the network location, if any, given in the Document for public
    access to a Transparent copy of the Document, and likewise the network
    locations given in the Document for previous versions it was based on.
    These may be placed in the "History" section. You may omit a network
    location for a work that was published at least four years before the
    Document itself, or if the original publisher of the version it refers to
    gives permission.
   </para>
      </listitem>
      <listitem>
        <para>
    For any section Entitled "Acknowledgements" or "Dedications", Preserve the
    Title of the section, and preserve in the section all the substance and
    tone of each of the contributor acknowledgements and/or dedications given
    therein.
   </para>
      </listitem>
      <listitem>
        <para>
    Preserve all the Invariant Sections of the Document, unaltered in their
    text and in their titles. Section numbers or the equivalent are not
    considered part of the section titles.
   </para>
      </listitem>
      <listitem>
        <para>
    Delete any section Entitled "Endorsements". Such a section may not be
    included in the Modified Version.
   </para>
      </listitem>
      <listitem>
        <para>
    Do not retitle any existing section to be Entitled "Endorsements" or to
    conflict in title with any Invariant Section.
   </para>
      </listitem>
      <listitem>
        <para>
    Preserve any Warranty Disclaimers.
   </para>
      </listitem>
    </orderedlist>
    <para>
  If the Modified Version includes new front-matter sections or appendices that
  qualify as Secondary Sections and contain no material copied from the
  Document, you may at your option designate some or all of these sections as
  invariant. To do this, add their titles to the list of Invariant Sections in
  the Modified Version's license notice. These titles must be distinct from any
  other section titles.
 </para>
    <para>
  You may add a section Entitled "Endorsements", provided it contains nothing
  but endorsements of your Modified Version by various parties--for example,
  statements of peer review or that the text has been approved by an
  organization as the authoritative definition of a standard.
 </para>
    <para>
  You may add a passage of up to five words as a Front-Cover Text, and a
  passage of up to 25 words as a Back-Cover Text, to the end of the list of
  Cover Texts in the Modified Version. Only one passage of Front-Cover Text and
  one of Back-Cover Text may be added by (or through arrangements made by) any
  one entity. If the Document already includes a cover text for the same cover,
  previously added by you or by arrangement made by the same entity you are
  acting on behalf of, you may not add another; but you may replace the old
  one, on explicit permission from the previous publisher that added the old
  one.
 </para>
    <para>
  The author(s) and publisher(s) of the Document do not by this License give
  permission to use their names for publicity for or to assert or imply
  endorsement of any Modified Version.
 </para>
    <bridgehead renderas="sect4">
    5. COMBINING DOCUMENTS
  </bridgehead>
    <para>
  You may combine the Document with other documents released under this
  License, under the terms defined in section 4 above for modified versions,
  provided that you include in the combination all of the Invariant Sections of
  all of the original documents, unmodified, and list them all as Invariant
  Sections of your combined work in its license notice, and that you preserve
  all their Warranty Disclaimers.
 </para>
    <para>
  The combined work need only contain one copy of this License, and multiple
  identical Invariant Sections may be replaced with a single copy. If there are
  multiple Invariant Sections with the same name but different contents, make
  the title of each such section unique by adding at the end of it, in
  parentheses, the name of the original author or publisher of that section if
  known, or else a unique number. Make the same adjustment to the section
  titles in the list of Invariant Sections in the license notice of the
  combined work.
 </para>
    <para>
  In the combination, you must combine any sections Entitled "History" in the
  various original documents, forming one section Entitled "History"; likewise
  combine any sections Entitled "Acknowledgements", and any sections Entitled
  "Dedications". You must delete all sections Entitled "Endorsements".
 </para>
    <bridgehead renderas="sect4">
    6. COLLECTIONS OF DOCUMENTS
  </bridgehead>
    <para>
  You may make a collection consisting of the Document and other documents
  released under this License, and replace the individual copies of this
  License in the various documents with a single copy that is included in the
  collection, provided that you follow the rules of this License for verbatim
  copying of each of the documents in all other respects.
 </para>
    <para>
  You may extract a single document from such a collection, and distribute it
  individually under this License, provided you insert a copy of this License
  into the extracted document, and follow this License in all other respects
  regarding verbatim copying of that document.
 </para>
    <bridgehead renderas="sect4">
    7. AGGREGATION WITH INDEPENDENT WORKS
  </bridgehead>
    <para>
  A compilation of the Document or its derivatives with other separate and
  independent documents or works, in or on a volume of a storage or
  distribution medium, is called an "aggregate" if the copyright resulting from
  the compilation is not used to limit the legal rights of the compilation's
  users beyond what the individual works permit. When the Document is included
  in an aggregate, this License does not apply to the other works in the
  aggregate which are not themselves derivative works of the Document.
 </para>
    <para>
  If the Cover Text requirement of section 3 is applicable to these copies of
  the Document, then if the Document is less than one half of the entire
  aggregate, the Document's Cover Texts may be placed on covers that bracket
  the Document within the aggregate, or the electronic equivalent of covers if
  the Document is in electronic form. Otherwise they must appear on printed
  covers that bracket the whole aggregate.
 </para>
    <bridgehead renderas="sect4">
    8. TRANSLATION
  </bridgehead>
    <para>
  Translation is considered a kind of modification, so you may distribute
  translations of the Document under the terms of section 4. Replacing
  Invariant Sections with translations requires special permission from their
  copyright holders, but you may include translations of some or all Invariant
  Sections in addition to the original versions of these Invariant Sections.
  You may include a translation of this License, and all the license notices in
  the Document, and any Warranty Disclaimers, provided that you also include
  the original English version of this License and the original versions of
  those notices and disclaimers. In case of a disagreement between the
  translation and the original version of this License or a notice or
  disclaimer, the original version will prevail.
 </para>
    <para>
  If a section in the Document is Entitled "Acknowledgements", "Dedications",
  or "History", the requirement (section 4) to Preserve its Title (section 1)
  will typically require changing the actual title.
 </para>
    <bridgehead renderas="sect4">
    9. TERMINATION
  </bridgehead>
    <para>
  You may not copy, modify, sublicense, or distribute the Document except as
  expressly provided for under this License. Any other attempt to copy, modify,
  sublicense or distribute the Document is void, and will automatically
  terminate your rights under this License. However, parties who have received
  copies, or rights, from you under this License will not have their licenses
  terminated so long as such parties remain in full compliance.
 </para>
    <bridgehead renderas="sect4">
    10. FUTURE REVISIONS OF THIS LICENSE
  </bridgehead>
    <para>
  The Free Software Foundation may publish new, revised versions of the GNU
  Free Documentation License from time to time. Such new versions will be
  similar in spirit to the present version, but may differ in detail to address
  new problems or concerns. See
  <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://www.gnu.org/copyleft/"/>.
 </para>
    <para>
  Each version of the License is given a distinguishing version number. If the
  Document specifies that a particular numbered version of this License "or any
  later version" applies to it, you have the option of following the terms and
  conditions either of that specified version or of any later version that has
  been published (not as a draft) by the Free Software Foundation. If the
  Document does not specify a version number of this License, you may choose
  any version ever published (not as a draft) by the Free Software Foundation.
 </para>
    <bridgehead renderas="sect4">
    ADDENDUM: How to use this License for your documents
  </bridgehead>
    <screen>Copyright (c) YEAR YOUR NAME.
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled &#x201C;GNU
Free Documentation License&#x201D;.</screen>
    <para>
  If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
  replace the &#x201C;with...Texts.&#x201D; line with this:
 </para>
    <screen>with the Invariant Sections being LIST THEIR TITLES, with the
Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.</screen>
    <para>
  If you have Invariant Sections without Cover Texts, or some other combination
  of the three, merge those two alternatives to suit the situation.
 </para>
    <para>
  If your document contains nontrivial examples of program code, we recommend
  releasing these examples in parallel under your choice of free software
  license, such as the GNU General Public License, to permit their use in free
  software.
</para>
  </appendix>
</article>
