<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<article xml:id="concept-containers-podman" xml:lang="en"
 role="concept"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
 <info>
  <title>Concepts of Containers and &podman;</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
    <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
    <dm:component>Smart Docs</dm:component>
    <dm:product>Documentation</dm:product>
    <dm:assignee>tbazant@suse.com</dm:assignee>
   </dm:bugtracker>
   <dm:translation>no</dm:translation>
  </dm:docmanager>
 </info>
 <!-- highly inspired by https://susedoc.github.io/doc-sle/main/html/SLE-Micro-podman/article-podman.html -->
 <section xml:id="what-is-containers-podman">
  <title>What are containers and &podman;?</title>
  <para>
   Containers offer a lightweight virtualization method to run multiple virtual
   environments (containers) simultaneously on a single host. Unlike
   technologies such as &xen; or &kvm;, where the processor simulates a
   complete hardware environment and a hypervisor controls virtual machines,
   containers provide virtualization on the operating system level, where the
   kernel controls the isolated containers.
  </para>
  <para>
   <emphasis>&podman;</emphasis> is a short name for Pod Manager Tool. It is a
   daemonless container engine that enables you to run and deploy applications
   using containers and container images. &podman; provides a command line
   interface to manage containers.
  </para>
 </section>
 <section xml:id="how-it-works-podman">
  <title>How does &podman; work?</title>
  <para>
   &podman; provides integration with &systemd;. This way you can control
   containers via &systemd; units. You can create these units for existing
   containers as well as generate units that can start containers if they do
   not exist in the system. Moreover, &podman; can run &systemd; inside
   containers.
  </para>
  <para>
   &podman; enables you to organize your containers into pods. Pods share the
   same network interface and resources. A typical use case for organizing a
   group of containers into a pod is a container that runs a database and a
   container with a client that accesses the database.
  </para>
  <section xml:id="pod-architecture">
   <title>Pods architecture</title>
   <para>
    A pod is a group of containers that share the same namespace, ports and
    network connection. Usually, containers within one pod can communicate
    directly with each other. Each pod contains an infrastructure container
    (<literal>INFRA</literal>), whose purpose is to hold the namespace.
    <literal>INFRA</literal> also enables &podman; to add other containers to
    the pod. Port bindings, cgroup-parent values, and kernel namespaces are
    all assigned to the infrastructure container. Therefore, later changes of
    these values are not possible.
   </para>
   <figure xml:id="fig-pod-architecture">
    <title>Pods architecture</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="pods_architecture.svg" width="100%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="pods_architecture.svg" width="100%"/>
     </imageobject>
     <textobject role="description"><phrase>Pods architecture</phrase>
     </textobject>
    </mediaobject>
   </figure>
   <para>
    Each container in a pod has its own instance of a monitoring program. The
    monitoring program watches the container's process and if the container
    dies, the monitoring program saves its exit code. The program also holds
    open the tty interface for the particular container. The monitoring program
    enables you to run containers in the detached mode when &podman; exits,
    because this program continues to run and enables you to attach tty later.
   </para>
  </section>
 </section>
 <section xml:id="benefits-containers-podman">
  <title>Benefits of containers</title>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     Containers make it possible to isolate applications in self-contained
     units.
    </para>
   </listitem>
   <listitem>
    <para>
     Containers provide near-native performance. Depending on the runtime, a
     container can use the host kernel directly, thus minimizing overhead.
    </para>
   </listitem>
   <listitem>
    <para>
     It is possible to control network interfaces and apply resources inside
     containers through kernel control groups.
    </para>
   </listitem>
  </itemizedlist>
 </section>
 <section xml:id="related-containers-podman">
  <title>Related topics</title>
  <itemizedlist>
   <listitem>
    <para>
     Usage of the <command>podman</command> command is detailed in
     <xref linkend="reference-podman-usage"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     List of available workloads with links to their installation using
     &podman; is included in
     <xref linkend="reference-available-alp-workloads"/>.
    </para>
   </listitem>
  </itemizedlist>
 </section>
</article>
