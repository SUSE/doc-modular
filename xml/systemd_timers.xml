<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->

<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>

<!--filename:
 * use hyphens as separators
 * use topic type as prefix (task|concept|reference)
 * content must be obvious from filename-->

<!--Root ID
 * use topic type as prefix (task|concept|reference)
 * describe task, use verb in infinitive
   e.g. task-register-product-after-installation-->

<!--IDs
  * must not reflect structure-->

<!--metadata
 * product foo
 * product version xyz
 * topic category/ies
 * target group(s)
 * initially published
 * last modified-->
 
<article xml:id="systemd-timers" xml:lang="en"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">

 <info>
   <title>Working with &systemd; timers</title>
   <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
    <dm:bugtracker>
     <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
     <dm:component>Documentation</dm:component>
     <dm:product>Product Name</dm:product>
     <dm:assignee>assignee@suse.com</dm:assignee>
    </dm:bugtracker>
    <dm:translation>no</dm:translation>
   </dm:docmanager>
 </info>

 <section>
  <title>Introduction</title>
   <para>
   Similar to cron, &systemd; timer units provide a mechanism for scheduling
   jobs on Linux. Following the instruction below, you can learn how to create a &systemd; timer.
  </para>
 </section>

 <section>
  <title>Requirements</title>
  <itemizedlist>
   <listitem>
    <para>
     Basic understanding of &systemd;.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section>
  <title>Creating a &systemd; timer</title>
  <para>
   The following procedure describes how toset up a timer that triggers the <filename>foo.sh</filename> shell script.
  </para>
  <procedure>
  <title>Creating a &systemd; timer</title>
  <step>
  <para>
    First step is to create a &systemd; service unit that controls the shell
    script. To do this, open a new text file for editing and add the following
    service unit definition:
   </para>
<screen>[Unit]
Description="Foo shell script"

[Service]
ExecStart=/usr/local/bin/foo.sh</screen>
  </step>
  <step>
  <para>
    Save the file under the name <filename>foo.service</filename> in the directory <filename>/etc/systemd/system/</filename>.
   </para>
  </step>
  <step>
  <para>
  Save the file under the name <filename>foo.service</filename> in the directory <filename>/etc/systemd/system/</filename>.
  </para>
  </step>
  <step>
  <para>
  Open a new text file for editing and add the following timer definition:
   </para>
<screen>[Unit]
Description="Run foo shell script"

[Timer]
OnBootSec=5min
OnUnitActiveSec=24h
Unit=foo.service

[Install]
WantedBy=multi-user.target</screen>
<para>
    The <literal>[Timer]</literal> section in the example above specifies what service to trigger (<literal>foo.service</literal>) and when to trigger it.
    In this case, the option <option>OnBootSec</option> specifies a monotonic timer that triggers the service five minutes after the system boot, while the option <option>OnUnitActiveSec</option> triggers the service 24 hours after the service has been activated (that is, the timer will trigger the service once a day).
    Finally the option <option>WantedBy</option> specifies that the timer should start when the system has reached the multi-user target.
   </para>
   <para>
    Instead of a monotonic timer, you can specify a realtime one using the option <option>OnCalendar</option>.
    The following realtime timer definition triggers the related service unit once a week, starting on Monday at 12:00.
   </para>
<screen>[Timer]
OnCalendar=weekly
Persistent=true</screen>
<para>
    The option <option>Persistent=true</option> indicates that the service will be triggered immediately after the timer activation if the timer missed the last start time (for example, due to the system being powered off).
   </para>
   <para>
    The option <option>OnCalendar</option> can also be used to define specific dates times for triggering a service using the following format: <literal>DayOfWeek Year-Month-Day Hour:Minute:Second</literal>.
    The example below triggers a service at 5am every day:
   </para>
<screen>OnCalendar=*-*-* 5:00:00</screen>
<para>
    You can use an asterisk to specify any value, and commas to list possible values.
    Use two values separated by .. to indicate a contiguous range.
    The following example triggers a service at 6pm on Friday of every month:
   </para>
<screen>OnCalendar=Fri *-*-1..7 18:00:00</screen>
<para>
    To trigger a service at different times, you can specify several <option>OnCalendar</option> entries:
   </para>
<screen>OnCalendar=Mon..Fri 10:00
OnCalendar=Sat,Sun 22:00</screen>
<para>
    In the example above, a service is triggered at 10am on week days and at 10pm on weekends.
   </para>
  </step>
  <step>
  <para>
  When you are done editing the timer unit file, save it under the name
  <filename>foo.timer</filename> in the
  <filename>/etc/systemd/system/</filename> directory. To check the correctness
  of the created unit files, run the following command:
   </para>
<screen>&prompt.sudo; systemd-analyze verify /etc/systemd/system/foo.*</screen>
   <para>
    If the command returns no output, the files have passed the verification successfully.
  </para>
  </step>
  <step>
  <para>
  To start the timer, use the command <command>sudo systemctl start
  foo.timer</command>. To enable the timer on boot, run the command
  <command>sudo systemctl enable foo.timer</command>.
  </para>
  </step>
  </procedure>
  </section>

 <section>
  <title>Summary</title>
  <para>
   A paragraph of text, summing up the result of the task.
  </para>
 </section>
 
 <section>
  <title>Troubleshooting</title>
  <para>A paragraph of text.</para>
  <variablelist>
   <varlistentry>
    <term>Problem phrased as question</term>
    <listitem>
     <para>
      A paragraph of text.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Another problem phrased as question</term>
    <listitem>
     <para>
      Another paragraph of text.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section>
  <title>Next steps</title>
  <itemizedlist>
   <listitem>
    <para>
     An
    </para>
   </listitem>
   <listitem>
    <para>
     Unordered
    </para>
   </listitem>
   <listitem>
    <para>
     List
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section>
  <title>Related topics</title>
  <itemizedlist>
   <listitem>
    <para>
     An
    </para>
   </listitem>
   <listitem>
    <para>
     Unordered
    </para>
   </listitem>
   <listitem>
    <para>
     List
    </para>
   </listitem>
  </itemizedlist>
 </section>
</article>
