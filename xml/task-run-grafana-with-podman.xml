<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<article xml:id="task-run-grafana-with-podman" xml:lang="en"
 role="task"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:its="http://www.w3.org/2005/11/its"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Running the &grafana; workload using &podman;</title>
  <section xml:id="introduction-run-grafana-with-podman">
    <title>Introduction</title>
    <para>
      This article describes how to run &grafana; on the &alp;
      (&alpshort;).
    </para>
  </section>
  <section xml:id="requirements-run-grafana-with-podman">
    <title>Requirements</title>
    <itemizedlist>
      <listitem>
        <para>
          Deployed &alpshort; base OS.
        </para>
      </listitem>
      <listitem>
        <para>
          Installed and enabled &podman;.
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="alp-starting-grafana">
    <title>Starting the &grafana; workload</title>
    <para>
     This section describes how to start the &grafana; workload and set up a
     client so that we can test it with real data.
    </para>
    <procedure>
      <step>
        <para>
          Identify the &grafana; workload image:
        </para>
<screen>
&prompt.root;podman search grafana
 registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads/grafana
</screen>
      </step>
      <step>
        <para>
          Pull the image from the registry and prepare the environment:
        </para>
<screen>
&prompt.root;podman container runlabel install 
 registry.opensuse.org/suse/alp/workloads/tumbleweed_containerfiles/suse/alp/workloads/grafana:latest
</screen>
      </step>
      <step>
        <para>
          Create the <literal>grafana</literal> container from the downloaded
          image:
        </para>
<screen>&prompt.root;grafana-container-manage.sh create</screen>
      </step>
      <step>
        <para>
          Start the container with the &grafana; server:
        </para>
<screen>&prompt.root;grafana-container-manage.sh start</screen>
      </step>
    </procedure>
   </section>
   <section xml:id="alp-setting-grafana-client">
     <title>Setting up a &grafana; client</title>
      <para>
       To test &grafana;, you need to set up a client that will provide real
       data to the &grafana; server.
      </para>
    <procedure>
     <step>
      <para>
       Log in to the client host and install the
       <package>golang-github-prometheus-node_exporter</package> and
       <package>golang-github-prometheus-prometheus</package> packages:
      </para>
<screen>&prompt.root;zypper in golang-github-prometheus-node_exporter golang-github-prometheus-prometheus</screen>
      <note>
       <para>
        If your &grafana; server and client hosts are virtualized by a &kvm;
        containerized workload, use the <option>--network</option>
        option while creating the POD because the <option>--publish</option>
        option does not work in this scenario. To get the IP of the &vmhost;
        default network, run the following command on the &vmhost;:
       </para>
<screen>&prompt.user;virsh net-dhcp-leases default</screen>
      </note>
     </step>
     <step>
      <para>
       Restart the &prometheus; services on the client host:
      </para>
<screen>
&prompt.root;systemctl restart prometheus-node_exporter.service
&prompt.root;systemctl restart prometheus
</screen>
     </step>
    </procedure>
   </section>
  </section>
  <section xml:id="related-run-grafana-with-podman">
    <title>Related topics</title>
    <itemizedlist>
      <listitem>
        <para>
          Details about the usage of the
          <command>kvm-container-manage.sh</command> script are described in
          <xref linkend="reference-grafana-container-manage"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          &alpshort; deployment is described in
          <xref linkend="concept-alp-deployment"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          Enabling &kvm; nested virtualization is described in
          <link xlink:href="https://documentation.suse.com/sles/html/SLES-all/cha-vt-installation.html#sec-vt-installation-nested-vms"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          Enabling &podman; is described in
          <xref linkend="task-enable-podman"/>.
        </para>
      </listitem>
      <listitem>
        <para>
          Find details about &libvirt; in
          <link xlink:href="https://susedoc.github.io/doc-sle/main/html/SLES-virtualization/part-virt-libvirt.html"/>.
        </para>
      </listitem>
    </itemizedlist>
  </section>
</article>
