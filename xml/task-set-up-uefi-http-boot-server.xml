<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->

<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>

<!--metadata
 * product SLES
 * product version xyz
 * topic category/ies network, installation
 * target group(s) system administrators
 * initially published
 * last modified-->

<!-- Based on uefi-httpboot-server.xml
https://documentation.suse.com/sles/15-SP3/html/SLES-all/cha-deployment-prep-uefi-httpboot.html-->

<article xml:id="task-set-up-uefi-http-boot-server" xml:lang="en"
 role="task"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">

 <info>
   <title>Setting up a UEFI HTTP Boot server</title>
   <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
    <dm:bugtracker>
     <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
     <dm:component>Documentation</dm:component>
     <dm:product>PUBLIC SUSE Linux Enterprise Server 15 SP3</dm:product>
     <dm:assignee>tahlia.richardson@suse.com</dm:assignee>
    </dm:bugtracker>
    <dm:translation>no</dm:translation>
   </dm:docmanager>
 </info>

<section xml:id="environment-set-up-uefi-http-boot-server">
 <title>Environment</title>
  <para>This document applies to the following product and product versions:</para>
  <itemizedlist>
  <listitem>
   <para>&sles;&nbsp;15&nbsp;SP3, 15&nbsp;SP2, 15&nbsp;SP1, 15&nbsp;GA, 12&nbsp;SP5, 12&nbsp;SP4, 12&nbsp;SP3</para>
  </listitem>
 </itemizedlist>
</section>

 <section xml:id="introduction-set-up-uefi-http-boot-server">
  <title>Introduction</title>
  <para>
   HTTP Boot can remotely install operating systems from an HTTP URL. While PXE
   can only deploy images to servers in a local subnet, HTTP Boot can deploy
   images to servers across different subnets in routed networks, and can
   quickly transfer larger files, such as the Linux kernel and root file system.
  </para>
  <para>
   This article shows you how to configure DNS, DHCP, and HTTP on a single
   machine to act as an HTTP Boot server.
  </para>
 </section>

 <section xml:id="requirements-set-up-uefi-http-boot-server">
  <title>Requirements</title>
  <itemizedlist>
   <listitem>
    <para>
     &sles; is installed and up to date on your server.
    </para>
   </listitem>
   <listitem>
    <para>
     Networking is configured on your server.
    </para>
   </listitem>
   <listitem>
    <para>
     You have a &sles; ISO image available.
    </para>
   </listitem>
   <listitem>
    <para>
     If you want to enable SSL support, you must have an SSL certificate
     installed on your server.
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="configure-dns-set-up-uefi-http-boot-server">
  <title>Configuring the DNS server</title>
  <para>
   In this procedure, replace the example host names and IP addresses with the appropriate
   values for your server.
  </para>
  <procedure>
   <step>
    <para>
     Install the <package>dnsmasq</package> package:
    </para>
<screen>&prompt.user;<command>sudo zypper install dnsmasq</command></screen>
   </step>
   <step>
    <para>
     Add the following lines to the <filename>/etc/dnsmasq.conf</filename> file:
    </para>
<screen>interface=eth0
addn-hosts=/etc/hosts.conf</screen>
   </step>
   <step>
    <para>
     Assign a domain name to the IP addresses in the
     <filename>/etc/hosts.conf</filename> file:
    </para>
<screen><replaceable>192.168.111.1 www.httpboot.local
2001:db8:f00f:cafe::1 www.httpboot.local</replaceable></screen>
   </step>
   <step>
    <para>
     Enable and start the DNS server:
    </para>
 <screen>&prompt.user;<command>sudo systemctl enable --now dnsmasq</command></screen>
   </step>
  </procedure>
  <note>
   <title>Use the <phrase role="productname">shim</phrase> boot loader</title>
   <para>
    Because of a change in UEFI 2.7, we recommend using a shim boot loader from
    &sle; 15 or newer to avoid potential errors caused by the additional DNS
    node.
   </para>
  </note>
 </section>

 <section xml:id="configure-http-set-up-uefi-http-boot-server">
  <title>Configuring the HTTP server</title>
  <procedure>
   <step>
    <para>
     Install the <package>apache2</package> package:
    </para>
<screen>&prompt.user;<command>sudo zypper install apache2</command></screen>
   </step>
   <step>
    <para>
     In the root directory of the HTTP Boot server (<literal>/srv/www/htdocs/</literal>),
     create a subdirectory for the installation content. For example,
     <literal>/srv/www/htdocs/sle/</literal>:
    </para>
<screen>&prompt.user;<command>sudo mkdir /srv/www/htdocs/sle</command></screen>
   </step>
   <step>
    <para>
     Copy or extract all of the files from the ISO to the new directory.
    </para>
   </step>
   <step>
    <para>
     To configure the boot menu, edit the
     <filename>/srv/www/htdocs/sle/EFI/BOOT/grub.cfg</filename> file using the
     following example as a reference:
    </para>
<screen> menuentry 'Installation IPv4' --class opensuse --class gnu-linux --class gnu --class os {
  set gfxpayload=keep
  echo 'Loading kernel ...'
  linuxefi /sle/boot/x86_64/loader/linux install=http://www.httpboot.local/sle
  echo 'Loading initial ramdisk ...'
  initrdefi /sle/boot/x86_64/loader/initrd
 }

 menuentry 'Installation IPv6' --class opensuse --class gnu-linux --class gnu --class os {
  set gfxpayload=keep
  echo 'Loading kernel ...'
  linuxefi /sle/boot/x86_64/loader/linux install=http://www.httpboot.local/sle ipv6only=1 ifcfg=*=dhcp6,DHCLIENT6_MODE=managed
  echo 'Loading initial ramdisk ...'
  initrdefi /sle/boot/x86_64/loader/initrd
 }</screen>
   </step>
   <step>
    <para>
     Enable and start <literal>apache2</literal>:
    </para>
<screen>&prompt.user;<command>sudo systemctl enable --now apache2</command></screen>
   </step>
  </procedure>
 </section>

 <section xml:id="configure-dhcp-set-up-uefi-http-boot-server">
  <title>Configuring the DHCP server</title>
  <para>
   In this procedure, replace the example IP addresses and subnets with the
   appropriate values for your system.
  </para>
  <procedure>
   <step>
    <para>
     Install the <package>dhcp-server</package> package:
    </para>
<screen>&prompt.user;<command>sudo zypper install dhcp-server</command></screen>
   </step>
   <step>
    <para>
     Edit the <filename>/etc/sysconfig/dhcpd</filename> file to specify the
     network interface for the DHCPv4 and DHCPv6 servers:
    </para>
<screen>DHCPD_INTERFACE="eth0"
DHCPD6_INTERFACE="eth0"</screen>
   </step>
   <step>
    <para>
     To configure the DHCPv4 server, edit the <filename>/etc/dhcpd.conf</filename>
     file using the following example as a reference:
    </para>
<screen>option domain-name-servers 192.168.111.1;
option routers 192.168.111.1;
default-lease-time 14400;
ddns-update-style none;
subnet 192.168.111.0 netmask 255.255.255.0 {
  range dynamic-bootp 192.168.111.100 192.168.111.120;
  default-lease-time 14400;
  max-lease-time 172800;
  option vendor-class-identifier "HTTPClient"; <co xml:id="co-venclassID-v4"/>
  filename "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi"; <co xml:id="co-booturl-v4"/>
}</screen>
    <calloutlist>
     <callout arearefs="co-venclassID-v4">
      <para>
       The vendor class ID must be <literal>HTTPClient</literal>. The client uses
     this ID to identify an HTTP Boot offer.
      </para>
     </callout>
     <callout arearefs="co-booturl-v4">
      <para>
       The boot URL must point to the directory you created in
       <xref linkend="configure-http-set-up-uefi-http-boot-server"/>.
      </para>
     </callout>
    </calloutlist>
   </step>
   <step>
    <para>
     To configure the DHCPv6 server, edit the <filename>/etc/dhcpd6.conf</filename>
     file using the following example as a reference:
    </para>
<screen>option dhcp6.bootfile-url code 59 = string;
option dhcp6.vendor-class code 16 = {integer 32, integer 16, string};
subnet6 2001:db8:f00f:cafe::/64 {
        range6 2001:db8:f00f:cafe::42:10 2001:db8:f00f:cafe::42:99;
        option dhcp6.bootfile-url "http://www.httpboot.local/sle/EFI/BOOT/bootx64.efi"; <co xml:id="co-booturl-v6"/>
        option dhcp6.name-servers 2001:db8:f00f:cafe::1;
        option dhcp6.vendor-class 0 10 "HTTPClient"; <co xml:id="co-venclassID-v6"/>
}</screen>
      <calloutlist>
       <callout arearefs="co-booturl-v6">
        <para>
         The boot URL must point to the directory you created in
         <xref linkend="configure-http-set-up-uefi-http-boot-server"/>.
        </para>
       </callout>
       <callout arearefs="co-venclassID-v6">
        <para>
         The vendor class option must consist of the enterprise number, the
         vendor class length, and the vendor class content. The HTTP Boot driver
         ignores the enterprise number, so you can set it to <literal>0</literal>.
         The vendor class length must <literal>10</literal>, and the content
         must be <literal>HTTPClient</literal>. The client uses this ID
         to identify an HTTP Boot offer.
        </para>
       </callout>
      </calloutlist>
   </step>
   <step>
    <para>
     Start the DHCP servers:
    </para>
<screen>&prompt.user;<command>sudo systemctl enable --now dhcpd</command>
&prompt.user;<command>sudo systemctl enable --now dhcpd6</command></screen>
   </step>
  </procedure>
 </section>

 <section xml:id="enable-ssl-set-up-uefi-http-boot-server">
  <title>Enabling SSL support for the HTTP server (optional)</title>
  <para>
   HTTPS Boot is only supported on &sle; 15 and newer. To use HTTPS Boot, you
   must convert an SSL certificate into the <literal>DER</literal>
   format and enroll it into the client's firmware.
  </para>
  <para>
   This procedure assumes that you already have an SSL certificate installed on
   your server.
  </para>
  <procedure>
   <step>
    <para>
     Convert the certificate into the <literal>DER</literal> format:
    </para>
<screen>&prompt.user;<command>sudo openssl x509 -in <replaceable>CERTIFICATE</replaceable>.crt -outform der -out <replaceable>CERTIFICATE</replaceable>.der</command></screen>
   </step>
   <step>
    <para>
     Enroll the server certificate into the client firmware. The procedure
     for enrolling the converted certificate depends on the client. For some
     hardware, you must enroll the certificate manually using an external
     storage device with the certificate on it. For machines with Redfish
     support, you can enroll the certificate remotely. Consult the
     documentation for your specific client for more information on
     enrolling certificates.
    </para>
   </step>
   <step>
    <para>
     Edit the <filename>/etc/sysconfig/apache2</filename> file to add the SSL flag:
    </para>
<screen>APACHE_SERVER_FLAGS="SSL"</screen>
   </step>
   <step>
    <para>
     In the same file, ensure that the <literal>ssl</literal> module appears in
     the <literal>APACHE_MODULES</literal> list:
    </para>
<screen>&prompt.user;<command>sudo grep 'APACHE_MODULES.*ssl' /etc/sysconfig/apache2</command>
<emphasis role="bold">APACHE_MODULES</emphasis>="actions alias auth_basic authn_core authn_file authz_host
authz_groupfile authz_core authz_user autoindex cgi dir env expires include
log_config mime negotiation setenvif <emphasis role="bold">ssl</emphasis> socache_shmcb userdir reqtimeout"</screen>
   </step>
   <step>
    <para>
     Copy the private key and the certificate to the
     <filename>/etc/apache2/</filename> directory:
    </para>
<screen>&prompt.user;<command>sudo cp server.key /etc/apache2/ssl.key/</command>
&prompt.user;<command>sudo chown wwwrun /etc/apache2/ssl.key/server.key</command>
&prompt.user;<command>sudo chmod 600 /etc/apache2/ssl.key/server.key</command>
&prompt.user;<command>sudo cp server.crt /etc/apache2/ssl.crt/</command></screen>
   </step>
   <step>
    <para>
     Create the SSL vhost configuration:
    </para>
<screen>&prompt.user;<command>sudo cp /etc/apache2/vhosts.d/vhost-ssl.template /etc/apache2/vhosts.d/vhost-ssl.conf</command></screen>
   </step>
   <step>
    <para>
     Edit the <filename>/etc/apache2/vhosts.d/vhost-ssl.conf</filename> file to
     change the private key and the certificate to the following values:
    </para>
<screen>SSLCertificateFile /etc/apache2/ssl.crt/server.crt
SSLCertificateKeyFile /etc/apache2/ssl.key/server.key</screen>
   </step>
   <step>
    <para>
     Restart Apache to activate the SSL support:
    </para>
<screen>&prompt.user;<command>sudo systemctl restart apache2</command></screen>
   </step>
   <step>
    <para>
     Replace the <literal>http://</literal> prefix with
     <literal>https://</literal> in the <filename>/etc/dhcpd.conf</filename>
     and <filename>/etc/dhcpd6.conf</filename> files:
    </para>
<screen>filename "http<emphasis role="bold">s</emphasis>://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";</screen>
<screen>option dhcp6.bootfile-url "http<emphasis role="bold">s</emphasis>://www.httpboot.local/sle/EFI/BOOT/bootx64.efi";</screen>
   </step>
   <step>
    <para>
     Restart the DHCP servers:
    </para>
<screen>&prompt.user;<command>sudo systemctl restart dhcpd</command>
&prompt.user;<command>sudo systemctl restart dhcpd6</command></screen>
   </step>
  </procedure>
 </section>

 <section xml:id="summary-set-up-uefi-http-boot-server">
  <title>Summary</title>
  <para>
   You can now use this server to remotely install operating systems on clients
   that support HTTP Boot. Consult the relevant documentation for information
   on how to enable HTTP Boot on client machines.
  </para>
 </section>

 <section xml:id="troubleshooting-set-up-uefi-http-boot-server">
  <title>Troubleshooting</title>
  <variablelist>
   <varlistentry>
    <term>RP filter dropping DHCPv6 packets</term>
    <listitem>
     <para>
      If DHCPv6 packets are dropped by the RP filter in the firewall, check the
      firewall log. If it contains the <literal>rpfilter_DROP</literal> entry,
      disable the filter using the following configuration in
      <filename>/etc/firewalld/firewalld.conf</filename>:
     </para>
     <screen>IPv6_rpfilter=no</screen>
    </listitem>
   </varlistentry>
  </variablelist>
 </section>

 <section xml:id="next-set-up-uefi-http-boot-server">
  <title>Next steps</title>
  <itemizedlist>
   <listitem>
    <para>
     Installing UEFI support (VMs)
    </para>
   </listitem>
   <listitem>
    <para>
     Guest installation (VMs)
    </para>
   </listitem>
   <listitem>
    <para>
     Remote installation
    </para>
   </listitem>
   <listitem>
    <para>
     Booting the installation system
    </para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="related-set-up-uefi-http-boot-server">
  <title>Related topics</title>
  <itemizedlist>
   <listitem>
    <para>
     Setting up a PXE boot server
    </para>
   </listitem>
   <listitem>
    <para>
     Customizing installation images
    </para>
   </listitem>
   <listitem>
    <para>
     Setting up a network installation source
    </para>
   </listitem>
  </itemizedlist>
 </section>
</article>
