<?xml version="1.0" encoding="UTF-8"?>
<!-- This file originates from the project https://github.com/openSUSE/doc-kit -->
<!-- This file can be edited downstream. -->

<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
 type="text/xml"
 title="Profiling step"?>
<!DOCTYPE article
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>

<!--metadata
 * product SLES, SLED, SLE-HA (?), SLES-SAP (?), SLE-HPC (?), SLE-RT (?)
 * product version 15 SP3, 15 SP4 (?)
 * topic category/ies architecture, system administration
 * target group(s) system administrators, system operators
 * initially published 08-2021
 * last modified 2021-->

<article xml:id="task-working-sudo" xml:lang="en"
 role="task"
 xmlns="http://docbook.org/ns/docbook" version="5.1"
 xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink">

 <info>
   <title>Working with &sudo;</title>
   <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
    <dm:bugtracker>
     <dm:url>https://bugzilla.suse.com/enter_bug.cgi</dm:url>
     <dm:component>Smart Docs</dm:component>
     <dm:product>Documentation</dm:product>
     <dm:assignee>julia.faltenbacher@suse.com</dm:assignee>
    </dm:bugtracker>
    <dm:translation>no</dm:translation>
   </dm:docmanager>
  <keywordset>
   <keyword>sudo</keyword>
   <keyword>su</keyword>
   <keyword>root user</keyword>
   <keyword>sudo configuration</keyword>
   <keyword>visudo</keyword>
  </keywordset>
 </info>

<section xml:id="task-working-sudo-environment">
 <title>Environment</title>
  <para>This document applies to the following products and product versions:</para>
  <itemizedlist>
  <listitem>
   <para>&sles;&nbsp;15&nbsp;SP3, 15&nbsp;SP2, 15&nbsp;SP1, 15&nbsp;GA</para>
  </listitem>
  <listitem>
   <para>&sles4sap;&nbsp;15&nbsp;SP3, 15&nbsp;SP2, 15&nbsp;SP1, 15&nbsp;GA</para>
  </listitem>
  <listitem>
   <para>&sleha;&nbsp;15&nbsp;SP3, 15&nbsp;SP2, 15&nbsp;SP1, 15&nbsp;GA</para>
  </listitem>
  <listitem>
   <para>&slehpc;&nbsp;15&nbsp;SP3, 15&nbsp;SP2, 15&nbsp;SP1, 15&nbsp;GA</para>
  </listitem>
  <listitem>
   <para>&sled;&nbsp;15&nbsp;SP3, 15&nbsp;SP2, 15&nbsp;SP1, 15&nbsp;GA</para>
  </listitem>
  <listitem>
   <para>&slert;&nbsp;15&nbsp;SP3, 15&nbsp;SP2, 15&nbsp;SP1, 15&nbsp;GA</para>
  </listitem>
 </itemizedlist>
</section>

 <section xml:id="task-working-sudo-intro">
  <title>Introduction</title>
   <para>
    The following article explains the basic usage of the command &sudo;.
   </para>
 </section>

 <section xml:id="task-working-sudo-requirements">
  <title>Requirements</title>
  <para>
   To use &sudo;, you need to have the <productname>sudo</productname> package
   installed which is usually availabe by default on &productname;.
  </para>
 </section>

 <section xml:id="task-working-sudo-single-command">
  <title>Running a single command</title>
  <para>
    As a regular user, you can run any command as &rootuser; by
    adding &sudo; before it. This prompts you to provide the &rootuser;
    password. If authenticated successfully, this runs the command as
    &rootuser;:
   </para>
   <screen>
&prompt.user;<command>id -un</command><co xml:id="co-sudo-usage-id"/>
&exampleuser_plain;
&prompt.sudo;<command>id -un</command>
root's password:<co xml:id="co-sudo-usage-pw"/>
root
&prompt.user;<command>id -un</command>
&exampleuser_plain;<co xml:id="co-sudo-usage-after"/>
&prompt.sudo;<command>id -un</command>
<co xml:id="co-sudo-usage-nopw"/>
root
   </screen>
   <calloutlist>
    <callout arearefs="co-sudo-usage-id">
     <para>
      The <command>id -un</command> command prints the login name of the
      current user.
     </para>
    </callout>
    <callout arearefs="co-sudo-usage-pw">
     <para>
      The password is not shown during input, neither as clear text nor as
      masking characters.
     </para>
    </callout>
    <callout arearefs="co-sudo-usage-after">
     <para>
      Only commands that start with &sudo; run with elevated privileges.
     </para>
    </callout>
    <callout arearefs="co-sudo-usage-nopw">
     <para>
      The elevated privileges persist for a certain period of time, so you
      do not have to provide the &rootuser; again.
     </para>
    </callout>
   </calloutlist>
   <tip>
    <title>I/O redirection</title>
    <para>
     When using &sudo;, I/O redirection does not work:
    </para>
    <screen>
&prompt.sudo;echo s &gt; /proc/sysrq-trigger
bash: /proc/sysrq-trigger: Permission denied
&prompt.sudo;cat &lt; /proc/1/maps
bash: /proc/1/maps: Permission denied
    </screen>
    <para>
     In the example above, only the <command>echo</command> and
     <command>cat</command> commands run with elevated privileges. The
     redirection is done by the user's shell with user privileges. To perform
     redirection with elevated privileges, either start a shell as in <xref
     linkend="task-working-sudo-start-shell"/> or use the <command>dd</command>
     utility:
    </para>
    <screen>
echo s | sudo dd of=/proc/sysrq-trigger
sudo dd if=/proc/1/maps | cat <!-- TODO: Better example! -->
    </screen>
   </tip>
 </section>

 <section xml:id="task-working-sudo-start-shell">
   <title>Starting a shell</title>
   <para>
    Using &sudo; every time to run a command with elevated privileges is not
    always practical.  While you can use the <command>sudo bash</command>
    command, it is recommended to use one of the built-in mechanisms to start a
    shell:
   </para>
   <variablelist>
    <varlistentry>
     <term><command>sudo -s (<replaceable>COMMAND</replaceable>)</command>
     </term>
     <listitem>
      <para>
       Starts a shell specified by the <envar>SHELL</envar> environment
       variable or the target user's default shell. If a command is specified, it
       is passed to the shell (with the <option>-c</option> option). Otherwise the
       shell runs in interactive mode.
      </para>
      <screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -s
root's password:
<prompt>root:/home/&exampleuser_plain; # </prompt>exit
<prompt>&exampleuser_plain;:~ &gt; </prompt>
      </screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>sudo -i (<replaceable>COMMAND</replaceable>)</command>
     </term>
     <listitem>
      <para>
       Similar to <option>-s</option>, but starts the shell as a login shell. This
       means that the shell's start-up files (<filename>.profile</filename>
       etc.) are processed, and the current working directory is set to the
       target user's home directory.
      </para>
      <screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo -i
root's password:
<prompt>root:~ # </prompt>exit
<prompt>&exampleuser_plain;:~ &gt; </prompt>
      </screen>
     </listitem>
    </varlistentry>
   </variablelist>
   <tip>
    <title>Environment variables</title>
    <para>
     By default, &sudo; does not propagate environment variables. This behavior
     can be changed using the <option>env_reset</option> option <!-- (see <xref
      linkend="tab-adm-sudo-options"/>).-->
    </para>
   </tip>
  </section>

 <section xml:id="task-working-sudo-usecases">
  <title>&sudo; use cases</title>
  <para>
   While the default configuration works for standard usage scenarios, you can
   customize the default configuration to meet your specific needs.
  </para>

  <section xml:id="task-working-sudo-usecases-userpw">
   <title>Using &sudo; without &rootuser; password</title>
   <para>
    Modern <productname>Unix</productname> systems generally use user groups as
    a security protocol to control access privileges. The group
    <systemitem class="groupname">wheel</systemitem> is a special user group
    to control access to the <command>su</command> or &sudo; command.
    By design, members of the group <systemitem
     class="groupname">wheel</systemitem> can run all commands with &sudo; as
    &rootuser;. The following procedure explains how to add a user account to
    the <systemitem class="groupname">wheel</systemitem> group.
   </para>
   <procedure>
    <step>
     <para>
      Add your user account to the group
      <systemitem class="groupname">wheel</systemitem>.
     </para>
     <para>
      If your user account is not already a member of the <systemitem
       class="groupname">wheel</systemitem> group, add it:
      </para>
      <screen>sudo usermod -a -G wheel <replaceable>USERNAME</replaceable></screen>
      <para>
      Log out and log in
      again to enable the change. Verify that the change was successful by
      running the <command>groups <replaceable>USERNAME</replaceable></command>
      command.
     </para>
    </step>
    <step>
     <para>
      Authenticate with the user account's normal password.
     </para>
     <para>
      Create the file <filename>/etc/sudoers.d/userpw</filename> using the
      following command:
     </para>
     <screen>visudo -f /etc/sudoers.d/userpw</screen>
    </step>
    <step>
     <para>Add the following line:</para>
     <screen>
Defaults !targetpw
     </screen>
    </step>
    <step>
     <para>
      Select a new default rule.
     </para>
     <para>
      Depending on whether you want users to re-enter their passwords,
      uncomment the appropriate line in <filename>/etc/sudoers</filename> and
      comment out the default rule.
     </para>
     <screen>
## Uncomment to allow members of group wheel to execute any command
# %wheel ALL=(ALL) ALL

## Same thing without a password
# %wheel ALL=(ALL) NOPASSWD: ALL
     </screen>
    </step>
    <step>
     <para>
      Make the default rule more restrictive.
     </para>
     <para>
      Comment out or remove the allow-everything rule in
      <filename>/etc/sudoers</filename>:
     </para>
     <screen>
ALL     ALL=(ALL) ALL   # WARNING! Only use this together with 'Defaults targetpw'
     </screen>
     <warning>
      <title>Dangerous rule in sudoers</title>
      <para>
       Do not skip this step. Otherwise <emphasis>any</emphasis> user can
       execute <emphasis>any</emphasis> command as &rootuser;!
      </para>
     </warning>
    </step>
    <step>
     <para>
      Test the configuration.
     </para>
     <para>
      Run &sudo; as member and non-member of
      <systemitem class="groupname">wheel</systemitem>.
     </para>
     <screen>
<prompt>&exampleuser_plain;:~ &gt; </prompt>groups
users wheel
<prompt>&exampleuser_plain;:~ &gt; </prompt>sudo id -un
&exampleuser_plain;'s password:
root
<prompt>&exampleuserII_plain;:~ &gt; </prompt>groups
users
<prompt>&exampleuserII_plain;:~ &gt; </prompt>sudo id -un
&exampleuserII_plain; is not in the sudoers file.  This incident will be reported.
     </screen>
    </step>
   </procedure>
  </section>

  <section xml:id="task-working-sudo-usecases-xorg">
   <title>Using &sudo; with &xvendor; applications</title>
   <para>
    Starting graphical applications with &sudo; usually results in the following
    error:
   </para>
   <screen>
&prompt.sudo;xterm
xterm: Xt error: Can't open display: %s
xterm: DISPLAY is not set
   </screen>
   <para>
    A simple workaround is to use <command>xhost</command> to temporarily allow
    the &rootuser; to access the local user's X session. This is done using the
    following command:
   </para>
   <screen>x
host si:localuser:root
   </screen>
   <para>
    The command below removes the granted access:
   </para>
   <screen>
xhost -si:localuser:root
   </screen>
   <warning>
    <title>Potential security issue</title>
    <para>
     Running graphical applications with root privileges has security
     implications. It is recommended to enable root access for a graphical
     application only as an exception. It is also recommended to revoke
     the granted root access as soon as the graphical application is closed.
    </para>
   </warning>
  </section>
 </section>

 <section xml:id="task-working-sudo-troubleshooting">
   <title>Troubleshooting</title>
  <remark>2021-09-13: I am not happy with the below sentence. Maybe we can agree
  on a standard phrase?</remark>
   <para>
    The following instructions help you to fix any issues.
   </para>
   <section xml:id="task-working-sudo-troubleshooting-unlock">
    <title>Unlocking yourself</title>
  <para>
   If you accidentally locked yourself out of &sudo;, do the following:
  </para>
  <procedure>
   <step>
    <para>
     Start a root shell with <command>su -</command>.
    </para>
   </step>
   <step>
    <para>
     Enter the &rootuser; password.
    </para>
   </step>
   <step>
    <para>
     Run <command>visudo</command>.
    </para>
    <para>A file is opened.</para>
   </step>
   <step>
    <para>
     Fix all the syntax errors mentioned in the file.
    </para>
   </step>
  </procedure>
  <para>
   Your user is unlocked again.
  </para>
   </section>
 </section>

 <section xml:id="task-working-sudo-next-steps">
  <title>Next steps</title>
  <itemizedlist>
   <listitem>
    <para>
     <citetitle>Configuring &sudo;</citetitle>
    </para>
    <!-- <para>
     Configuring &sudo; <xref linkend="task-configuring-sudo"/>
    </para> -->
   </listitem>
  </itemizedlist>
 </section>

  <section xml:id="task-working-sudo-related-topics">
  <title>Related topics</title>
  <itemizedlist>
   <listitem>
   <!-- <para>
     &sudo;: basic concept <xref linkend="concept-sudo-basics"/>
    </para> -->
    <para>
     <citetitle>&sudo;: basic concept</citetitle>
    </para>
   </listitem>
  </itemizedlist>
 </section>
</article>
